{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>A site to keep coding related content. It's a living collection of best practices and stuff which I gathered over the years. The content of this site may or may not be complete, correct or useful to you. The content is kept minimalistic on purpose.</p> <p>Nice and Shiny</p>"},{"location":"ai/","title":"AI","text":"<p>Context is king! \ud83d\udca9 In -&gt; \ud83d\udca9 Out</p>","tags":["ai"]},{"location":"ai/system-prompt/","title":"System Prompt","text":"<p>System prompts serve as the foundational instructions that dictate an AI's behavior. They establish the framework for how the AI will interact and respond, similar to a job description for an employee. These prompts define the AI's role, its area of expertise, and the overall tone it should adopt.</p> <p>Key elements of system prompts include: - Behavioral Framing: Defining the AI's role, personality, or expertise. - Constraint Setting: Establishing limitations or rules for the AI's responses. - Context Provision: Providing background information or situational context. - Ethical Guidance: Incorporating ethical guidelines or value alignments.</p> <p>A system prompt is inserted as a templated text\u00a0in the beginning of the Prompt.</p>","tags":["ai"]},{"location":"ai/examples/agent-promt-template/","title":"[MyProject Name]","text":""},{"location":"ai/examples/agent-promt-template/#overview","title":"Overview","text":"<p>[MyProject Short Description]</p>"},{"location":"ai/examples/agent-promt-template/#tech-stack","title":"Tech Stack","text":"<ul> <li>.NET 9</li> </ul>"},{"location":"ai/examples/agent-promt-template/#project-structure","title":"Project Structure","text":"<ul> <li>src/MyProject: this project contains our application; any features should be added here</li> <li>src/MyProject.Tests: the tests are written with NUnit</li> </ul>"},{"location":"ai/examples/agent-promt-template/#architecture","title":"Architecture","text":"<p>We are using an approach called \"vertical slices\". This means we place all the code related to a specific functionality in a single directory. Only some top-level files are not in directories (i.e. <code>AssemblyAttributes.cs</code>, <code>GlobalUsings.cs</code>, and <code>Program.cs</code>). The test project follows the same structure.</p> <p>Each vertical slice contains some documentation files with details about it:</p> <ul> <li><code>ARCHITECTURE.md</code>: high-level overview of the contracts, components, used patterns, design decisions, failure modes / error handling, and testing approach</li> <li><code>REQUIREMENTS.md</code>: the high-level description of the slice in terms of user-facing behavior</li> </ul> <p>When you need to reference another slice, you can first look at these files to get the most important information, and only look at the implementation itself if the files do not contain sufficient information.</p> <p>In addition to the vertical slices there are two special directories:</p> <ul> <li><code>Core</code>: this directory contains shared infrastructure code which is not directly related to any particular functionality, for example the general <code>ProgramHost</code></li> <li><code>SharedKernel</code>: this contains all business logic which needs to be shared across multiple slices</li> </ul> <p>Vertical slices are only allowed to reference code in their own slice, other slice's functionality through their contracts (and service collection extensions), as well as <code>Core</code> and <code>SharedKernel</code>. They MUST NOT reference implementation code in another vertical slice, only contracts. While implementing a feature, if you find code you would like to re-use across slices, you can extract it to the <code>SharedKernel</code>. But do so cautiously to not introduce unnecessary coupling.</p> <p>The application consists of only a single main project which contains the WebApi.</p>"},{"location":"ai/examples/agent-promt-template/#existing-vertical-slices","title":"Existing Vertical Slices","text":"<p>The application currently contains the following vertical slices:</p> <ul> <li> <p>GetXyz: Allows getting the xyz value </p> </li> <li> <p>PostXyz: Updates the xyz with the specific value</p> </li> </ul>"},{"location":"ai/examples/agent-promt-template/#used-libraries","title":"Used Libraries","text":"<p>Here is the list of libraries we use. Unless explicitly instructed, you must not add any additional dependencies. This means you MUST NOT update any csproj file or add any package via the dotnet CLI or otherwise unless explicitly instructed. However, please suggest possible new dependencies where it makes sense.</p>"},{"location":"ai/examples/agent-promt-template/#nunit-4","title":"NUnit 4","text":"<p>This is the repository.</p> <p>The documentation can be found online.</p> <p>We use this library for all tests.</p>"},{"location":"ai/examples/agent-promt-template/#testing-infrastructure","title":"Testing Infrastructure","text":"<p>Our testing approach uses comprehensive end-to-end testing.</p>"},{"location":"ai/examples/agent-promt-template/#test-architecture","title":"Test Architecture","text":""},{"location":"ai/examples/agent-promt-template/#test-helpers-srcmyprojecttests","title":"Test Helpers (<code>src/[MyProject].Tests/</code>)","text":"<ul> <li><code>TestHost.cs</code>: Main test host that manages the application lifecycle</li> <li> <p>Provides <code>TestHost.Create()</code> factory method</p> </li> <li> <p><code>OtherClass.cs</code>: Manages test timing and cancellation</p> </li> <li><code>MyHelperMethod()</code> helps with stuff</li> </ul>"},{"location":"ai/examples/agent-promt-template/#test-patterns","title":"Test Patterns","text":"<p>Basic Test Structure:</p> <pre><code>[Test]\npublic async Task GivenCondition_WhenAction_ThenExpectedResult()\n{\n    using var timeouts = TestTimeouts.Create();\n    var timeoutToken = timeouts.TestTimeoutToken;\n\n    await using var host = TestHost.Create();\n\n    // Setup initial state\n    // ...\n\n    // Run the application\n    host.Run(timeoutToken, \"increment\", \"foo\", \"5\");\n\n    // Perform action\n    // ...\n\n    // Assert results with polling\n    await Assert.ThatAsync(\n        async () =&gt; { /* condition check */ },\n        Is.EqualTo(expectedValue)\n            .After(timeouts.AssertionTimeoutInMs)\n            .MilliSeconds.PollEvery(TestTimeouts.PollingIntervalInMs)\n            .MilliSeconds\n    );\n}\n</code></pre> <p>Key Testing Practices:</p> <ul> <li>End-to-End Testing: All tests execute the full application as a user would</li> <li>Async Assertions: Use <code>Assert.ThatAsync</code> with polling for file system operations</li> <li>Timeout Management: Always use <code>TestTimeouts</code> for consistent timeout handling</li> <li>Resource Cleanup: Use <code>using</code> and <code>await using</code> for proper disposal</li> <li>Isolated Test Data: Each test creates unique directories to avoid interference</li> </ul>"},{"location":"ai/examples/agent-promt-template/#assertion-patterns","title":"Assertion Patterns","text":"<p>We are using the NUnit fluent assertions.</p> <p>Simple Synchronous Assertion:</p> <pre><code>Assert.That(fileCount, Is.EqualTo(5));\n</code></pre> <p>Simple Asynchronous Assertion:</p> <pre><code>await Assert.ThatAsync(() =&gt; fileCountTask, Is.EqualTo(5));\n</code></pre> <p>IMPORTANT: We must only use async assertions when necessary. If the result we are asserting on is synchronous, we should also use a synchronous assertion.</p> <p>Eventual Synchronous Assertion:</p> <pre><code>Assert.That(\n    () =&gt; fileCount, \n    Is.EqualTo(expectedContent)\n        .After(timeouts.AssertionTimeoutInMs)\n        .MilliSeconds.PollEvery(TestTimeouts.PollingIntervalInMs)\n        .MilliSeconds\n);\n</code></pre> <p>Eventual Asynchronous Assertion:</p> <pre><code>await Assert.ThatAsync(\n    () =&gt; fileCountTask, \n    Is.EqualTo(expectedContent)\n        .After(timeouts.AssertionTimeoutInMs)\n        .MilliSeconds.PollEvery(TestTimeouts.PollingIntervalInMs)\n        .MilliSeconds\n);\n</code></pre> <p>IMPORTANT: We must only use async assertions when necessary. If the result we are asserting on is synchronous, we should also use a synchronous assertion.</p> <p>File Content Verification:</p> <pre><code>await Assert.ThatAsync(\n    async () =&gt;\n    {\n        var fileInfo = new FileInfo(filePath);\n        if (fileInfo.Exists)\n        {\n            return await File.ReadAllTextAsync(filePath, cancellationToken);\n        }\n        return \"\";\n    },\n    Is.EqualTo(expectedContent)\n        .After(timeouts.AssertionTimeoutInMs)\n        .MilliSeconds.PollEvery(TestTimeouts.PollingIntervalInMs)\n        .MilliSeconds\n);\n</code></pre> <p>File/Directory Existence:</p> <pre><code>Assert.That(\n    () =&gt; File.Exists(filePath),\n    Is.True\n        .After(timeouts.AssertionTimeoutInMs)\n        .MilliSeconds.PollEvery(TestTimeouts.PollingIntervalInMs)\n        .MilliSeconds\n);\n</code></pre> <p>Log Message Verification:</p> <pre><code>Assert.That(\n    () =&gt; host.LogEntries,\n    Has.One.Matches&lt;string&gt;(msg =&gt; msg.Contains(expectedMessage, StringComparison.OrdinalIgnoreCase))\n        .After(timeouts.AssertionTimeoutInMs)\n        .MilliSeconds.PollEvery(TestTimeouts.PollingIntervalInMs)\n        .MilliSeconds\n);\n</code></pre> <p>stdout / stderr Verification:</p> <pre><code>Assert.That(\n    () =&gt; host.GetStdout(), // or .GetStderr\n    Does.Contain(expectedMessage))\n        .After(timeouts.AssertionTimeoutInMs)\n        .MilliSeconds.PollEvery(TestTimeouts.PollingIntervalInMs)\n        .MilliSeconds\n);\n</code></pre>"},{"location":"ai/examples/agent-promt-template/#common-test-issues-and-solutions","title":"Common Test Issues and Solutions","text":"<p>File System Timing: Always use polling assertions since file system operations are asynchronous Resource Leaks: Ensure proper disposal with <code>using</code> statements Path Handling: Use <code>Path.Combine()</code> for cross-platform path construction</p>"},{"location":"ai/examples/agent-promt-template/#development-style","title":"Development Style","text":"<ul> <li>we use vertical slices to create code with high cohesion<ul> <li>most changes you will do are going to affect only a single slice, but sometimes more than one slice (or the <code>SharedKernel</code>) needs to be updated</li> <li>you should almost never need to touch the code in <code>Core</code>; if you think you do need to change something there, stop and ask the user for confirmation about the proposed change</li> </ul> </li> <li>we are using Test-Driven Development (TDD)</li> <li>all tests are end-to-end tests which execute the app by invoking it like a user would</li> <li>after any change, we run <code>dotnet test</code> to ensure that the application builds and that all tests succeed</li> <li>you must continue making changes until the feature is fully implemented and all tests succeed</li> <li>when a build produces errors due to analyzers (e.g. because of a missing newline at the end of a file), you MUST run <code>just fix</code> to attempt to automatically correct the code, then run <code>just build</code> again, and fix any remaining issues which could not be fixed automatically</li> <li>each vertical slice has a <code>REQUIREMENTS.md</code> file which can be referenced to understand the desired behavior</li> <li>each vertical slice has an <code>ARCHITECTURE.md</code> file which should be updated as part of the implementation of any change</li> </ul> <p>To be clear, the plan for any implementation MUST use the TDD approach, and the plan should roughly consist of the following steps (sometimes more, sometimes less, depending on the complexity of the feature):</p> <ol> <li>determine if there is a suitable existing vertical slice that the requirement fits into, and if not, then define a new vertical slice</li> <li>ensure that there is a <code>REQUIREMENTS.md</code> file for the target slice and that the file is updated to reflect the request from the user; if you determine that the document does not exist or is not up to date, stop processing and prompt the user to let you create or update this file before continuing</li> <li>if the feature is more complex, ensure that there is a detailed implementation plan for it in <code>.plans</code> and if not, prompt the user to let you create this plan before continuing</li> <li>define the API for the new requirement (e.g. a CliFx command, etc.); note that some requirements do not require new APIs to be added, just existing logic to be extended</li> <li>define a list of test cases for the new feature</li> <li>implement the test cases against new or existing APIs to cover all success and failure cases; in our case this usually means invoking the whole program with the correct command line arguments</li> <li>run the tests to assert that they are all failing (i.e. run <code>just test</code>)</li> <li>write the implementation to make the tests succeed; during this step you may extract code into the <code>SharedKernel</code> if necessary</li> <li>run the tests to assert that they are all succeeding</li> <li>refactor the code as necessary to improve its quality attributes like security, performance, reliability, maintainability, etc.</li> <li>format the code according to our guidelines (i.e. run <code>just format</code>)</li> <li>ensure that all tests are still successful (i.e. run <code>just test</code>); this is a MUST, it is not acceptable for any test to be failing, i.e. your work is not considered finished until all tests pass</li> <li>build the project in release mode to ensure that there are no issues that were only warnings during development (i.e. run <code>just build-release</code>)</li> <li>update (or create) the vertical slice's <code>ARCHITECTURE.md</code> to reflect the implementation</li> </ol>"},{"location":"ai/examples/agent-promt-template/#code-style","title":"Code Style","text":""},{"location":"ai/examples/agent-promt-template/#general","title":"General","text":"<ul> <li>we end each text file (e.g. <code>.cs</code>, <code>.md</code>, etc.) with a new line</li> </ul>"},{"location":"ai/examples/agent-promt-template/#csharp","title":"CSharp","text":"<ul> <li>we end the file with a blank line</li> <li>we use top-level namespaces everywhere</li> <li>we place <code>using</code> statements outside the namespace, and we omit the prefix <code>[MyProject].</code> from <code>using</code> statements when referencing other vertical slices<ul> <li>there is no need to add <code>using</code> statements for <code>Core</code> or <code>SharedKernel</code> since those are globally imported in <code>GlobalUsings.cs</code></li> </ul> </li> <li>we use the Allman braces style</li> <li>we remove any unused imports</li> <li>we always use braces around any <code>if</code>, <code>for</code>, <code>while</code>, etc. statements</li> <li>all classes are by default <code>internal</code> and <code>sealed</code> (except test fixtures)</li> <li>for classes, we prefer primary constructors wherever possible</li> <li>we always use <code>var</code> instead of the explicit type name when declaring variables</li> <li>we prefer <code>using var</code> and <code>await using var</code> over <code>using</code> blocks</li> <li>we usually do not log explicitly in message and signal handlers and instead we rely on the logging middlewares on the pipelines</li> <li>we use pattern matching for things like <code>null</code> checks or comparing a variable to enum values, etc.</li> <li>we do not introduce interfaces unnecessarily for implementation classes, since we test our program through invoking it like a user would use the app, and therefore don't need interfaces for mocking classes for testing</li> <li>naming style<ul> <li>class, record, and struct names: PascalCase</li> <li>interface names: IPascalCase</li> <li>fields: _camelCase</li> <li>properties: PascalCase</li> <li>method names: PascalCase</li> </ul> </li> </ul>"},{"location":"ai/examples/agent-promt-template/#markdown","title":"Markdown","text":"<ul> <li>markdown files should always have a blank line between any section header (i.e. lines starting with <code>#</code>) and the content</li> <li>markdown files should always have blank lines before and after any lists</li> <li>markdown files should always have a language tag for code blocks; if the block contains no code, just informational output, use <code>txt</code> as the tag</li> </ul>"},{"location":"ai/examples/agent-promt-template/#available-commands","title":"Available Commands","text":"<p>??</p>"},{"location":"ai/examples/agent-promt-template/#documentation-templates","title":"Documentation Templates","text":"<p>In the <code>.docs</code> directory you can find template files for the different kinds of documentations we create. Whenever you need to create or update a documentation file, you can check the template for reference. For example, when creating a <code>REQUIREMENTS.md</code> file for a vertical slice, the document should be roughly based on <code>.docs/REQUIREMENTS.template.md</code>. The same goes for <code>ARCHITECTURE.md</code> and <code>.docs/ARCHITECTURE.template.md</code>.</p> <p>When you are asked to develop an implementation plan, you can use <code>.docs/PLAN.template.md</code> as a template.</p>"},{"location":"ai/examples/code-guidelines/","title":"Code guidelines","text":"<p>Generally: - Be factual. - Avoid unnecessary jargon unless requested. - Keep non answer related content to a minimum.</p> <p>Use following instructions for all coding related question: - Focus on software engineering with C# unless requested otherwise. - Write clean, efficient, and idiomatic C# code. - Explain code snippets and concepts in simple terms. - Help debug and troubleshoot C# applications. - Suggest improvements and refactorings. - Provide guidance on using .NET libraries and tools. - Assist with unit testing, async programming, LINQ, and more. - Be clear, concise, and professional. - Do not speculate about future technologies unless explicitly asked. - Provide only solutions where you're confident, don't speculated, or guess. Tell me if you don't know the answer or don't have a good solution. Tag uncertain answers as such. - Don't blindly give me new solutions just because I question something. There are often tradeoffs and I want you to think about them before providing a new solution. Provide me alternative solutions if they make sense but also show me the tradeoffs. - Prefer simple, clean, maintainable solutions over clever or complex ones. - Readability and maintainability are primary concerns. - Use self-documenting names and code. - Use small functions. - Follow single responsibility principle in classes and functions.</p>"},{"location":"ai/examples/software-architect-prompt/","title":"Software architect prompt","text":"<p>YOU ARE A WORLD-RENOWNED SOFTWARE ARCHITECT AND TECHNICAL COACH, RECOGNIZED FOR DESIGNING SCALABLE, RESILIENT SYSTEMS USED BY MILLIONS. YOU HAVE COACHED OVER 10,000 DEVELOPERS GLOBALLY ON CLEAN ARCHITECTURE, SYSTEM DESIGN, AND ENGINEERING EXCELLENCE. YOU SPECIALIZE IN .NET, C#, CLOUD ARCHITECTURE, AND MODERN SOFTWARE PRACTICES. YOU ARE TASKED WITH ANALYZING CODEBASES, DESIGNING SYSTEMS, AND PROVIDING ELITE, ACTIONABLE COACHING.</p>"},{"location":"ai/examples/software-architect-prompt/#your-mission","title":"YOUR MISSION","text":"<ul> <li>DELIVER crystal-clear SOFTWARE ARCHITECTURE GUIDANCE for scalable, testable, maintainable systems</li> <li>REVIEW technical artifacts (code, design docs, tickets) and provide CONCISE FEEDBACK and REFACTORING PLANS</li> <li>COACH DEVELOPERS in principles like DDD, CLEAN ARCHITECTURE, SOLID, MICROSERVICES, CI/CD, and CLOUD-NATIVE DESIGN</li> <li>GENERATE PROFESSIONAL DIAGRAMS IN MERMAID SYNTAX to support technical discussions (sequence, flow, data, architecture)</li> <li>IDENTIFY DESIGN BOTTLENECKS and TECHNICAL DEBT, and PROPOSE PRAGMATIC, ELEGANT SOLUTIONS</li> <li>ADVISE on TECH STACK DECISIONS based on context, scalability, and tradeoffs</li> <li>SPEAK DIFFERENTLY TO DIFFERENT AUDIENCES: give STRATEGIC OPTIONS for architects, CONCRETE TASKS for developers, and RISK/IMPACT SUMMARIES for stakeholders</li> <li>ENSURE OUTPUTS ARE PRACTICAL, DIAGRAM-SUPPORTED, AND ACTIONABLE</li> </ul>"},{"location":"ai/examples/software-architect-prompt/#chain-of-thoughts","title":"CHAIN OF THOUGHTS","text":"<p>FOLLOW THIS REASONING PATH BEFORE RESPONDING TO ANY QUERY OR PROBLEM:</p> <ol> <li> <p>UNDERSTAND THE CONTEXT    1.1. IDENTIFY the business domain, core functionality, and primary constraints    1.2. CLARIFY the tech stack, team maturity, and current architecture style</p> </li> <li> <p>ISOLATE RELEVANT CONCEPTS    2.1. DETERMINE which principles apply (e.g., DDD, hexagonal, layered, microservices, etc.)    2.2. EXTRACT non-functional needs: scalability, fault tolerance, latency, modifiability, etc.</p> </li> <li> <p>BREAK DOWN THE PROBLEM    3.1. MAP system boundaries, use cases, and responsibilities    3.2. IDENTIFY hotspots, domain entanglements, and shared services</p> </li> <li> <p>ANALYZE STRATEGIC DESIGN    4.1. EVALUATE modularity, cohesion, and coupling across components    4.2. VERIFY use of patterns (CQRS, Event Sourcing, Pub/Sub, etc.) where applicable    4.3. RECOMMEND refactorings or transitions (e.g., from monolith to microservices) only when justifiable</p> </li> <li> <p>BUILD AN ACTIONABLE RESPONSE    5.1. LIST ACTION ITEMS, TRADEOFFS, and decision paths clearly    5.2. CREATE MERMAID DIAGRAMS where helpful (flow, sequence, architecture, data)    5.3. TAILOR OUTPUT to audience (devs, architects, execs)</p> </li> <li> <p>CONSIDER EDGE CASES    6.1. TEST design against failures, growth, and complexity    6.2. ADVISE on observability, recovery, and continuous delivery setup</p> </li> <li> <p>FINAL ANSWER    7.1. DELIVER a clear, structured answer with CONCRETE NEXT STEPS    7.2. ASK FOLLOW-UP QUESTIONS to refine the solution further    7.3. OFFER to reframe for stakeholder decks, tech specs, or backlog-ready tasks</p> </li> </ol>"},{"location":"ai/examples/software-architect-prompt/#key-diagram-types","title":"KEY DIAGRAM TYPES","text":"<p>USE MERMAID SYNTAX WHEN GENERATING DIAGRAMS</p> <ul> <li>DESIGN DOCUMENT: \"Create a design document for a .NET system detailing the services, modules, and data flow.\"</li> <li>FLOW DIAGRAM: \"Create a flow diagram for the user registration process with steps: A &gt; B &gt; C.\"</li> <li>SEQUENCE DIAGRAM: \"Generate a sequence diagram for API call from client to service to database.\"</li> <li>ARCHITECTURE DIAGRAM: \"Diagram the architecture showing front-end, API, services, and MSSQL database.\"</li> <li>DATA FLOW DIAGRAM: \"Show how user profile data moves from UI to backend to database and back.\"</li> </ul>"},{"location":"ai/examples/software-architect-prompt/#what-not-to-do","title":"WHAT NOT TO DO","text":"<ul> <li>NEVER OFFER GENERIC ADVICE WITHOUT SYSTEMIC ANALYSIS  </li> <li>DO NOT RECOMMEND TOOLS OR PATTERNS WITHOUT TRADEOFFS  </li> <li>NEVER IGNORE TEAM SKILLS, BUSINESS GOALS, OR DELIVERY CONSTRAINTS</li> <li>NEVER REPEAT USER INPUT OR RESTATE OBVIOUS FACTS  </li> <li>AVOID VAGUE SUGGESTIONS OR REDUNDANT PHRASES  </li> <li>DO NOT RESPOND TO NON-TECHNICAL OR NON-ARCHITECTURE QUESTIONS  </li> <li>NEVER GIVE BROAD ADVICE WITHOUT ACTIONABLE NEXT STEPS</li> <li>NEVER SKIP THE CHAIN OF THOUGHT OR STRUCTURED ANALYSIS PHASE</li> </ul>"},{"location":"ai/examples/software-architect-prompt/#few-shot-examples","title":"FEW-SHOT EXAMPLES","text":"<p>Example 1: Refactoring a Monolith</p> <p>Input: \"We\u2019re struggling with a monolithic C# backend and scaling issues.\"</p> <p>Response: 1. UNDERSTAND: Identify core business domains (e.g., Orders, Users, Billing). 2. ISOLATE: Check if DDD or modular monolith can apply first. 3. BREAK DOWN: Identify shared database usage and tightly coupled services. 4. ANALYZE: Recommend namespace segmentation + services by context. 5. BUILD: Propose modularization with internal APIs, then evaluate service extraction. 6. EDGE CASE: Plan for logging, testing, and CI/CD for gradual refactor. 7. FINAL: Show Mermaid diagram of proposed bounded contexts and steps to decouple them.</p> <p>Example 2: API Integration Decision</p> <p>Input: \"REST vs gRPC between internal services?\"</p> <p>Response: 1. UNDERSTAND: High-frequency internal comms with tight latency? 2. BASICS: REST = flexible/debuggable, gRPC = fast, strongly typed. 3. BREAK DOWN: Identify clients, interop needs, and internal SLAs. 4. ANALYZE: REST good for external, gRPC good for internal mesh. 5. BUILD: Suggest gRPC for internal core services, REST gateway for external APIs. 6. EDGE CASE: Recommend fallback strategy if ops not ready. 7. FINAL: Show architecture diagram with service split + protocol layers.</p>"},{"location":"architecture/architect/","title":"Software Architect","text":"<p>The role of software architects is to make high-level design choices and dictate technical standards. They needs to see the bigger picture. A software architect needs to connect people. They are the fast elevators in a building to connect the floors. Higher management, mid-levels and engineering are often disconnected and isolated. A software architect needs to bring those people (or there idea, understanding, inputs, ..) together.</p> <p>Architects are here to choose the best trade-off</p> <p>The life of a software architect is a long (and sometimes painful) succession of sub-optimal decisions made partly in the dark.</p> <p>Architects shouldn't aim to be the smartest in the room. Instead, they should aim to make everyone else a bit smarter.</p> <p>See: iSAQB - Rolle Architekt</p> <p>Everything\u00a0in software architecture has a trade-off. Thinking like an architect is analyzing these trade-offs, then asking \u201cwhich is more important?\"</p> <p>Programmers know the benefits of everything and the trade-offs of nothing.  Architects need to understand both.</p> <p>An architect should make other people smarter - not because they are dumb but because they work on different levels. We use metaphors, models, connect different peoples, ... to achieve this.</p>","tags":["Architect","Architecture"]},{"location":"architecture/architect/#daily-habits-for-an-architect","title":"\ud83d\udcc5 Daily Habits for an Architect","text":"Habit Why It Matters \ud83e\udde0 Make others smarter You multiply impact through empowered teams. \ud83d\udcde Communicate across layers Keep business aligned with tech decisions. \ud83e\uddf0 Stay close to implementation Prevent architecture from becoming irrelevant. \ud83c\udfa8 Use metaphors Bridge the gap between tech and business speak. \ud83e\ude9e Question ambiguity Don't let fluff drive strategy. Seek clarity. \u2696\ufe0f Weigh tradeoffs Architecting is about choosing fit-for-purpose over hype. \ud83d\udcda Harvest insights from real life Great metaphors live outside tech. Stay observant.","tags":["Architect","Architecture"]},{"location":"architecture/architectural-decision-records/","title":"Architectural Decision Records (ADR)","text":"<p>Entwurfsentscheidungen systematisch dokumentieren</p> <p>ADRs k\u00f6nnen auch im selben Repo zum Code eingecheckt werden. So k\u00f6nnen ADRs bei Diskussionen erstellte werden (z.B.: im Status Proposed) und bei der Implementierung im selben PR wie der Code updated werden. Dadurch werden sie auch gereviewed.</p> <p>Kontext</p> <ul> <li>Fragestellung - Warum und Wozu?</li> <li>Einfl\u00fcsse - Wer, Was, Wie beeinflusst die Entscheidung?<ul> <li>Stakeholder, Randbedingungen, Qualit\u00e4tsanforderungen</li> </ul> </li> <li>Kriterien - Bewertungsmassst\u00e4be<ul> <li>Pro, Cons ist oft nicht gut, weil sie schon oft biased sind</li> <li>Nach was will ich \u00fcberhaupt bewerten?<ul> <li>Danach schreibe ich nicht auf was pros/cons sind sondern welche Entscheidung erf\u00fcllt die Kriterien (am besten)</li> </ul> </li> <li>Beispiele:<ul> <li>Kosten</li> <li>Teamerfahrung</li> <li>Teamskalierbarkeit</li> <li>Softwareskalierbarkeit</li> <li>Komplexit\u00e4t</li> <li>Testbarkeit</li> </ul> </li> </ul> </li> </ul> <p>Alternativen - L\u00f6sungsm\u00f6glichkeiten Entscheidungen - Welche L\u00f6sung und warum!</p> <ul> <li>Sind immutable aber neue Entscheidungen k\u00f6nnen diese \"\u00fcberschreiben\". Die Dokumentation bleibt. (bzw. ADRs k\u00f6nnen auch ins Archiv verschoben oder als deprecated markiert werden). Ich m\u00f6chte gerne die aktuell g\u00fcltigen ADRs sehen/finden.</li> </ul> <p>Konsequenzen - Positive und negative Folgen</p> <ul> <li>Was erlaubt uns nun die Entscheidung? Was verhindert diese?</li> <li>Entscheidungen haben oftmals einen \"Haltbarkeitswert\" - Sie sollten nach einer gewissen Zeit wieder betrachtet werden.</li> </ul>","tags":["Architecture","Documentation"]},{"location":"architecture/architectural-decision-records/#template-example","title":"Template Example","text":"<p>See:  - adr-1-template - adr-2-template</p>","tags":["Architecture","Documentation"]},{"location":"architecture/architectural-decision-records/#adr-example","title":"ADR Example","text":"","tags":["Architecture","Documentation"]},{"location":"architecture/architectural-decision-records/#use-markdown-architectural-decision-records","title":"Use Markdown Architectural Decision Records","text":"","tags":["Architecture","Documentation"]},{"location":"architecture/architectural-decision-records/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>We want to record architectural decisions made in this project independent whether decisions concern the architecture (\"architectural decision record\"), the code, or other fields. Which format and structure should these records follow?</p>","tags":["Architecture","Documentation"]},{"location":"architecture/architectural-decision-records/#considered-options","title":"Considered Options","text":"<ul> <li>MADR 4.0.0 \u2013 The Markdown Architectural Decision Records</li> <li>Michael Nygard's template \u2013 The first incarnation of the term \"ADR\"</li> <li>Sustainable Architectural Decisions \u2013 The Y-Statements</li> <li>Other templates listed at https://github.com/joelparkerhenderson/architecture_decision_record</li> <li>Formless \u2013 No conventions for file format and structure</li> </ul>","tags":["Architecture","Documentation"]},{"location":"architecture/architectural-decision-records/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"MADR 4.0.0\", because</p> <ul> <li>Implicit assumptions should be made explicit.   Design documentation is important to enable people understanding the decisions later on.   See also \"A rational design process: How and why to fake it\".</li> <li>MADR allows for structured capturing of any decision.</li> <li>The MADR format is lean and fits our development style.</li> <li>The MADR structure is comprehensible and facilitates usage &amp; maintenance.</li> <li>The MADR project is vivid.</li> </ul>","tags":["Architecture","Documentation"]},{"location":"architecture/architectural-decision-records/#related","title":"Related","text":"<ul> <li>architecture-documentation</li> </ul>","tags":["Architecture","Documentation"]},{"location":"architecture/architecture-assessment/","title":"Architecture assessment","text":"","tags":["Architecture","Assessment","Architect","Documentation"]},{"location":"architecture/architecture-assessment/#analyze-by-risk","title":"Analyze by Risk","text":"<p>Risk Matrix:</p> Probability \\ Impact Very Low Low Medium High Very High Very High \ud83d\udfe1 \ud83d\udfe0 \ud83d\udfe0 \ud83d\udd34 \ud83d\udd34 High \ud83d\udfe2 \ud83d\udfe1 \ud83d\udfe0 \ud83d\udd34 \ud83d\udd34 Medium \ud83d\udfe2 \ud83d\udfe1 \ud83d\udfe1 \ud83d\udfe0 \ud83d\udd34 Low \ud83d\udfe2 \ud83d\udfe2 \ud83d\udfe1 \ud83d\udfe0 \ud83d\udd34 Very Low \ud83d\udfe2 \ud83d\udfe2 \ud83d\udfe2 \ud83d\udfe1 \ud83d\udfe0 <p>Legend: - \ud83d\udd34 - Critical - \ud83d\udfe0- Severe - \ud83d\udfe1- Moderate - \ud83d\udfe2- Sustainable</p> <p>Analyze different \"components\" (e.g. modules, architecture, code, DB) and rate risks based on probability and impact. Get a general \"result\".  Takle components based on there result (i.e. Critical (\ud83d\udd34) needs to be addressed where Sustainable (\ud83d\udfe2) might stay,)</p>","tags":["Architecture","Assessment","Architect","Documentation"]},{"location":"architecture/architecture-assessment/#possible-process-as-experienced-for-defining-software-maturity-level","title":"Possible Process (as experienced for defining software maturity level)","text":"<p>Talk with people!</p> <ul> <li>Figure out what exactly is needed and/or expected. </li> <li>Where are overlaps with others`?</li> <li>Usually others know the details better. Speak with the people involved (Architects, Devs, QA, RE, PM, PO, ...)</li> </ul> <ol> <li>Just start somewhere<ul> <li>Check any available assessment model: search for Software quality assessment model, Capability Maturity Model Integration (CMMI), ISO Standards or similar.</li> </ul> </li> <li>Good start is also to check defined (functional) requirements and quality attributes (non-functional requirements).<ul> <li>mark what is already there, where is improvement necessary, what is missing (e.g. color code green, orange, red). </li> </ul> </li> <li>Be concrete:<ul> <li>What is needed, what do we have. </li> <li>Compare with known quality standards and quality attributes. </li> <li>Categorize (Foundation &lt;-&gt; Enterprise, Must-Haves &lt;-&gt; Nice-to-Have, Necessary &lt;-&gt; Optional)</li> </ul> </li> <li>What to look for (Ask people about it &amp; check code, repo, pipelines)<ul> <li>Are standard components used? Is a standard architecture used?</li> <li>Architecture</li> <li>Type-safety?</li> <li>DB migration</li> <li>CI/CD (automation)</li> <li>Quality (lint, formatting, style guide, structure)</li> <li>Testing</li> <li>Dokumentation<ul> <li>ADR</li> <li>SAD</li> <li>User manual</li> </ul> </li> <li>Release-management</li> <li>Authorization / Authentication</li> <li>Logging, Monitoring, Observability</li> <li>PR handling</li> <li>More \"detailed\"/depth<ul> <li>Auditing</li> <li>i18n, a11y</li> <li>UX</li> <li>API versioning</li> <li>Licencing</li> <li>Dependency Management / security (see: Vulnerability monitoring)</li> </ul> </li> </ul> </li> <li>Report<ul> <li>Write everything down that was discussed, decided, identified, </li> </ul> </li> </ol>","tags":["Architecture","Assessment","Architect","Documentation"]},{"location":"architecture/architecture-assessment/#management-report","title":"Management Report","text":"","tags":["Architecture","Assessment","Architect","Documentation"]},{"location":"architecture/architecture-assessment/#sample-table-of-content","title":"Sample table of content","text":"<ol> <li>Management Summary</li> <li>\u00dcber diesen Report         1. Zielsetzung         2. Zielgruppe         3. Autoren         4. Vorgehen         5. Abgrenzung</li> <li>Allgemeiner Eindruck</li> <li>Grundlagen<ol> <li>Kein Handlungsbedarf</li> <li>Handlungsbedarf<ol> <li>Dokumentation</li> <li>Testf\u00e4lle</li> <li>Automatisiertes Testing</li> <li>Linting</li> <li>Security Findings</li> <li>Pipeline</li> </ol> </li> <li>Risiken<ol> <li>Python</li> </ol> </li> </ol> </li> <li>Enterprise Funktionalit\u00e4t<ol> <li>Kein Handlungsbedarf</li> <li>Handlungsbedarf aus RFI<ol> <li>Role Based Access Control</li> <li>i18n (FR 4.7)</li> <li>Personalisierbarkeit UI (FR 4.4)</li> <li>Speicherung Nutzungsdaten (NFR 3.5)</li> <li>Dashboard Systemverantwortliche / Statistik (FR 5.1)</li> <li>Feedback-Kanal zu UseCase (FR 5.4)</li> <li>DataPool Import</li> </ol> </li> <li>Handlungsbedarf aus Sicht Enterprise Readyness<ol> <li>Benutzerhandbuch</li> <li>Accessiblity</li> <li>User Experience</li> <li>White Labeling</li> <li>Dependency Management</li> <li>License Management</li> </ol> </li> </ol> </li> <li>Weitere Funktionalit\u00e4t<ol> <li>Handlungsbedarf Backend<ol> <li>MCP</li> </ol> </li> <li>Handlungsbedarf Frontend<ol> <li>Einheitlicher Ansatz im Styling</li> <li>Dependencies Update</li> <li>Backend Kommunikation</li> <li>Cleanup komplexer Codeteile</li> <li>Data Mode Router</li> </ol> </li> </ol> </li> <li>Aufwandsch\u00e4tzung<ol> <li>Storypunkte<ol> <li>Grundlagen</li> <li>Enterprise Funktionalit\u00e4t &gt; RFI</li> <li>Enterprise Funktionalit\u00e4t &gt; Enterprise Readyness</li> <li>Weitere Funktionalit\u00e4t</li> </ol> </li> <li>Umrechnungsfaktor</li> <li>Projekt und Betrieb</li> <li>Personentage</li> </ol> </li> </ol>","tags":["Architecture","Assessment","Architect","Documentation"]},{"location":"architecture/architecture-assessment/#beispiel-text-management-summary","title":"Beispiel Text - Management Summary","text":"<p>Der Report bewertet die softwaretechnische Qualit\u00e4t von[Project] und zeigt L\u00fccken im Vergleich zu den RFI-Anforderungen sowie Erwartungen an eine Enterprise-Applikation auf. Die Analyse basiert auf Gespr\u00e4chen und einer Quellcode-Sichtung des Frontends.</p> <p>Gesamteindruck: Das Projekt macht einen soliden Eindruck, ist gut strukturiert und setzt zentrale Software-Praktiken ein. Die Architektur folgt etablierten Standards.</p> <p>Verbesserungspotenzial: Es fehlt an vollst\u00e4ndiger Dokumentation, Testabdeckung und statischer Analyse (Linting, Security Findings). F\u00fcr die Enterprise-Readyness sind RBAC, i18n, White Labeling, eine Benutzerdokumentation sowie Massnahmen im Bereich Styling, Accessibility und UX notwendig.</p> <p>Aufwand: Der gesch\u00e4tzte Aufwand liegt bei 114 Personentagen.</p>","tags":["Architecture","Assessment","Architect","Documentation"]},{"location":"architecture/architecture-documentation/","title":"Documentation","text":"<p>Possible structure:</p> <ol> <li>Context</li> <li>Functional Overview</li> <li>Quality Attributes</li> <li>Constraints</li> <li>Principles</li> <li>Software Architecture<ol> <li>Containers</li> <li>Components</li> <li>Code</li> </ol> </li> <li>Data</li> <li>Infrastructure Architecture</li> <li>Deployment</li> <li>Development Environment</li> <li>Operation and Support</li> <li>Decision Log</li> </ol> <ol> <li>Context<ol> <li>What is this software project/product/system all about?</li> <li>What is it that is being built?</li> <li>How does it fit into the existing environment? (e.g. systems, business processes, etc)</li> <li>Who is using it? (users, roles, actors, personas, etc)</li> <li>Context Diagram should be included</li> <li>Technical and non-technical audience</li> </ol> </li> <li>Functional Overview<ol> <li>Highlight and summarize major functions of the software</li> <li>Is it clear what the system actually does?</li> <li>Is it clear which features, functions, use cases, user stories, etc are significant to the architecture and why?</li> <li>Is it clear who the important users are (roles, actors, personas, etc) and how the system caters for their needs?</li> <li>Is it clear that the above has been used to shape and define the architecture?</li> <li>Is it clear what the system does from a process perspective?</li> <li>What are the major processes and flows of information through the system?</li> <li>Feel free to reference existing documentation</li> <li>The goal is to provide and overview</li> <li>Sequence diagram when discussing automated business processes is useful</li> <li>Technical and non-technical people, both inside and outside the immediate development team</li> </ol> </li> <li>Quality Attributes<ol> <li>Summarize key quality attributes</li> <li>Performance (e.g. latency and throughput)</li> <li>Scalability (e.g. data and traffic volumes)</li> <li>Availability (e.g. uptime, downtime, scheduled maintenance, 24x7, 99.9%, etc)</li> <li>Security (e.g. authentication, authorization, data confidentiality, etc)</li> <li>Extensibility</li> <li>Auditing</li> <li>Monitoring and management</li> <li>Reliability</li> <li>Failover/disaster recovery targets (e.g. manual vs automatic, how long will it take?)</li> <li>Business continuity</li> <li>Interoperability</li> <li>Legal, compliance and regulatory requirements (e.g. data protection act)</li> <li>I18n and L10n</li> <li>Accessibility</li> <li>Usability</li> <li>Use SMART (specific, measurable, achievable, relevant and timely) attributes</li> <li>Technical people only</li> </ol> </li> <li>Constraints<ol> <li>Summarize the constraints your are working in and some of the decisions that have been made for you</li> <li>Time, budget and resources</li> <li>Approved technology lists and technology constraints</li> <li>Target deployment platform</li> <li>Existing systems and integration standards</li> <li>Local standards (e.g. development, coding, etc)</li> <li>Public standards (e.g. HTTP, SOAP, XML, XML Schema, WSDL, etc)</li> <li>Standard protocols</li> <li>Standard message formats</li> <li>Size of software development team</li> <li>Skill profile of the development team</li> <li>Nature of the software being build (et, tactical or strategic)</li> <li>Political constraints</li> <li>Use of internal intellectual property</li> <li>Technical and non-technical people</li> </ol> </li> <li>Principles<ol> <li>Make it explicit what principles are being followed</li> <li>Supply existing references, if they exist</li> <li>Architectural layering strategy</li> <li>No business logic in views</li> <li>No database access in views</li> <li>Use of interfaces</li> <li>Always use an ORM</li> <li>Dependency injection</li> <li>The Hollywood principle</li> <li>High cohesion, low coupling</li> <li>Follow SOLID</li> <li>DRY</li> <li>Ensure all components are stateless (e.g. to ease scaling)</li> <li>Prefer a rich domain model</li> <li>Prefer an anemic domain model</li> <li>Prefer stored procedures</li> <li>Avoid stored procedures</li> <li>Don't reinvent the wheel</li> <li>Approaches to error handling, logging, etc</li> <li>Buy rather than build</li> <li>Technical people only</li> </ol> </li> <li>Software Architecture (Containers, Components, Code)<ol> <li>Summarize the software architecture</li> <li>What does the \"big picture\" look like?</li> <li>Is there a clear structure?</li> <li>Is it clear how the system works from the \"30,000 foot view\"?</li> <li>Does it show major containers and technology choices?</li> <li>Does it show major components and their interactions?</li> <li>What are the key internal interfaces? (e.g. web service between web and business tiers)</li> <li>Technical people only</li> </ol> </li> <li>(External Interfaces)<ol> <li>What are the key external interfaces?<ol> <li>system-to-system</li> <li>publicly exposed APIs</li> <li>exported files</li> </ol> </li> <li>Has each interface been thought about from a technical perspective?<ol> <li>what is the technical definition of an interface?</li> <li>if messaging is being used, which queues and topics are components using to communicate?</li> <li>what format are the messages (e.g. plain text, Avro, JSON)?</li> <li>are they synchronous or asynchronous?</li> <li>are asynchronous messaging links guaranteed?</li> <li>are subscribers durable where necessary?</li> <li>can messages be received out of order and is this a problem?</li> <li>are interfaces idempotent?</li> <li>is the interface always available or do you need the cache data locally?</li> <li>how is performance/security/etc catered for?</li> </ol> </li> <li>Has each interface been thought about from a non-technical perspective?<ol> <li>who has ownership of the interface?</li> <li>how often does the interface change and how is versioning handled</li> <li>are there service-level agreements in place?</li> </ol> </li> <li>A paragraph on each interface covering this topics is sufficient</li> <li>Technical people only</li> </ol> </li> <li>(Code)<ol> <li>Describe implementation details for important/complex parts of the system</li> <li>homegrown frameworks</li> <li>WebMVC frameworks</li> <li>approach to security</li> <li>domain model</li> <li>component frameworks</li> <li>configuration mechanisms</li> <li>architectural layering</li> <li>exceptions and logging</li> <li>how patterns and principals are implemented</li> <li>short description of each element using diagrams as necessary</li> <li>Technical people only</li> </ol> </li> <li>Data<ol> <li>Record anything that is important from the data perspective</li> <li>What does the data model look like?</li> <li>Where is data stored?</li> <li>Who owns the data?</li> <li>How much storage space is needed for the data?</li> <li>Are there any requirements for long term archival?</li> <li>Are there any requirements for log files and audit trails?</li> <li>Are flat files being used for storage?</li> <li>short description of each element using diagrams as necessary</li> <li>Technical people only, including Operations</li> </ol> </li> <li>Infrastructure Architecture<ol> <li>Describe the physical/virtual hardware and networks the software will be deployed to.</li> <li>Is there a clear physical architecture?</li> <li>What hardware does this include across all tiers?</li> <li>Does it cater for redundancy, failover and disaster recovery if applicable?</li> <li>Is it clear how the chosen hardware components have been sized and selected?</li> <li>If multiple servers and sites are used, what are the network links between them?</li> <li>Who is responsible for support and maintenance of the infrastructure?</li> <li>Are there central teams to look after common infrastructure?</li> <li>Who owns the resources?</li> <li>Are there sufficient environments for development, testing, acceptance, pre-production, production?</li> <li>Provide an infrastructure/network diagram with a short narrative</li> <li>Technical people only, including Operations</li> </ol> </li> <li>Deployment<ol> <li>Describe the mapping between software (containers) and the infrastructure.</li> <li>How and where is the software installed and configured?</li> <li>Is it clear how the software will be deployed across the infrastructure elements described in the Infrastructure Architecture section?</li> <li>What are the options and have they been documented?</li> <li>Is it understood how memory and CPU will be partitioned between the processes running on a single piece of infrastructure?</li> <li>Are any containers/components running in an active-active, active-passive, hot-standby, cold-standby formation?</li> <li>Has the deployment and rollback strategy been defined?</li> <li>What happens in the event of a software or infrastructure failure?</li> <li>Is it clear how data is replicated across sites?</li> <li>Can use tables to show mapping between containers and infrastructure</li> <li>Can use UML deployment diagrams</li> <li>Can use color coding to designate runtime status (primary vs secondary, etc_</li> <li>Technical people only, including Operations</li> </ol> </li> <li>Operation and Support<ol> <li>Be explicit about to run, monitor and manage the software</li> <li>Is it clear how the software provides the ability for Operations to monitor and manage the system?</li> <li>Has is this achieved across all tiers of the architecture?</li> <li>How can Operations diagnose problems?</li> <li>Where are errors and information logged?</li> <li>Do configuration changes require a restart?</li> <li>Are there any manual housekeeping tasks that need to be performed on a regular basis?</li> <li>Does old data need to be periodically archived?</li> <li>A simple narrative should suffice here</li> <li>Technical people only, including Operations</li> </ol> </li> <li>Development Environment<ol> <li>Summarize how new team members set up a development environment</li> <li>Pre-requisite versions of software needed</li> <li>Links to software downloads</li> <li>Links to virtual machines</li> <li>Environment variables</li> <li>Host name entries</li> <li>IDE configuration</li> <li>Build and test instructions</li> <li>Database population scripts</li> <li>Username, passwords and certificates for connecting to services</li> <li>Links to build servers</li> <li>Technical people only, developers specifically</li> </ol> </li> <li>Decision Log<ol> <li>Capture major decisions that have been made</li> <li>Why did you choose technology/framework X over Y and Z?</li> <li>How did you make the selection? PoC? Product evaluation?</li> <li>Did corporate policy or architecture standards force you to select X?</li> <li>Why did you choose the selected architecture?  What other options did you consider?</li> <li>How do you know that the solution satisfies the major non-functional requirements?</li> <li>Short paragraph describing each decision. Include a date of the decision?</li> <li>Technical people only</li> </ol> </li> </ol>","tags":["Architecture","Documentation"]},{"location":"architecture/architecture-documentation/#markdown-example","title":"Markdown example","text":"<ul> <li>system-architecture-template</li> </ul>","tags":["Architecture","Documentation"]},{"location":"architecture/architecture-documentation/#related","title":"Related","text":"<ul> <li>architectural-decision-records</li> </ul>","tags":["Architecture","Documentation"]},{"location":"architecture/architecture/","title":"Architecture","text":"<p>Eine Architektur braucht eine Vision (und ist auf das Business fokussiert).</p> <p>Sie richtet sich an Werten (von Stakeholdern) aus. Steht zum Beispiel Time-to-market im Vordergrund, wird der Fokus auf eine gute Entwicklungsproduktivit\u00e4t gelegt.</p> <p>Know whether to use a tool or technology (and only partially how)</p> <p>Architecture is the art of choosing the right trade-offs</p> <p>Tip</p> <p>Don\u2019t try to find the\u00a0best\u00a0design in software architecture; instead, strive for the\u00a0least worst\u00a0combination of trade-offs.</p> <p>What is architecture</p> <ul> <li>Structure</li> <li>Split into components</li> <li>Interfaces</li> <li>Dependencies</li> <li>\"The parts which are hard to change later\"</li> </ul>","tags":["Architecture","#Basics","Decisions","Documentation"]},{"location":"architecture/architecture/#goal","title":"Goal","text":"<ul> <li>Technical decisions to deliver features efficient and effective - and close the feedback loop fast</li> <li>Most simple (and not most flexible) solution for the problem to solve</li> <li>Keep the cost of change low</li> </ul> <p>We have a good architecture if the system is easy to change</p> <p>See: Architekturziele</p>","tags":["Architecture","#Basics","Decisions","Documentation"]},{"location":"architecture/architecture/#design","title":"Design","text":"<p>Architectures are defined by a set of critical decisions about how the system will meet its\u00a0quality attribute requirements\u00a0and the trade-offs a team must make if they cannot fully satisfy the quality goals.</p>","tags":["Architecture","#Basics","Decisions","Documentation"]},{"location":"architecture/architecture/#architectural-drivers","title":"Architectural Drivers","text":"<p>Architectural Drivers are usually connected with each other and have trade-offs.</p> <ul> <li>Functional Requirements - what and how problems does the system solve</li> <li>Quality Attributes - a set of attributes that determine the quality of architecture like maintainability or scalability.</li> <li>Technical Constraints - technology standards, tools limitations, team experience</li> <li>Business Constraints - budget, hard deadline</li> </ul> <p>You have some service that calculates some important thing (Functional Requirement) in 3 seconds (Quality Attribute - performance). A new requirement appears, calculation is more complex and takes now 5 seconds (Performance decreased). To go back to 3 seconds another technology could be used, but there is no time for it (Business Constraint - hard deadline) and nobody has used it in the company yet (Technical Constraint - team experience). The only option to increase performance is to move the calculation to the stored procedure, which decreases maintainability and readability (Quality Attributes).</p>","tags":["Architecture","#Basics","Decisions","Documentation"]},{"location":"architecture/architecture/#grundsatze-prinzipien","title":"Grunds\u00e4tze, Prinzipien","text":"<p>The Only Constant in Life Is Change.</p>","tags":["Architecture","#Basics","Decisions","Documentation"]},{"location":"architecture/architecture/#grundsatze-always-true","title":"Grunds\u00e4tze (always true)","text":"<ul> <li>Success of the architecture is meassurd by the stakeholders (not by the architect)</li> <li>KISS</li> <li>\"There is no silver bullet\". Always decide specifically</li> <li>Make everything explizit (requirements, assumptions, non-functional requirements)</li> <li>Expect changes. \"Change is gooood\"</li> <li>Expect errors</li> <li>Keep non-functional requirements (quality attributes) in the mind all the time</li> </ul>","tags":["Architecture","#Basics","Decisions","Documentation"]},{"location":"architecture/architecture/#prinzipien-etablierte-regeln","title":"Prinzipien (etablierte Regeln)","text":"<ul> <li>loose coupling<ul> <li>Reduce dependencies (everywhere not just code)</li> </ul> </li> <li>high cohesion</li> </ul>","tags":["Architecture","#Basics","Decisions","Documentation"]},{"location":"architecture/architecture/#architecture-decision","title":"Architecture Decision","text":"<p>Faktoren f\u00fcr die Frage wann Architekturentscheide gemacht werden sollen.</p> <ul> <li>was kostet eine versp\u00e4tete Entscheidung?</li> <li>was kostet es zum R\u00fcckg\u00e4ngig machen der Entscheidung?</li> <li>werden zuk\u00fcnftige Perspektiven verhindert?</li> <li>Ist schnelles Feedback verf\u00fcgbar?</li> </ul> <p>The decisions are continually reevaluated by the team as their understanding of the goals of the system and its quality attribute requirements increases, based on the experience they gain through experimentation.</p> <p>See also: ADR</p>","tags":["Architecture","#Basics","Decisions","Documentation"]},{"location":"architecture/architecture/#anti-pattern","title":"Anti-Pattern","text":"<p>Covering Your Assets  anti-pattern occurs when an architect avoids or defers making an architecture decision out of fear of making the wrong choice. It's ok to postpone it as long as possible but not longer.</p> <p>The Groundhog Day anti-pattern occurs when people don\u2019t know why a decision was made, so it keeps getting discussed over and over and over.  It is important to provide a technical and a business justification otherwise the respective group will question it again and again.</p> <p>The Email-Driven Architecture anti-pattern is where people lose, forget, or don\u2019t even know an architecture decision has been made and therefore cannot possibly implement that architecture decision. Email is a great tool for communication, but it makes a poor document repository system.</p>","tags":["Architecture","#Basics","Decisions","Documentation"]},{"location":"architecture/architecture/#architecture-smoketest-based-on-documentation","title":"Architecture Smoketest (based on documentation)","text":"<ul> <li>What are the principles or decisions of the solution? Why?</li> <li>What are the responsibilities of each box and line in a diagram?</li> <li>How does the Architecture fulfill the systems quality requirements?</li> </ul> <p>The only way to evaluate an architecture is to build and test it. Delaying this to perfect the design is a sure path to failure.</p>","tags":["Architecture","#Basics","Decisions","Documentation"]},{"location":"architecture/architecture/#fitness-tests","title":"Fitness tests","text":"<p>Fitness functions validate architecture characteristics, not domain criteria; unit tests are the opposite. Thus, an architect can decide whether a fitness function or unit test is needed by asking the question: \u201cIs any domain knowledge required to execute this test?\u201d If the answer is \u201cyes,\u201d then a unit/function/user acceptance test is appropriate; if \u201cno,\u201d then a fitness function is needed.</p> <p>Example:  A tests which makes sure that certain module dependencies are enforced (Module X does not reference Module Y). </p>","tags":["Architecture","#Basics","Decisions","Documentation"]},{"location":"architecture/architecture/#emergent-architecture","title":"Emergent Architecture","text":"<p>Emergent Architecture basiert auf einem stabilen Kern</p> <p>Viele Architekturentscheide k\u00f6nnen aufgeschoben, und lokal anstatt zentral get\u00e4tigt werden.</p> <p>Gewisse Entscheide m\u00fcssen fr\u00fch getroffen werden:</p> <ul> <li>Wie soll das System aussehen (\u00dcbersicht, Vision)</li> <li>Wo sind die Hauptabstraktionen</li> <li>Wie soll das Projektteam/System strukturiert sein (Conway\u2019s Law)</li> </ul> <p>Der Kern der Emergenten Architektur soll so stabil wie m\u00f6glich sein. Er wird abgeleitet aus der Art des Gesch\u00e4fts.</p> <p>Der Kern hat meist hohe Kosten f\u00fcr \u00c4nderung oder ihn r\u00fcckg\u00e4ngig zu machen.</p>","tags":["Architecture","#Basics","Decisions","Documentation"]},{"location":"architecture/architecture/#finding-an-architecture","title":"Finding an architecture","text":"<p>What problem are we trying to solve?</p> <p>Explore the problem space as rapidly and cheap as possible</p> <ul> <li>there are no stupid ideas,</li> <li>we don\u2019t criticize; we focus on our ideas, not other people\u2019s,</li> <li>we generate as many ideas as possible,</li> <li>when we run out of ideas, we should still try to grind a bit longer and tell ourselves to generate 2-3 more. It\u2019s like running; often, the best results occur when we pass the first fatigue threshold,</li> <li>however, it is important to set a maximum duration for brainstorming. It should be an intensive and productive meeting. There\u2019s no point in making it an endless one. You can always organize several sessions.</li> </ul> <p>Rapid iterations</p> <ul> <li>What we build is a prototype</li> <li>We will throw it away</li> </ul>","tags":["Architecture","#Basics","Decisions","Documentation"]},{"location":"architecture/architecture/#best-practices","title":"Best Practices","text":"<ul> <li>Modularity<ul> <li>or Boundaries. We need to encapsulate part of the application so that if we change something within a boundary we don't have the risk to break something outside of the boundary.</li> </ul> </li> <li>KISS</li> <li>Separation of Concerns</li> <li>Release fast, release often <ul> <li>\"If you do a big bang rewrite, the only thing you're certain of is  a big bang \ud83d\udca5\" </li> <li>\"You cannot become a Kung-Fu master by reading about Kung-Fu. You have to practice it\"</li> </ul> </li> <li>Don\u2019t compromise quality to deliver faster.</li> <li>Quality attribute requirements (QARs) always drive architectural designs.</li> </ul>","tags":["Architecture","#Basics","Decisions","Documentation"]},{"location":"architecture/architecture/#quotes","title":"Quotes","text":"<p>Story of the Tortoise and the Hare</p> <p>Slow and steady wins the race. The race is not to the swift, nor the battle to the strong. The more haste, the less speed.</p> <p>Regarding \"Cleaning up later\"</p> <p>Making messes is always slower than staying clean The only way to go fast, is to go well.</p> <p>Building the wrong thing is the biggest waste in software development</p> <p>Big design up front is dumb. Doing no design up front is even dumber.</p>","tags":["Architecture","#Basics","Decisions","Documentation"]},{"location":"architecture/azure/","title":"Azure","text":"<pre><code>graph TB\n    subgraph subscription\n        rg1[resource group 1]\n        rg2[resource group 2]\n        rg3[resource group 3]\n    end\n</code></pre>","tags":["WIP","Azure"]},{"location":"architecture/azure/#subscription","title":"Subscription","text":"<p>A subscription can have multiple resource groups </p>","tags":["WIP","Azure"]},{"location":"architecture/azure/#resource-group","title":"Resource Group","text":"<p>Contain things that share a common lifecycle. They are created together, they run together, they get provisioned together. We can apply policies, RBAC, budget on resource group level - App - Workload  - VM - Storage account - DB - ...</p> <p>Resource group cannot contain another resource group (no nesting)</p>","tags":["WIP","Azure"]},{"location":"architecture/c4/","title":"C4","text":"<p>There are four types of C4 models, each one for a different audience and containing a different level of detail. These are the context, container, components, and code diagrams that make up your C4 model. The order doesn't matter.  Usually level 1 &amp; 2 makes a lot of sense, level 3 only in some situations and level 4 is hardly ever used.</p> <p></p>","tags":["Documentation","Architecture","Model"]},{"location":"architecture/c4/#1-system-context","title":"1. (System) Context","text":"<p>Context diagrams are the most general description of what your system does, who will use it, and what other systems it will interact with. A context diagram will help you describe the scope of your project and help you pinpoint who the user is and what problem you\u2019re going to solve.</p>","tags":["Documentation","Architecture","Model"]},{"location":"architecture/c4/#2-containers","title":"2. Containers","text":"<p>The container diagram takes the first step into describing the software system and shows the APIs, applications, databases, and microservices that the system will use. Each of these applications or services is represented with a container and the interactions between them are shown at a high level.</p>","tags":["Documentation","Architecture","Model"]},{"location":"architecture/c4/#3-components","title":"3. Components","text":"<p>The component diagram details groups of code within a single container. These components represent abstractions of your codebase.</p>","tags":["Documentation","Architecture","Model"]},{"location":"architecture/c4/#4-code-eg-classes","title":"4. Code (e.g. Classes)","text":"<p>The last level requires lots of detail to show how the code of a single component is actually implemented. To do this, you would want to make a UML class diagram or entity relationship diagram that describes the component.</p>","tags":["Documentation","Architecture","Model"]},{"location":"architecture/c4/#diagrams","title":"Diagrams","text":"<p>See: Notation</p> <p>A box needs a meaningful title and type and a short description, summary or bullet point list. Lines go only in one direction showing the most important dependencies or data flow. Make explicit annotations about the purpose. Have a key/legend to explain shapes, line styles, colors, borders, acronyms, etc.</p>","tags":["Documentation","Architecture","Model"]},{"location":"architecture/c4/#examples","title":"Examples","text":"<pre><code>@startuml C4_Elements\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n\nPerson(personAlias, \"Label\", \"Optional Description\")\nContainer(containerAlias, \"Label\", \"Technology\", \"Optional Description\")\nSystem(systemAlias, \"Label\", \"Optional Description\")\n\nRel(personAlias, containerAlias, \"Label\", \"Optional Technology\")\n@enduml\n</code></pre> <pre><code>@startuml Basic Sample\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n\nPerson(admin, \"Administrator\")\nSystem_Boundary(c1, \"Sample System\") {\n    Container(web_app, \"Web Application\", \"C#, ASP.NET Core 2.1 MVC\", \"Allows users to compare multiple Twitter timelines\")\n}\nSystem(twitter, \"Twitter\")\n\nRel(admin, web_app, \"Uses\", \"HTTPS\")\nRel(web_app, twitter, \"Gets tweets from\", \"HTTPS\")\n@enduml\n</code></pre> <pre><code>@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n\n!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons\n!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5\n!include DEVICONS/angular.puml\n!include DEVICONS/java.puml\n!include DEVICONS/msql_server.puml\n!include FONTAWESOME/users.puml\n\nLAYOUT_WITH_LEGEND()\n\nPerson(user, \"Customer\", \"People that need products\", $sprite=\"users\")\nContainer(spa, \"SPA\", \"angular\", \"The main interface that the customer interacts with\", $sprite=\"angular\")\nContainer(api, \"API\", \"java\", \"Handles all business logic\", $sprite=\"java\")\nContainerDb(db, \"Database\", \"Microsoft SQL\", \"Holds product, order and invoice information\", $sprite=\"msql_server\")\n\nRel(user, spa, \"Uses\", \"https\")\nRel(spa, api, \"Uses\", \"https\")\nRel_R(api, db, \"Reads/Writes\")\n@enduml\n</code></pre> <pre><code>@startuml\ntitle Coding Contest Platform - Containers\n\ntop to bottom direction\n\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4.puml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n\n\nPerson_Ext(ContestParticipant, \"Contest Participant\", \"\", $tags=\"Person+Element\")\nPerson(Administrator, \"Administrator\", \"\", $tags=\"Person+Element\")\n\nSystem_Boundary(\"CodingContestPlatform_boundary\", \"Coding Contest Platform\") {\n  Container(CodingContestPlatform.Registration, \"Registration\", \"maintains all users and contests, provides SSO\", $tags=\"spring+Container+Element\")[[https://register.codingcontest.org/]]\n  Container(CodingContestPlatform.CatCoder, \"CatCoder\", \"provides the possibility to solve coding challenges\", $tags=\"spring+Container+Element\")[[https://catcoder.codingcontest.org/]]\n}\n\nRel_D(Administrator, CodingContestPlatform.Registration, \"creates public contests\", $tags=\"Relationship\")\nRel_D(Administrator, CodingContestPlatform.CatCoder, \"maintains coding games\", $tags=\"Relationship\")\nRel_D(CodingContestPlatform.Registration, CodingContestPlatform.CatCoder, \"fetches contests\", \"REST\", $tags=\"Relationship\")\nRel_D(ContestParticipant, CodingContestPlatform.Registration, \"performs login\", $tags=\"Relationship\")\nRel_D(ContestParticipant, CodingContestPlatform.CatCoder, \"solves coding challenges\", $tags=\"Relationship\")\n\nSHOW_LEGEND()\n@enduml\n</code></pre>","tags":["Documentation","Architecture","Model"]},{"location":"architecture/c4/#related","title":"Related","text":"<ul> <li>models</li> </ul>","tags":["Documentation","Architecture","Model"]},{"location":"architecture/caching/","title":"Caching","text":"<p>Different kind of caching exists:</p> <ul> <li>in-memory caching</li> <li>distributed caching</li> <li>content caching</li> <li>database caching </li> </ul>","tags":["Optimization","Strategy","Pattern"]},{"location":"architecture/caching/#distributed-caching","title":"Distributed caching","text":"<p>A distributed cache is a cache shared by multiple app servers, typically maintained as an external service to the app servers that access it.</p> <p>How can I make sure that the external service is (accessed) fast?</p> <p>When cached data is distributed, the data:</p> <ul> <li>Is coherent (consistent) across requests to multiple servers.</li> <li>Survives server restarts and app deployments.</li> <li>Doesn't use local memory.</li> </ul> <p>.NET Core provides these implementations:</p> <ul> <li>Distributed Redis cache</li> <li>Distributed Memory Cache</li> <li>Distributed SQL Server cache</li> <li>Distributed NCache cache</li> </ul> <p>Redis is an open source in-memory data store. in-memory --&gt; fast can be persisted as well</p> <p>The in-memory distributed cache isn't actually a distibuted cache but might be useful if only a single server is used. It allows to easily implement a true distributed cache later.</p> <p>SQL Server cache allows complex queries since it is a relational DB.</p> <p>Redis is generally recommended as a distributed cache solution</p> <p>.NET 9 will introduce a new cache called HybridCache. This should replace in memory and distributed caches. It provides one interface to support both in memory and distributed caches. It is in memory by default, allows stampede protection and can be extended to be distributed by adding (i.e.registering) a distributed cache like Redis.</p>","tags":["Optimization","Strategy","Pattern"]},{"location":"architecture/components/","title":"Components","text":"<p>Components are leaf node namespaces or directories.</p> <p> 1. The files within BloodStats belong to the component BloodStats. 2. BodyStats.razor is an orphaned class (belonging to no component). This should be change be either moving all files in the namespace BodyStats or by moving BodyStats.razor into a components (e.g. Shared, Layout, ...)</p> <p>Make sure source code files reside only in leaf node namespaces or directories so that source code can always be identified within a specific component.</p>"},{"location":"architecture/database/","title":"Datenarchitektur","text":"<p>Folgende Punkte sind entscheidende Themen bzw. Fragen zur Datenarchitektur:</p> <ul> <li>SQL oder NoSQL?</li> <li>Datenzugriff (API, ORM)</li> <li>Authentisierung und Autorisierung des Datenbankzugriffs (simpel oder komplex)</li> <li>Datenbank-Updates (transitions- oder zustandsbasiert und Wahl des Werkzeugs)</li> <li>Datenbanktests und Testdaten (Anonymisierung)</li> <li>Datenmigration und -abgleich (Big Bang oder Koexistenz)</li> <li>Datenexport f\u00fcr Datahub</li> <li>Cross-Boundary Data Access Pattern (Web Gateway, Data Aggregator, Service-to-Service, Materialized View)</li> <li>Event Driven Architecture (Event Sourcing, CQRS, Event Notification, Event-Carried State Transfer)</li> <li>Datenschutz, Kryptographie und Compliance (GDPR)</li> <li>Data Dictionary: Auswahl des Werkzeugs (Microsoft Azure Data Catalog?)</li> <li>\u00c4nderungsverfolgung (Audit Trail, temporale Datenbank, Document-Versioning-Pattern)</li> <li>Verf\u00fcgbarkeit</li> <li>Master Data Management</li> <li>Datenqualit\u00e4t</li> <li>Datenbank-Backup und -Retention</li> <li>Datenredundanz (Datenreplikation, Materialized Views)</li> <li>Bulk Data Exchange</li> <li>Datenkonsistenz (verteilte Transaktionen, SAGA)</li> </ul>","tags":["Database"]},{"location":"architecture/database/#optimization","title":"Optimization","text":"<ul> <li>Using AND queries can use indexes where OR queries cannot. Therefore we can optimize queries like that (only do it if there is actually a performance issue)</li> </ul> <pre><code>// this is performanter\nvar\u00a0persons\u00a0=\u00a0await\u00a0_context.Person\n.Where(p\u00a0=&gt;\u00a0p.Function == Function.Important\u00a0&amp;&amp;\u00a0p.Status\u00a0==\u00a0Status.Active)\n.Union(_context.Person.Where(p =&gt;\u00a0p.IsInternalUser\u00a0&amp;&amp; p.Status\u00a0==\u00a0Status.Active))\n.ToListAsync();\n\n// instead of\nvar\u00a0persons\u00a0=\u00a0await\u00a0_context.Person\n.Where(p\u00a0=&gt;\u00a0p.Status\u00a0==\u00a0Status.Active &amp;&amp; (p.Function == Function.Important || p.IsInternalUser))\n.ToListAsync();\n</code></pre>","tags":["Database"]},{"location":"architecture/database/#concurrency","title":"Concurrency","text":"<p>Optimistic Concurrency is more suitable when conflicts are less likely, while Pessimistic Concurrency is used when conflicts are anticipated</p> <p>Optimistic Concurrency =&gt; use RowVersion column in DB and property in model Pessimistic Concurrency =&gt; use Transactions</p>","tags":["Database"]},{"location":"architecture/database/#testing","title":"Testing","text":"<ul> <li>EfCore.SchemaCompare (https://github.com/JonPSmith/EfCore.SchemaCompare) allows easy schema comparison against the C# models (entities). <pre><code>[Test]\npublic void DatabaseDeployed_SchemaCompared_TableAndPropertyAndNullabilityMatchesEntityAndColumn()\n{\n    var comparer = new CompareEfSql();\n    comparer.CompareEfWithDb(_context);\n\n    var logs = comparer.Logs;\n    var tableMismatches = logs.Single().SubLogs.Where(l =&gt; l.State == CompareState.NotInDatabase &amp;&amp; l.Type == CompareType.Entity).ToList();\n    var propertyMismatches = logs.Single().SubLogs.SelectMany(l =&gt; l.SubLogs).Where(l =&gt; l.State == CompareState.NotInDatabase &amp;&amp; l.Type == CompareType.Property).ToList();\n    var nullabilityErrors = logs.Single().SubLogs.SelectMany(l =&gt; l.SubLogs).Where(l =&gt; l.State == CompareState.Different &amp;&amp; l.Type == CompareType.Property &amp;&amp; l.Attribute == CompareAttributes.Nullability).ToList();\n\n    tableMismatches.ShouldBeEmpty();\n    propertyMismatches.ShouldBeEmpty();\n    nullabilityErrors.ShouldBeEmpty();\n}\n</code></pre></li> <li>We can also compare the tables against our Entities <pre><code>    [Test]\npublic async Task DatabaseDeployed_SchemaCompared_EntityMatchesTable()\n{\n    var tables = await _sysContext.Tables.Include(t =&gt; t.Columns).AsNoTracking().ToListAsync();\n    var entities = Assembly.GetAssembly(typeof(MyEntity))!.GetTypes().Where(t =&gt; t.IsClass &amp;&amp; t.GetInterfaces().Contains(typeof(IBaseEntity)));\n    foreach (var table in tables)\n    {\n        var entity = entities.SingleOrDefault(e =&gt; e.GetCustomAttributes&lt;TableAttribute&gt;().Any() &amp;&amp; e.GetCustomAttribute&lt;TableAttribute&gt;()!.Name == table.Name);\n        if (entity != null)\n        {\n            foreach (var column in table.Columns)\n            {\n                entity.GetProperties().Any(p =&gt; p.Name == column.Name).ShouldBeTrue($\"Column {column.Table.Name}.{column.Name} is missing in entity {entity.Name}.\");\n            }\n        }\n    }\n}\n</code></pre></li> </ul>","tags":["Database"]},{"location":"architecture/ddd/","title":"Domain Driven Design","text":"<p>A strategy aimed at improving the quality of software by aligning it more closely with the business needs it serves.</p> <p>-&gt; Bringing Devs and Domain Experts (Business People) closer together </p>","tags":["ddd","Architecture","EventStorming"]},{"location":"architecture/ddd/#strategic-design","title":"Strategic Design","text":"<p>Higher Level Is about the Problem Space</p> <ol> <li>Value:<ul> <li>What is the value of our solution</li> </ul> </li> <li>Knowledge Discovery<ul> <li>Who are our Domain Experts</li> <li>Event Storming<ul> <li>Put events on a board (i.e. stick nodes)<ul> <li>e.g. Create Cart, Add to Cart, Remove Product, ...</li> </ul> </li> </ul> </li> </ul> </li> <li>Communication<ul> <li>Improve Communication with Ubiquitous Language<ul> <li>Business and Devs use the same words for the same thing</li> </ul> </li> </ul> </li> <li>Domain Analysis<ul> <li>Cluster events from the Event Storming to form subdomains<ul> <li>Core Subdomains<ul> <li>(most of the) Business Value</li> </ul> </li> <li>Supporting Subdomains</li> <li>Generic Subdomains<ul> <li>Can also be outsource or be handled with 3rd party software</li> </ul> </li> </ul> </li> </ul> </li> </ol>","tags":["ddd","Architecture","EventStorming"]},{"location":"architecture/ddd/#event-storming","title":"Event Storming","text":"<ol> <li>Devs, Business experts, PO, ... put Post-Its on a board</li> <li>Find  Events and put it on the board<ul> <li>Cart Created</li> <li>Product Added</li> </ul> </li> <li>Find Actor and Commands for Events (one Command can lead to multiple Events)<ul> <li>Customer -&gt; Select First Product -&gt; Cart Created</li> <li>Customer -&gt; Adds Product -&gt; Product Added</li> </ul> </li> <li>Policies find  rules or constraints  for the Events<ul> <li>Customer -&gt; Select First Product -&gt; Check Brand Minimum Rules -&gt; Cart Created</li> <li>Customer -&gt; Adds Product -&gt; Check Brand Minimum Rules -&gt; Product Added</li> </ul> </li> <li>Find Hotspots (something that is vulnerable and can go wrong) and map to Policies<ul> <li>Customer -&gt; Select First Product -&gt; Check Brand Minimum Rules [External API Failure] -&gt; Cart Created</li> <li>Customer -&gt; Adds Product -&gt; Check Brand Minimum Rules [External API Failure] -&gt; Product Added</li> </ul> </li> <li>Put everything in a sequence (might also go in parallel)<ol> <li>Customer -&gt; Select First Product -&gt; Check Brand Minimum Rules [External API Failure] -&gt; Cart Created</li> <li>Customer -&gt; Adds Product -&gt; Check Brand Minimum Rules [External API Failure] -&gt; Product Added</li> </ol> </li> <li>Come up with an aggregate<ul> <li>Cart (Aggregate)<ul> <li>Might contain Entities such as Cart and Product</li> </ul> </li> </ul> </li> <li>...</li> </ol>","tags":["ddd","Architecture","EventStorming"]},{"location":"architecture/ddd/#tactical-design","title":"Tactical Design","text":"<p>Lower level (closer to code) Is about the Solution Space</p> <ul> <li>Bounded Context</li> <li>Entity<ul> <li>Has an Id</li> <li>Mutable</li> <li>May span over multiple Bounded Contexts</li> </ul> </li> <li>Value Objects<ul> <li>No Id (its defined by its value)</li> <li>Immutable</li> <li>Basic building blocks of Entities</li> </ul> </li> <li>Aggregates<ul> <li>Cluster Entities</li> <li>One root Entity</li> <li>(usually) bound to a transaction scope</li> </ul> </li> <li>Domain Events<ul> <li>Facilitate asynx messaging between Bounded Contexts</li> </ul> </li> <li>Domain &amp; Application Services<ul> <li>No state</li> <li>Application wide services (e.g. Auth)</li> <li>Domain services (e.g. Create Account)</li> </ul> </li> </ul>","tags":["ddd","Architecture","EventStorming"]},{"location":"architecture/domain-centric-architecture/","title":"Domain Centric Architectures","text":"<p>Examples are Onion,  Hexagonal and Clean architecture.</p> <p>Domain-centric (or domain-driven) architectures place the business domain - its concepts, rules, and language - at the core of the software design. Rather than starting from technical layers (UI, database, etc.), development revolves around domain models that capture the essential business logic.</p> <p>Key Ideas:</p> <ul> <li>Domain as the Core: The domain model is the \"source of truth\"\u201d and all other layers (UI, persistence, infrastructure) serve it.</li> <li>Ubiquitous Language: Developers and domain experts share a consistent vocabulary embedded in the model itself.</li> <li>Bounded Contexts: Complex domains are divided into smaller, coherent areas, each with its own model and rules.  </li> <li>Layered Design: Often follows a structure like Domain \u2192 Application \u2192 Infrastructure \u2192 Interface or similar.</li> <li>Strategic Integration: Context maps define how different bounded contexts interact - through APIs, events, or shared kernels.</li> </ul>","tags":["Architecture"]},{"location":"architecture/hexagonal-architecture/","title":"Hexagonal","text":"<p>aka: Ports and Adapters</p> <p></p> <p></p>","tags":["Architecture"]},{"location":"architecture/hexagonal-architecture/#related","title":"Related","text":"<p>domain-centric-architecture onion</p>","tags":["Architecture"]},{"location":"architecture/isaqb/","title":"iSAQB","text":"","tags":["Architecture","Architect"]},{"location":"architecture/isaqb/#architekturziele","title":"Architekturziele","text":"<p>Architekturziele =&gt; Langfristige ziele</p> <p>Projektziele =&gt; kurzfristige Ziele</p> <p>Als Architekt muss ich versuchen eine m\u00f6glichst grosse Schnittmenge zwischen Architekturzielen und Projektzielen zu erreichen.</p> <p>Ziele explizit machen und festhalten (dokumentieren)</p> <p>\u274c Architektur per Zufall ist keine Architektur</p>","tags":["Architecture","Architect"]},{"location":"architecture/isaqb/#rolle-architekt","title":"Rolle: Architekt","text":"<ul> <li>Ausserhalb vom Team (Elfenbein) -&gt; aka. AaaS (Architect as as Service)<ul> <li>usually bad because there is no feedback loop</li> </ul> </li> <li>Das ganze Team</li> <li>Gewisse Personen im Team \u00fcbernehmen gewiss Architektur Aufgaben</li> <li>Verteilte Architektur. Architekten sind im Team</li> </ul>","tags":["Architecture","Architect"]},{"location":"architecture/isaqb/#bausteine","title":"Bausteine","text":"<p>* Kapseln Verhalten \u00a0* definieren Schnittstellen \u00a0* wiederverwendbar \u00a0* austauschbar</p>","tags":["Architecture","Architect"]},{"location":"architecture/isaqb/#qualitats-anforderungen","title":"(Qualit\u00e4ts-) Anforderungen","text":"<ul> <li>Funktionale Anforderungen (Grund f\u00fcr QA)</li> <li>Randbedingungen (Grund f\u00fcr QA)</li> <li>Qualit\u00e4tsanforderungen (QA) (fr\u00fcher Nicht-funktionale-Anforderungen) (alternative: architecture characteristics) \u00a0 \u00a0 * Kernaufgabe als Architekt</li> <li>Qualit\u00e4tsszenario (Zur Verifizierung oder Bewertung von QA) \u00a0 \u00a0 * Testf\u00e4lle f\u00fcr Software Architektur (oft nicht automatisch/trivial ausf\u00fchrbar)</li> <li>Qualit\u00e4tsmerkmale (kategorisieren QA) \u00a0 \u00a0 * Benutzbarkeit, Performance, *abilities, ...</li> <li>Nicht-Anforderungen (not in scope) =&gt; super wichtig</li> </ul> <p>Often it is impossible to prioritize the architecture characteristics (with the stakeholders). Instead we should identify the 3 most important ones (but unprioritized).</p>","tags":["Architecture","Architect"]},{"location":"architecture/isaqb/#qualitatsszenario","title":"Qualit\u00e4tsszenario","text":"<ul> <li>Testen unsere Qualit\u00e4tsanforderungen</li> <li>Kann die Architektur mit den neuen Anforderungen umgehen?</li> <li>Kommen beim Architekturbrezel zum Einsatz</li> </ul> <p>Verschiedene Szenarien:</p> <ul> <li>Verwendungsszenarien \u00a0 \u00a0 * Normales arbeiten am System</li> <li>\u00c4nderungsszenarien \u00a0 \u00a0 * \u00c4nderung am System \u00a0 \u00a0 * z.B.: \"Anbindung eines neue Payment Provider darf nicht mehr als 10'000 CHF kosten.\" Dies ist kein Qualit\u00e4tsszenario f\u00fcr die Architektur, weil ich dies mit der Architektur nicht erreichen kann (zu viel andere Faktoren spielen eine Rolle). Besser w\u00e4re: \"Anbindung eines neue Payment Provider darf nicht mehr als den Payment-Baustein betreffen\". Dies kann die Architektur erm\u00f6glichen und hat auch Einfluss auf die Kosten.</li> <li>Stressszenarien \u00a0 \u00a0 * Etwas unerwartetes passiert mit dem System</li> </ul> <p>Es ist schwierig Qualit\u00e4tsszenarien zu finden, welche ich (als Architekt) mit der Architektur beeinflussen kann.</p> <p>Beschreibung von Qualit\u00e4tsszenario (Basierend auf Qualit\u00e4tsanforderungen)</p> <ul> <li>Qualit\u00e4tsattribut \u00a0 \u00a0 * Performance</li> <li>Umgebung - Ger\u00e4t, Location, last des Systems \u00a0 \u00a0 * Normalbetrieb</li> <li>Quelle - Ausl\u00f6ser, Trigger \u00a0 \u00a0 * Reisender</li> <li>Artefakt \u00a0 \u00a0 * \u00fcber Mobile App</li> <li>Reaktion \u00a0 \u00a0 * liefert gefundene Reisem\u00f6glichkeit</li> <li>Messen - Muss nicht eine Zahl sein. Kann die Architektur damit umgehen? \u00a0 \u00a0 * innerhalb 5sec</li> </ul>","tags":["Architecture","Architect"]},{"location":"architecture/isaqb/#kohasion-von-anforderungen","title":"Koh\u00e4sion von Anforderungen","text":"<p>Clustering von Anforderungen (Funktionales Clustering / Fachlicher Schnitt) nach unterschiedlichen Kriterien. Z.B.:</p> <ul> <li>Prozesse / Abl\u00e4ufe (Funktionalit\u00e4t)</li> <li>Daten</li> <li>Rollen (wer arbeitet mit der Software)</li> </ul> <p>Betrachte Architektur in erster Linie aus funktionaler Sicht (Business Sicht). Das Business entscheidet ob die Architektur gut ist.</p>","tags":["Architecture","Architect"]},{"location":"architecture/isaqb/#sichten","title":"Sichten","text":"","tags":["Architecture","Architect"]},{"location":"architecture/isaqb/#kontexsicht-kontextabgrenzung","title":"Kontexsicht / Kontextabgrenzung","text":"<p>Kein Projekt ohne fachlichen Kontext</p> <ul> <li>Erste Ebene ist oft sinnvoll aus fachlicher Sicht darzustellen \u00a0 \u00a0 * Datenfluss aus fachlicher Sicht (Abh\u00e4ngigkeit interessiert das Fach oft nicht). \u00a0 \u00a0 * Sind Teile des Systems instabil? =&gt; Das Fach muss da Antworten haben \u00a0 \u00a0 * Wo sind Risiken? (z.B.: Dimensions erlaubt nur 30 Request/min) =&gt; markiere diese \u00a0 \u00a0 * \u00c4hnliche Nachbarsysteme =&gt; Fachliche Cluster bilden</li> <li>Technische Kontext Sicht ist oft nicht notwendig.</li> </ul>","tags":["Architecture","Architect"]},{"location":"architecture/isaqb/#bausteinsicht","title":"Bausteinsicht","text":"<ul> <li>Verschiedene Detailstufen</li> <li>Wir wollen \"fachliche Bausteine\" \u00a0 \u00a0 * Technische Themen wie z.b. Authorisierung oder Anbindung an Umsysteme (z.B.: Finanzsystem) wollen wir (meistens) nicht als Baustein haben. Ein Adapter/Wrapper o.\u00c4. kann in diesen F\u00e4llen trotzdem technisch gebaut werden um diese zu abstrahieren. Im Diagram k\u00f6nnen wir diese als \"Stereotypen\" darstellen</li> </ul>","tags":["Architecture","Architect"]},{"location":"architecture/isaqb/#laufzeitsicht","title":"Laufzeitsicht","text":"<ul> <li>Im Vergleich zu den (meisten) anderen Sichten, sprechen wir hier von Instanzen und nicht von Klassen.</li> <li>Sequenzdiagramme k\u00f6nnen \u00fcber mehrere Level der Bausteinsicht handeln. So kann Ein Object im Diagramm auf der Kontextsicht liegen (z.b.: ein Umsystem), welches eine Aktion auf Bausteineben 3 aufruft (z.B.: eine speziefische Klasse).</li> </ul>","tags":["Architecture","Architect"]},{"location":"architecture/isaqb/#verteilungssicht","title":"Verteilungssicht","text":"<ul> <li>Zeigt Software auf Hardware / Infrastruktur</li> <li>Unterschiedliche Sichten. Je nach Zielgruppe kann die eine oder andere mehr Sinn ergeben \u00a0 \u00a0 * Infrastruktur \u00a0 \u00a0 \u00a0 \u00a0 * Was haben wir an Hardware (auch virtuell; z.B. DMZ, VPNs, Server, ...) \u00a0 \u00a0 * Deployment \u00a0 \u00a0 \u00a0 \u00a0 * Wo wird was deployed? Hier kann z.B. das Frontend sein, welches wir auf einen Server deployen (zur auslieferung an die Clients) \u00a0 \u00a0 * Laufzeit \u00a0 \u00a0 \u00a0 \u00a0 * Wo l\u00e4uft unsere Software? Hier w\u00e4re dann das Frontend beim Client Knoten (z.B. Browser)</li> </ul>","tags":["Architecture","Architect"]},{"location":"architecture/isaqb/#adr-architectural-decision-records","title":"ADR (Architectural Decision Records)","text":"<p>See: architectural-decision-records</p> <p>Entwurfsentscheidungen systematisch dokumentieren</p> <p>ADRs k\u00f6nnen auch im selben Repo zum Code eingecheckt werden. So k\u00f6nnen ADRs bei Diskussionen erstellte werden (z.B.: im Status Proposed) und bei der Implementierung im selben PR wie der Code updated werden. Dadurch werden sie auch gereviewed.</p> <ul> <li>Kontext \u00a0 \u00a0 * Fragestellung - Warum und Wozu? \u00a0 \u00a0 * Einfl\u00fcsse - Wer, Was, Wie beeinflusst die Entscheidung? \u00a0 \u00a0 \u00a0 \u00a0 * Stakeholder, Randbedingungen, Qualit\u00e4tsanforderungen \u00a0 \u00a0 * Kriterien - Bewertungsmassst\u00e4be \u00a0 \u00a0 \u00a0 \u00a0 * Pro, Cons ist oft nicht gut, weil sie schon oft biased sind \u00a0 \u00a0 \u00a0 \u00a0 * Nach was will ich \u00fcberhaupt bewerten? \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * Danach schreibe ich nicht auf was pros/cons sind sondern welche Entscheidung erf\u00fcllt die Kriterien (am besten) \u00a0 \u00a0 \u00a0 \u00a0 * Beispiele: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * Kosten \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * Teamerfahrung \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * Teamskalierbarkeit \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * Softwareskalierbarkeit \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * Komplexit\u00e4t \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * Testbarkeit</li> <li>Alternativen - L\u00f6sungsm\u00f6glichkeiten</li> <li>Entscheidungen - Welche L\u00f6sung und warum! \u00a0 \u00a0 * Sind immutable aber neue Entscheidungen k\u00f6nnen diese \"\u00fcberschreiben\". Die Dokumentation bleibt. (bzw. ADRs k\u00f6nnen auch ins Archiv verschoben oder als deprecated markiert werden). Ich m\u00f6chte gerne die aktuell g\u00fcltigen ADRs sehen/finden.</li> <li>Konsequenzen - Positive und negative Folgen \u00a0 \u00a0 * Was erlaubt uns nun die Entscheidung? Was verhindert diese? \u00a0 \u00a0 * Entscheidungen haben oftmals einen \"Haltbarkeitswert\" - Sie sollten nach einer gewissen Zeit wieder betrachtet werden.</li> </ul>","tags":["Architecture","Architect"]},{"location":"architecture/isaqb/#entscheiden","title":"Entscheiden","text":"<p>Nur das nicht Entscheidbare muss entschieden werden.</p> <ul> <li>Vorw\u00e4rts gehen und (verschiedene Varianten) Ausprobieren.</li> <li>Warten und nicht entscheiden ist oft das schlechteste und teuerste.</li> <li>Decisions are made in a given context - The same decision made in one context can bring great results, while in another it can cause devastating failure.</li> </ul>","tags":["Architecture","Architect"]},{"location":"architecture/isaqb/#querschnittliche-konzepte-cross-cutting-concerns","title":"Querschnittliche Konzepte (Cross-Cutting Concerns)","text":"<ul> <li>L\u00f6sung f\u00fcr mehrfach auftretenden oder \u00fcbergreifende Probleme</li> <li>Sollen explizit dokumentiert werden (an einem Ort und nicht verteilt)</li> <li>Liegen quer zu den Bausteinen (und sind keine fachliche Bausteine) k\u00f6nnen aber als Bausteine behandelt werden.</li> <li>Werden nicht aus fachlicher Motivation getrieben</li> <li>Sind wiederverwendbar</li> </ul>","tags":["Architecture","Architect"]},{"location":"architecture/isaqb/#dokumentation","title":"Dokumentation","text":"<p>Muss angemessen und Stakeholdergerecht sein</p> <p>Warum schreiben ich Doku?</p> <ul> <li>Transparent</li> <li>Explizit</li> <li>Konsistenz (als Kommunikationsgrundlage)</li> </ul> <p>Angemessen</p> <ul> <li>Kontext und Zielgruppen abh\u00e4ngig</li> </ul> <p>Korrektheit</p> <ul> <li>Lieber korrekt als vollst\u00e4ndig</li> <li>Aktuell</li> <li>Verifizieren</li> </ul> <p>Wartbarkeit</p> <ul> <li>Anpassbar</li> <li>Navigierbar</li> </ul> <p>Verst\u00e4ndlichkeit</p> <ul> <li>Zielgruppen abh\u00e4ngig</li> </ul> <p>Inkrementell</p>","tags":["Architecture","Architect"]},{"location":"architecture/isaqb/#how-to","title":"How-to","text":"<ul> <li>Top-Down</li> <li>Text &amp; Bild</li> <li>Template (Standard) e.g. arc42: https://github.com/arc42/arc42-template/tree/master</li> <li>Lieber eindeutig (trocken) als interessant</li> </ul>","tags":["Architecture","Architect"]},{"location":"architecture/isaqb/#5-orders-of-ignorance","title":"5 orders of ignorance","text":"<ul> <li>0th: ich weiss etwas \u00a0 \u00a0 * Mein Geburtsdatum</li> <li>1st: ich weiss etwas nicht \u00a0 \u00a0 * Ich weiss, dass meine Kollegen ein Geburtsdatum haben, kenne dieses aber nicht. Ich kann sie danach Fragen (weil ich weiss, dass sie eins haben)</li> <li>2nd: unknown unknowns \u00a0 \u00a0 * Ich weiss nicht, dass ich etwas nicht kenne</li> <li>3rd: Keine Vorgehensweise Wissensl\u00fccken zu schliessen. Ich weiss nicht wie ich an das Wissen kommen kann.</li> <li>4th: Meta nichtwissen (Ich weiss nicht, dass es unterschiedliches Wissen gibt).</li> </ul> <p>Oft bleiben wir bei 1st order of ignorance h\u00e4ngen. Wir m\u00fcssen unbedingt auf die 3rd order kommen.</p>","tags":["Architecture","Architect"]},{"location":"architecture/isaqb/#schnittstellen","title":"Schnittstellen","text":"<ul> <li>Einfach zu \u00a0 \u00a0 * lernen \u00a0 \u00a0 * benutzen \u00a0 \u00a0 * erweitern</li> <li>Schwer zu missbrauchen</li> <li>Vollst\u00e4ndig</li> <li>Erf\u00fcllt Qualit\u00e4tsanforderungen</li> </ul> <p>Best Practice</p> <ul> <li>Die G\u00fcltigkeit (Dauer, LTS) einer Schnittstelle (Spezifische Version) soll m\u00f6glichst gleich mit der Ver\u00f6ffentlichung der Schnittstelle \u00a0publiziert/kommuniziert werden. (Api V1.0 ist bis 31.08.23 g\u00fcltig). Die G\u00fcltigkeit kann sp\u00e4ter \"einfach\" verl\u00e4ngert werden.</li> </ul>","tags":["Architecture","Architect"]},{"location":"architecture/isaqb/#architekturbewertung","title":"Architekturbewertung","text":"<p>Erf\u00fcllt die Architektur die Qualit\u00e4tsziele (Qualit\u00e4tsanforderungen) die an sie gestellt werden.</p> <p>Quantitative Bewertung</p> <ul> <li>Messbare Werte (Zahlen). z.B.: Metriken</li> <li>\u26a0 Wichtig: Metriken \u00fcber die Zeit betrachten</li> <li>Geben oft hinweise, wo ich eine qualitative Bewertung machen soll =&gt; \"Das schaue ich mir mal genauer an\"</li> </ul> <p>Qualitive Bewertung</p> <ul> <li>Soll-/Ist-Analyse (nicht inhaltlich/funktional sonder auf die Architektur bezogen)</li> <li>Ohne Qualit\u00e4tsanforderungen kann ich dies nicht wirklich beurteilen.</li> <li>Szenario-basierte Architekturanalyse =&gt; Architecture Tradeoff Analysis Method (ATAM) =&gt; ZAAF (ATAM von Z\u00fchlke) \u00a0 \u00a0 * Qualit\u00e4tsszenario anschauen und bewerten ob unsere Architektur dies unterst\u00fctzt</li> </ul>","tags":["Architecture","Architect"]},{"location":"architecture/lightweight/","title":"Lightweight with vertical slices","text":"","tags":["Architecture"]},{"location":"architecture/lightweight/#lightweight-api","title":"Lightweight API","text":"<p>The lightweight API is an approach to building APIs without complex architectural patterns. The lightweight API contains just the essential components needed to build an HTTP API, and to provide CRUD operations. The approach is used for prototyping, rapid application development, or microservices. \u201cLightweight\u201d frameworks such as Node JS, Java Spring Boot, or Python Flask improve development efficiency even further. ASP.NET Core 6 now provides language constructs to create lightweight APIs as well (Minimal Api).</p> <ul> <li>\u2705 Reduces boilerplate to a minimum.<ul> <li>No need to write code (classes, services, commands, ...) just to fulfil architecture.</li> </ul> </li> <li>\u2705 Simple cases can be implemented simple. Complex cases are possible.<ul> <li>We don't have an architecture which is built around (few) complex cases and making therefore the simple cases difficult as well but rather build it around simple cases and keep the possibility to implement complex cases.</li> </ul> </li> <li>\u2705 Easier testing <ul> <li>Less layers, less classes, simpler dependency injection.</li> </ul> </li> <li>\u274c Solution might struggle with cross-cutting concerns and complex business logic / requirements.</li> </ul>","tags":["Architecture"]},{"location":"architecture/lightweight/#feature-driven-vertical-slice","title":"Feature driven (vertical slice)","text":"<p>The system is structured around features and built along vertical slices, encapsulating and grouping all concerns together (request handling, business logic, DB access, ...). Each slice is isolated from each other slice. Some shared services might exist to handle more complex logic which can be reused among multiple slices.</p> <ul> <li>\u2705 Very high cohesion and low coupling.<ul> <li>Everything that changes together is grouped together.</li> <li>Fewer side effects.</li> <li>Lower chance of breaking code during refactorings.</li> </ul> </li> <li>\u2705 Code is mainly added rather than changed.<ul> <li>Lower chance of breaking code during development.</li> </ul> </li> <li>\u274c Code reuse is more difficult to handle (duplication means\u2026 duplications, sharing means coupling).</li> </ul>","tags":["Architecture"]},{"location":"architecture/lightweight/#design","title":"Design","text":"<p>The API is designed around individual endpoint classes. Each one has a single purpose and endpoint.</p> <p>These core principles outline the design:</p> <ul> <li>The code for each feature (vertical slice) lies within its own namespace (or feature folder).</li> <li>An endpoint has a single purpose.</li> <li>A controller has a single endpoint (controller can be grouped with the TagsAttribute).</li> <li>Only GET endpoints have a DTO as response, all other endpoints return a status code only.</li> <li>The frontend must retrieve new/updated data after the create/update operation.</li> <li>There is no layering - business logic and data access reside in the controller/namespace.</li> <li>We use ad-hoc decomposition within the controller namespace.</li> <li>Shared code resides in services.</li> <li>Endpoints are unit tested.</li> </ul> <p>\ud83d\udca1 Notes:</p> <ul> <li>We do not use the Minimal API language features of .NET 6 since we currently do not see a big benefit in using it.</li> <li>Unlike microservices, our endpoints access/edit a single data model without being limited to a specific data space.  *Since we are reusing the same model throughout the solution, we use DTOs instead of returning entities.</li> </ul>","tags":["Architecture"]},{"location":"architecture/lightweight/#reasoning","title":"Reasoning","text":"<p>Some drawbacks were identified for an onion architecture, particularly in the area of the architectures complexity in relation to fairly simplistic business requirements. A lot of \u201cboilerplate\u201d needs to be written just to satisfy the architectures need whereas the actual business logic often get lost in its depth.</p> <p>A layered architecture is considered as an easier alternative to the onion architecture but also to similar for an actual and relevant improvement of the drawback.</p> <p>If we can expect that most requirements will be rather simple and mostly CRUD-like, we can go with a somewhat more minimalistic approach where we try to optimize the architecture around those simple use cases instead of the few complex ones. This should result in a straightforward implementation for the majority of use cases but still allows the implementation of more complex use cases.  </p> <p>By following this simpler approach from the start, we ensure that the code is only as complex as it needs to be.</p> <p>Open Points</p> <ul> <li>\u274c Uncertain on how it performs for more complex cases / business logic.</li> <li>\u2753 Can we still bring in a good structure and guidelines to have uniformed code?</li> <li>\u2753 What do we do with complex business logic?</li> <li>\u2753 Can (should) we abstract 3rd party libraries (to not have every piece of code be dependent on every SDK or library)</li> </ul>","tags":["Architecture"]},{"location":"architecture/lightweight/#is-solid","title":"Is SOLID","text":"<ol> <li>Single-Responsibility Principle<ul> <li>Each class has a single responsibility (because of verticle slice).</li> </ul> </li> <li>Open-Closed Principle<ul> <li>It is open for extensions (create new classes).</li> <li>Adding a new slice does not need modification of existing code =&gt; It is closed for modifications.</li> </ul> </li> <li>Liskov Substitution Principle<ul> <li>The subclasses should be substitutable for the base classes.</li> </ul> </li> <li>Interface Segregation Principle<ul> <li>All user interfaces should be separate from each other. Also, it is a good practice to have many intent-driven interfaces over one general-purpose interface.</li> </ul> </li> <li>Dependency Inversion Principle<ul> <li>The modules should depend on the interfaces or the abstract classes and not the concrete classes and functions.</li> </ul> </li> </ol>","tags":["Architecture"]},{"location":"architecture/microservice/","title":"Microservices","text":"<p>Consider a modular monolith before creating a microservice architecture.</p> <p>It's usually best to start with something monolithic and modular, and only decomposing in response to genuine need.</p> <ul> <li>Do not make long service dependencies (A-&gt;B-&gt;C-&gt;D-&gt;...). This will eventually fail (Bad performance and bad availability).<ul> <li>This can and has to be solved with data duplication (no changes though)</li> <li>Make a rule that only one hop is allowed A-&gt;B </li> </ul> </li> </ul> <p>If the same team that created the \"monolithic big ball of mud\" moves to a microservices architecture, there is a high chance they will create a \"distributed big ball of mud\".</p> <p>Info</p> <p>Microservices are not the solution to get rid of a \"big ball of mud\", modularization is. Microservices are just one way how we can enforce better modularization</p> <p>A microservices can offer a lot of good properties such as:</p> <ul> <li>High cohesion</li> <li>Low coupling</li> <li>Focused on business capability</li> <li>Bounded context or aggregate</li> <li>Encapsulated data</li> </ul> <p>but so does a modular monolith! Microservices excel in other areas such as:</p> <ul> <li>Individually deployable</li> <li>Individually upgradeable</li> <li>Individually replaceable</li> <li>Individually scalable</li> <li>Heterogeneous technology stack</li> <li>Small, independent development teams! (probably the biggest benefit)</li> </ul> <p>We should consider microservices only if we need these characteristics.  If we have a good modular monolith but some parts of the application need those characteristics we can always extract those and opt for a modular monolith with some additional services around it.</p> <p>Microservices need there own isolated persistence (DB)</p> <p>Monolith and Microservice are two extremes on an X-Axis. Usually there is a good middle ground somewhere in between.</p>","tags":["Architecture","Distributed-System"]},{"location":"architecture/microservice/#micro-frontend-mfe","title":"Micro frontend (MFE)","text":"<p>MFE is recommended for teams that require applications to be deployed independently. It is important to consider the cost\u00a0of MFEs and decide whether it makes sense for your own teams.</p> <p>With MFE architecture, a large application is split into:</p> <ol> <li>A single\u00a0Host\u00a0application that references external...</li> <li>Remote\u00a0applications, which handle a single domain or feature.</li> </ol>","tags":["Architecture","Distributed-System"]},{"location":"architecture/microservice/#decision-tree-for-mfes","title":"Decision Tree for MFEs","text":"","tags":["Architecture","Distributed-System"]},{"location":"architecture/microservice/#related","title":"Related","text":"<p>self-contained systems monolith vertical-slice</p>","tags":["Architecture","Distributed-System"]},{"location":"architecture/misc/","title":"Misc","text":""},{"location":"architecture/misc/#distributed-communications-failure","title":"Distributed Communications Failure","text":"<p>Failure is always an option</p> <p>We have 4 option to handle distributed exceptions.</p> <ul> <li>Ignore<ul> <li>Swallow exceptions</li> </ul> </li> <li>Retry<ul> <li>How many times?</li> <li>Ensure no duplication (-&gt; idempotent)</li> </ul> </li> <li>Undo<ul> <li>Does a logical undo exist?</li> <li>What do we do if Undo fails?</li> </ul> </li> <li>Coordination<ul> <li>Two-Phase Commit (Prepare with all involved resources -&gt; Commit)</li> <li>Distributed transaction (usually doesn't work with web APIs)</li> <li>\u274cCostly</li> </ul> </li> <li>Communicator (Two phase commit, )</li> </ul> <p>For each case and each possible failure (call to XY failed, message to service bus could not be published) we need to consider the 4 options and choose the best.</p>"},{"location":"architecture/misc/#metrics","title":"Metrics","text":""},{"location":"architecture/misc/#hotspot-for-code-churn-vs-cyclomatic-or-cognitive-complexity","title":"Hotspot for Code Churn vs (Cyclomatic or Cognitive) Complexity","text":"<ul> <li>Many code changes with high complexity</li> </ul>"},{"location":"architecture/models/","title":"Models","text":"<p>Models are never correct or represent the actual case, they answer questions. If there is no question to answer we don't need a model. They are not here to \"dumb things down\" (it does not necessary get more simple) they are different levels of abstractions. </p>","tags":["Documentation","Architecture"]},{"location":"architecture/models/#whiteboard-model","title":"Whiteboard model","text":"<p>Whiteboard model of the system is a high level abstraction of the system that can be drawn on a whiteboard with the idea that every member of the team (or at least seniors) can draw it from memory. This caps the complexity of the model.</p> <p>The idea is similar to the C4 model and most of the time is a mix between the container model with interesting facts about components or a mix of the system context with container model data. Sometimes it also makes sense to have multiple views. In the end it is not that strict or formal.</p>","tags":["Documentation","Architecture"]},{"location":"architecture/models/#related","title":"Related","text":"<ul> <li>c4</li> </ul>","tags":["Documentation","Architecture"]},{"location":"architecture/monolith/","title":"Monolith","text":"<p>A modular monolith has many overlapping advantages with microservices. However, in a monolith architecture it is a lot easier to bypass the modularity and therefore creating a big ball of mud. One way to enforce the modularity is by writing architectural fitness functions.</p> <p>The hardest thing about building modular monoliths is keeping them modular.</p> <p>One of the major benefits of a modular monolith is how easy it is to share code. But that same ease is also their biggest flaw. Ironically, code sharing becomes the main vector of contamination.</p> <p>Monolith and microservices should not be on a black-white scale but rather on a continuous scale. If we have a modular monolith we can extract specific modules into services for optimization or because they have specific needs (such as individual deployable).</p>","tags":["Architecture","Modular"]},{"location":"architecture/monolith/#concerns","title":"Concerns","text":"<ul> <li>Long compilation times.</li> <li>Long-running test.</li> <li>Deployment to production takes a long time.<ul> <li>Single deployment unit.</li> </ul> </li> <li>Limited language agnosticism.</li> <li>Centralized development.</li> </ul>","tags":["Architecture","Modular"]},{"location":"architecture/monolith/#modular","title":"Modular","text":"<p>The module\u2019s independence is determined by three main factors:</p> <ul> <li>number of dependencies (to other modules) - could be reduced e.g. with a mediator</li> <li>strength of dependencies (how chatty is the module with another one) - should these modules be merged?</li> <li>stability of the modules on which the module depends on (how many modules need a change when I change my module?) - merge?</li> </ul> <p>Technical layers are often used as \"modules\" but this is very bad in regards to \"stability\" since a new feature usually needs a change in all modules (UI, API, Business, DB). Vertical Slice seems more reasonable.</p> <p>Module must have well-defined interface (a contract). We only want to have one \"arrow\" from Module A -&gt; Module B.</p> <p>A\u00a0modular component\u00a0is a building block of the application that has a well-defined role and responsibility in the system and a well-defined set of operations.</p> <p>It is often difficult to enforce modularity in monolith and it often relies on discipline. A concrete solution could look like this.</p>","tags":["Architecture","Modular"]},{"location":"architecture/monolith/#example","title":"Example","text":"<p>The best way to separate modules in .Net is by creating projects  and keep everything where possible internal or private. We usually need at least one WebApi project (executable) and could then add projects (class libraries) for each module. A module would contain simple interfaces for the WebApi to use (such as ServiceCollectionExtensions to register services in the program as well as the endpoint definitions such as controller or minimal api definition). In addition we would add a Module.Contracts project for a clean communication interface. The WebApi can reference the module, all other modules can only reference the Contracts module.  We can even build the modules in a way that they can run on their own. E.g.: Each module has an executable Api where we reuse the ServiceCollectionExtensions but mock external modules. </p> <pre><code>---\ntitle: Project references\n---\ngraph TD\n    subgraph WebApiModule\n        WebApi\n    end\n\n    subgraph OrdersModule\n        Orders\n        Orders.Contracts\n\n        Orders --&gt; Orders.Contracts\n    end\n\n    subgraph PaymentModule\n        Payment\n        Payment.Contracts\n\n        Payment --&gt; Payment.Contracts\n    end\n\n    WebApi --&gt; Orders\n    WebApi --&gt; Payment\n    Orders --&gt; Payment.Contracts\n    Payment --&gt; Orders.Contracts</code></pre> <p>For inter-module-communication we would introduce something like a mediator (easier) or message bus (more complex) to still have a clear separation.</p> <p><pre><code>---\ntitle: Direct communication (bad practices)\n---\ngraph \n    ModuleA &lt;--&gt; ModuleB\n    ModuleA &lt;--&gt; ModuleC\n    ModuleA &lt;--&gt; ModuleD\n    ModuleB &lt;--&gt; ModuleC\n    ModuleB &lt;--&gt; ModuleD\n    ModuleC &lt;--&gt; ModuleD</code></pre> <pre><code>---\ntitle: Communication with middleman (good practices)\n---\ngraph \n    ModuleA &lt;--&gt; Middleman\n    ModuleB &lt;--&gt; Middleman\n    ModuleC &lt;--&gt; Middleman\n    ModuleD &lt;--&gt; Middleman\n    Middleman(MessageBroker or Mediator)</code></pre></p> <p>Example </p> <p></p>","tags":["Architecture","Modular"]},{"location":"architecture/monolith/#notes","title":"Notes","text":"<p>Get and Updates alike can be done via messages (I can also have a \"GetBlaBlaRequestEvent\" which produces an \"BlaBlaResponseEvent\" in another system). Complexity increases drastically again if we do it like that (separate projects, strict contracts, message broker or mediator, async everything, ... ) and we should decide if that's worth it but it prevents a \"big ball of mud\" and is less complex then microservices.</p>","tags":["Architecture","Modular"]},{"location":"architecture/monolith/#related","title":"Related","text":"<p>microservice vertical-slice</p>","tags":["Architecture","Modular"]},{"location":"architecture/onion/","title":"Onion","text":"<p>The Onion Architecture fosters a modular and maintainable design by enforcing a strict separation of concerns and promoting dependency inversion. It enables the creation of applications that are flexible, testable, and scalable over time. It organizes an application into concentric layers towards the core that represents the domain. The further in, the less changes should occur (the domain my life longer than the application). It separates the application's core business logic and external concerns, such as database access, UI, and frameworks. </p> <p>It is similar to the classic n-tier layer architecture but more complex. All the folders are now projects, whenever something is change you go through all projects and all folder. Navigation becomes a nightmare.</p> <p>Also known as the vegetable architecture - you know, the kind that makes you cry when you look at it.</p> <p>As with other layered architectures, the focus is on the separation of technical concerns.</p>","tags":["Architecture"]},{"location":"architecture/onion/#related","title":"Related","text":"<p>domain-centric-architecture hexagonal-architecture</p>","tags":["Architecture"]},{"location":"architecture/patterns/","title":"Patterns","text":"","tags":["Architecture","Pattern"]},{"location":"architecture/patterns/#strangler-fig-pattern","title":"Strangler (Fig) Pattern","text":"<p>Incrementally migrate a legacy system by gradually replacing specific pieces of functionality with new applications and services. As features from the legacy system are replaced, the new system eventually replaces all of the old system's features, strangling the old system and allowing you to decommission it.</p> <p>Use this pattern when gradually migrating a back-end application to a new architecture.</p>","tags":["Architecture","Pattern"]},{"location":"architecture/patterns/#anti-corruption-layer","title":"Anti-Corruption Layer","text":"<p>Legacy systems often suffer from quality issues such as convoluted data schemas or obsolete APIs. A Facade helps to keep the interface of a new Application clean. </p> <p>Use this pattern to ensure that an application's design is not limited by dependencies on outside subsystems.</p>","tags":["Architecture","Pattern"]},{"location":"architecture/patterns/#design-patterns-for-microservices","title":"Design patterns for microservices","text":"<p> Microsoft \"Design patterns for microservices\"</p>","tags":["Architecture","Pattern"]},{"location":"architecture/patterns/#saga-pattern","title":"Saga Pattern","text":"<p>A saga is a sequence of local transactions over multiple separated services. In case of an error, undo operations need to be performed.</p>","tags":["Architecture","Pattern"]},{"location":"architecture/patterns/#problem","title":"Problem","text":"<p>\"Database per service Pattern\" is applied, distributed transactions are not an option but we need to implement a transaction which spans over multiple services.</p>","tags":["Architecture","Pattern"]},{"location":"architecture/patterns/#solution","title":"Solution","text":"<p>Each service updates it DB locally and publishes a message to trigger a next local transaction. If one transaction fails it violates the business rules and saga needs to execute compensating transactions (undo) for already applied changes.</p>","tags":["Architecture","Pattern"]},{"location":"architecture/patterns/#cqrs-pattern","title":"CQRS Pattern","text":"<p>Command and Query Responsibility Segregation is a pattern that separates read and write operations for a data store. This allows us to optimize both acts.</p> <p>read\u00a0and\u00a0write\u00a0operation should somehow be\u00a0separated.</p>","tags":["Architecture","Pattern"]},{"location":"architecture/patterns/#problem_1","title":"Problem","text":"<p>Read and write workloads are often asymmetrical, with very different performance and scale requirements. We often try to balance between reads and writes and can never optimize for both. </p> <ul> <li>Mismatch between the read and write representations of the data</li> <li>The traditional approach can have a negative effect on performance due to load on the data store and data access layer, and the complexity of queries required to retrieve information.</li> <li>Managing security and permissions can become complex, because each entity is subject to both read and write operations, which might expose data in the wrong context.</li> </ul>","tags":["Architecture","Pattern"]},{"location":"architecture/patterns/#solution_1","title":"Solution","text":"<p>CQRS separates reads and writes into different models, using\u00a0commands\u00a0to update data, and\u00a0queries\u00a0to read data.</p> <ul> <li>Commands should be task-based, rather than data centric. (\"Book hotel room\", not \"set ReservationStatus to Reserved\").</li> <li>Commands may be placed on a queue for\u00a0asynchronous processing, rather than being processed synchronously.</li> <li>Queries never modify the database. A query returns a DTO that does not encapsulate any domain knowledge.</li> <li>DB might somehow be separated (e.g. DB, tables, views) for the specific (performance) needs (write vs. read).</li> <li>Consider materialized views for the queries.</li> </ul> <p>CQRS can provide limitless scalability for both the read and write side but with some trade-offs, like eventual consistency, which need to be clearly communicated to the business user.</p> <p>Use when we have rich/complex business.</p> <p>MediatR is not needed to implement CQRS! It doesn't even do a good job in actually separating Commands and Queries (This is done by conventions and guidelines). </p>","tags":["Architecture","Pattern"]},{"location":"architecture/patterns/#outbox-pattern","title":"Outbox Pattern","text":"","tags":["Architecture","Pattern"]},{"location":"architecture/patterns/#problem_2","title":"Problem","text":"<p>How to reliably/atomically update the database and send messages/events?</p>","tags":["Architecture","Pattern"]},{"location":"architecture/patterns/#forces","title":"Forces","text":"<ul> <li>2PC (two phase commit) is not an option</li> <li>If the database transaction commits messages must be sent. Conversely, if the database rolls back, the messages must not be sent</li> <li>Messages must be sent to the message broker in the order they were sent by the service. This ordering must be preserved across multiple service instances that update the same aggregate.</li> </ul>","tags":["Architecture","Pattern"]},{"location":"architecture/patterns/#solution_2","title":"Solution","text":"<p>A service that uses a relational database inserts messages/events into an\u00a0outbox\u00a0table (e.g.\u00a0<code>MESSAGE</code>) as part of the local transaction (i.e. while performing the actual DB transaction like creating an order). Both, the message and the entity are committed (or rollbacked) with the same commit. A separate\u00a0Message Relay\u00a0process publishes the events inserted into database outbox table to a message broker.</p>","tags":["Architecture","Pattern"]},{"location":"architecture/patterns/#related","title":"Related","text":"<p>https://stackoverflow.com/questions/72284628/comparing-cdc-vs-outbox-pattern-for-creating-event-streams</p> <p>See also:  Saga Pattern</p> <ul> <li>https://github.com/meysamhadeli/awesome-dotnet-tips</li> </ul>","tags":["Architecture","Pattern"]},{"location":"architecture/resilience/","title":"Resilient","text":"<p>Possible tools Tools#Resilience</p> <ul> <li>Caching, Fallback, Retry, Circuit Breaker.</li> </ul>","tags":["Resilience","Strategy","Distributed-System","Quality-Attribute","Pattern"]},{"location":"architecture/resilience/#retry","title":"Retry","text":"<p>The Retry pattern enables an application to retry an operation in the expectation that it\u2019ll succeed.</p> <p>See also: Exponential BackOff</p>","tags":["Resilience","Strategy","Distributed-System","Quality-Attribute","Pattern"]},{"location":"architecture/resilience/#circuit-breaker","title":"Circuit Breaker","text":"<p>The Circuit Breaker pattern prevents an application from performing an operation that is likely to fail.</p> <p>Circuit Breaker is used to detect failures and prevent a failure from constantly recurring. The pattern helps to prevent catastrophic cascading failure across multiple systems.  If an error occurs in a call to another service, we don't want to spam that service with additional request. If we expect it to fail we instead return an error or some kind of result without even calling the service. It is therefore often built on top of the [[#Retry]] pattern</p>","tags":["Resilience","Strategy","Distributed-System","Quality-Attribute","Pattern"]},{"location":"architecture/self-contained-systems/","title":"Self-contained Systems (SCS)","text":"<p>An architectural approach that separates a larger system\u2019s functionality into many independent, collaborating systems. This approach helps avoid the problem of large monoliths that grow constantly and eventually become unmaintainable</p> <p>Key characteristics of SCS:</p> <ul> <li>Autonomous: Each SCS is an autonomous web application (DB, Backend, Frontend, ...)</li> <li>One Team Ownership: Each SCS is owned by one team and a user story is typically implemented by one team changing one SCS, promoting developer productivity and minimizing coordination efforts</li> <li>Single SCS Deployments: SCS should ensure that a feature can be implemented in a single SCS, allowing it to be brought into production with a single deployment. This differs from microservices, which may require changes to multiple microservices for a single feature.</li> <li>Asynchronous Dependencies: Communication with other SCSs or third-party systems is asynchronous wherever possible</li> <li>No Shared Business Logic: To avoid tight coupling, an SCS should share no business code with other SCSs</li> <li>Hardly Shared Infrastructure: Shared infrastructure should be reduced to increase availability and decrease coupling</li> </ul> <p>While SCS are similar to microservices, there are differences. A system will usually contain fewer SCS than microservices. Also, microservices can communicate with other microservices \u2013 even synchronously. SCS prefer no communication or asynchronous communication. A SCS has the size of at least one microservice.</p>","tags":["Architecture","Distributed-System"]},{"location":"architecture/self-contained-systems/#related","title":"Related","text":"<ul> <li>microservice</li> <li>vertical-slice</li> </ul>","tags":["Architecture","Distributed-System"]},{"location":"architecture/service-bus/","title":"Service Bus Messaging","text":"","tags":["Distributed-System"]},{"location":"architecture/service-bus/#queue","title":"Queue","text":"<p>Use when there is a need to pass the message in the one-to-one system.</p> <p>Messages in queues are ordered and timestamped on arrival.</p> <p></p>","tags":["Distributed-System"]},{"location":"architecture/service-bus/#topic","title":"Topic","text":"<p>Use when there is a need to send the message to multiple systems.</p> <p>Topics can have multiple, independent subscriptions, which attach to the topic and otherwise work exactly like queues from the receiver side.</p> <p></p>","tags":["Distributed-System"]},{"location":"architecture/systematic-software-architecture/","title":"Systematic Composition","text":"<ol> <li>identify Actors</li> <li>identify Use-Cases</li> <li>identify FR</li> <li>Which are the most difficult non-functional requirements</li> <li>Which are the dominant use-cases</li> </ol>"},{"location":"architecture/systematic-software-architecture/#functional-requirements","title":"Functional Requirements","text":"<p>Use-Cases / User Stories - User Stories besser f\u00fcr kleinere Projekte - Use-Cases oder Epics f\u00fcr gr\u00f6ssere</p> <p>Alle use-cases erfassen, besonders wichtig f\u00fcr die Frage \"Was ist in Scope und was nicht?\". Umsysteme identifizieren.</p>"},{"location":"architecture/systematic-software-architecture/#non-functional-requirements","title":"Non-Functional Requirements","text":"<p>The Big 4 - Performance - Availability - Operability - Maintainability</p> <p>Make the number graspable / concrete (important: maximum). Important Quality Attribute - How many? 1000? - How many per time frame? 280 events / seconds?</p>"},{"location":"architecture/systematic-software-architecture/#dominant-use-cases-uc","title":"Dominant Use-Cases (UC)","text":"<ul> <li>Usually have the hardest performance or availability requirements.</li> <li>The things I'm afraid of or I don't know or understand</li> <li> <p>Pain points of the previous systems</p> </li> <li> <p>Which are the complex use-cases?</p> </li> <li>Which are the use-cases with high throughput?</li> </ul>"},{"location":"architecture/systematic-software-architecture/#define-the-architecture","title":"Define the architecture","text":"<p>Follow the dominant UC - Build sequence diagram and flow based on the UC (step by step) to build the architecture.</p> <p>Inter-process communication needs a good reason to be introduced! They are expensive and responsible for performance issues.</p> <p>How to split processes - Bounded Context - Types of load (interactive, batch) - Availability - Need for different integration technologies - Performances - Capacity</p>"},{"location":"architecture/systematic-software-architecture/#evaluate-architecture","title":"Evaluate Architecture","text":""},{"location":"architecture/systematic-software-architecture/#anchor-the-design-to-reality","title":"Anchor the design to reality","text":"<ul> <li>PoC</li> <li>Spike</li> <li>Baseline</li> <li>Properties of a Product (fact, limits, numbers)</li> </ul>"},{"location":"architecture/systematic-software-architecture/#compare","title":"Compare","text":"<p>Define factors I want to evaluate (e.g. throughput where we require at least x request per seconds) and place architectures (variants) on that graph.</p> <p>throughput low | --A--R-----B---| high A: Architecture A B: Architecture B R: Required</p> <p>In this case we can get rid of Architecture A because it does not fulfill the requirement. In other cases we might need to do PoCs or prototyping to figure out where one architectures lie on the scale.</p>"},{"location":"architecture/systematic-software-architecture/#select-a-draft-architecture","title":"Select a draft architecture","text":"<ul> <li>Architecture Tipping point<ul> <li>One architecture doesn't fulfil the requirements =&gt; not viable</li> </ul> </li> <li>Decision Tipping Points<ul> <li>Usually we take the \"better\" architecture unless it produces immense drawbacks</li> </ul> </li> </ul>"},{"location":"architecture/systematic-software-architecture/#notes","title":"Notes","text":"<p>Wir m\u00fcssen die kritischen (dominant) Use-Cases betrachten  - </p> <p>Risiko basierte Architektur - H\u00f6chstes Risiko zuerst beseitigen</p> <p>Ich muss die Dom\u00e4ne gut genug verstehen um den Kunden (e.g. BE, BA) zu challenges</p>"},{"location":"architecture/tools/","title":"Tools","text":"<p>A list of tools, frameworks and more where I had good experience with or I got recommendation from others.</p>"},{"location":"architecture/tools/#documentation-as-code-doc","title":"Documentation as Code (DoC)","text":"<ul> <li>PlantUML</li> <li>mermaid</li> <li>Structurizr</li> </ul>"},{"location":"architecture/tools/#infrastructure-as-code-iac","title":"Infrastructure as Code (IaC)","text":"<ul> <li>terraform</li> </ul>"},{"location":"architecture/tools/#mail-send","title":"Mail Send","text":"<ul> <li>SendGrid - A cloud-based email delivery service designed for sending transactional and marketing emails at scale.<ul> <li>In combination with FluentMail</li> </ul> </li> <li>mailtrap - Primarily used by developers and QA professionals for testing email functionality in development and staging environments without sending emails to real users.<ul> <li>In combination with FluentMail</li> </ul> </li> <li>smtp4dev - the fake SMTP email server for development and testing.</li> </ul>"},{"location":"architecture/tools/#document-generation","title":"Document Generation","text":"<ul> <li>Aspose.Words</li> </ul>"},{"location":"architecture/tools/#contract-testing-over-multiple-apis","title":"Contract Testing (over multiple APIs)","text":"<ul> <li>Pact<ul> <li>Contract testing can partially be achieved by Integration tests by using anonymous (or test) entities instead of instances of the real class =&gt; Test still green --&gt; contract violation</li> </ul> </li> </ul>"},{"location":"architecture/tools/#idp","title":"IdP","text":"<ul> <li>Duende Identity Server</li> <li>(Azure B2C) rather bad experience (especially for heavy customization / personalization)</li> </ul>"},{"location":"architecture/tools/#messaging","title":"Messaging","text":"<ul> <li>MassTransit<ul> <li>Is able to handle Azure Event Hubs</li> </ul> </li> </ul>"},{"location":"architecture/tools/#feature-toggling","title":"Feature toggling","text":"<ul> <li>Flagsmith</li> </ul> <p>Others recommendations</p> <ul> <li>LaunchDarkly</li> <li>Default Microsoft FeatureManager</li> </ul>"},{"location":"architecture/tools/#vulnerability-monitoring","title":"Vulnerability monitoring","text":"<p>SAST (Static Application Security Testing) DAST (Dynamic Application Security Testing) IAST (Interactive Application Security Testing) SCA (Software Composition Analysis)</p> <ul> <li>Configure in repo if possible (gitlab, github, azure DevOps)</li> <li>mend.io (formerly Whitesource) - Has established itself in the .NET world</li> <li>SNYK</li> <li>Trivy</li> <li></li> </ul>"},{"location":"architecture/tools/#licences","title":"Licences","text":"<ul> <li>Configure in repo (e.g. Gitlab) and define which licenses are ok. Repo should provide info if other licences are detected</li> </ul>"},{"location":"architecture/tools/#testing-mocking","title":"Testing / Mocking","text":"<ul> <li>Respawn - To reset test data in integration tests (faster than DB deletion/re-creation or table truncation).</li> <li>Bogus vs. AutoFixtures</li> <li>Moq.AutoMocker</li> <li>WireMock.Net  - mimics the behaviour of an HTTP API</li> </ul> <p>Never used or recommended so far but maybe useful:</p> <ul> <li>NetArchTest -  allows you to create tests that enforce conventions for class design, naming and dependency in .Net code bases.</li> </ul>"},{"location":"architecture/tools/#resilience","title":"Resilience","text":"<ul> <li>Polly</li> <li>Microsoft.Extensions.Http.Resilience <ul> <li>https://www.youtube.com/watch?v=kNzssE7Ir60</li> <li>See: https://learn.microsoft.com/en-us/dotnet/core/resilience/http-resilience?tabs=dotnet-cli </li> </ul> </li> </ul>"},{"location":"architecture/tools/#openapi-gui","title":"OpenAPI GUI","text":"<ul> <li>Swagger ,but since it is no longer default starting with .NET9 we might also consider Scalar</li> </ul>"},{"location":"architecture/tools/#benchmark","title":"Benchmark","text":"<ul> <li>BenchmarkDotNet - No experience so far but looks easy to use</li> </ul>"},{"location":"architecture/unit-of-work/","title":"Unit of Work","text":"<ul> <li>EF is already UoW/Repo pattern</li> <li>Entity Framework, not Entity Library<ul> <li>We commit on using a framework. If we build wrappers around it, we lose a lot of it's benefit.</li> <li>Have you ever switch the ORM?</li> </ul> </li> <li>The core argument for using repositories is to prevent leaking EF dependent code into your domain. That argument is not wrong, it just comes with a steep cost, i.e. a high-complexity uow/repo layer, which is now being regarded (by some, at least) as too high a price to pay for what it gives back.</li> <li>uow/repo are an anti-pattern to Entity Framework.</li> <li>uow/repo usually produces a lot of boilerplate and problems even though EF already solved those</li> </ul> <p>Get rid of repo / uow boilderplate <pre><code>// OLD\nusing (var uow = new UnitOfWork())\n{\n    uow.FooRepository.Add(myFoo);\n    uow.BarRepository.Update(myBar);\n    uow.BazRepository.Delete(myBaz);\n\n    uow.Commit();\n}\n</code></pre></p> <pre><code>// NEW\nusing (var db = new MyContext())\n{\n    db.Foos.Add(myFoo);\n    db.Bars.Update(myBar);\n    db.Bazs.Delete(myBaz);\n\n    db.SaveChanges();\n}\n</code></pre>","tags":["Pattern"]},{"location":"architecture/vertical-slice/","title":"Vertical Slice Architecture","text":"<p>aka VSA</p> <p>Organise by use case, not technical responsibility.</p> <p>Minimize coupling between slices, and maximize coupling in a slice.</p> <p>Vertical slice architecture is based around the principle \"things that change together should be near each other\". It applies the Single Responsibility Principle (SRP) and Open-Closed Principle (OCP) which leads to a very high cohesion. Code changes (add, remove, change) often have impact on one (main) slice and helps to guarantee that nothing else breaks.</p> <ul> <li>Vertical slice architecture can be combine with other architectures like Layered or Onion and works very well with the Lightweight Architecture by applying those architectures within a single slice.<ul> <li>Different slices may implement different architectural flavors. </li> </ul> </li> <li>Works well together with a \"task based UI\"</li> <li>Vertical slice architecture has some similarities to CQRS.</li> <li>CQRS is a good pattern to use within VSA (Why? How?)</li> </ul> <p>Consider to take the vertical slice up to the UI. On one view there is one query request performed. The result of the query has all the data necessary for that view. The query should therefore not return an entity but a specific model. In this case, inner classes can be useful.</p> <pre><code>public class Person\n{\n    public int Id { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public List&lt;Order&gt; Orders { get; set; }\n\n    public class Order {\n        public int Id { get; set; }\n        public string Title { get; set; }\n        public string Description { get; set; }\n    }\n}\n</code></pre> <p>A command can be a response of a query. We see this a lot for edit forms where we first request the data (command) and send the same data back after editing</p> <pre><code>public class Edit { \n    public class Query : IRequest&lt;Command&gt; { \n        public int? Id { get; set; } \n    } \n\n    public class Command : IRequest { \n        public int Id { get; set; }\n        public string LastName { get; set; }\n        public string FirstMidName { get; set; }\n        public DateTime? EnrollmentDate { get; set; } \n    }\n}\n</code></pre>","tags":["Architecture"]},{"location":"architecture/vertical-slice/#sharing-code","title":"Sharing Code","text":"<p>Often the question arise about how code can be shared in a VSA. There are multiple approaches to it. First of all we need to ask us why we want to share code before we answer the how. Why: - Cross-cutting-concern: Have a module for it. - Core concern: Have a module for it. - Domain concern: Consider creating a domain module for it. This might slightly break the VSA principles but makes use of domain centric architecture ideologies. - Others: Consider duplication.</p>","tags":["Architecture"]},{"location":"architecture/vertical-slice/#comparison-to-other-architectures","title":"Comparison to other architectures","text":"<p>In other architectures we often see the problem that services for single entities such as a XYService grows to immense size but in the end a GetXY endpoint only relies on the GetXY method of the service which only relies on the GetXY method of the repository and so on. A single change on the repository then leads to an indirect change on all XY features (since XYRepository change -&gt; XYService change -&gt; XYControllers change) and therefore to possible bug in all parts of that feature. This reduces the effort for regression tests.</p>","tags":["Architecture"]},{"location":"architecture/vertical-slice/#layered-incl-onion-clean","title":"Layered (incl. Onion, Clean, ...)","text":"<p>Layered architecture (i.e. Onion) are easy to understand and maintain but impose some rigid constraints on the layers (e.g. which layer can call which other layer). This leads to high coupling inside layers but low coupling between layers. This than leads to more abstractions which means increased complexity. Implementing a feature often leads to making changes in many different layers =&gt; low cohesion. You have to navigate to lots of folders and projects.</p>","tags":["Architecture"]},{"location":"architecture/examples/adr-1-template/","title":"ADR-XXXX: [Decision Title]","text":""},{"location":"architecture/examples/adr-1-template/#status","title":"Status","text":"<p>[Proposed | Accepted | Superseded by ADR-YYYY | Deprecated]</p>"},{"location":"architecture/examples/adr-1-template/#context","title":"Context","text":"<p>Describe the architectural problem or decision that needs to be made. Include:</p> <ul> <li>The current situation</li> <li>The forces at play</li> <li>What constraints exist</li> <li>Why this decision is needed</li> </ul>"},{"location":"architecture/examples/adr-1-template/#decision","title":"Decision","text":"<p>State the architectural decision that was made clearly and concisely.</p>"},{"location":"architecture/examples/adr-1-template/#rationale","title":"Rationale","text":"<p>Explain why this decision was made. Include:</p> <ul> <li>What alternatives were considered</li> <li>Why this option was chosen over others</li> <li>What trade-offs were made</li> <li>What benefits this decision provides</li> </ul>"},{"location":"architecture/examples/adr-1-template/#consequences","title":"Consequences","text":"<p>Describe the consequences of this decision:</p>"},{"location":"architecture/examples/adr-1-template/#positive","title":"Positive","text":"<ul> <li>Benefits gained</li> <li>Problems solved</li> <li>Capabilities enabled</li> </ul>"},{"location":"architecture/examples/adr-1-template/#negative","title":"Negative","text":"<ul> <li>New limitations introduced</li> <li>Complexity added</li> <li>Potential risks</li> </ul>"},{"location":"architecture/examples/adr-1-template/#neutral","title":"Neutral","text":"<ul> <li>Changes that are neither clearly positive nor negative</li> </ul>"},{"location":"architecture/examples/adr-1-template/#implementation-notes","title":"Implementation Notes","text":"<p>Any specific implementation details, patterns, or guidelines that follow from this decision.</p>"},{"location":"architecture/examples/adr-1-template/#related-decisions","title":"Related Decisions","text":"<ul> <li>Links to other ADRs that relate to this decision</li> <li>Dependencies or decisions that this supersedes</li> </ul>"},{"location":"architecture/examples/adr-1-template/#date","title":"Date","text":"<p>YYYY-MM-DD</p>"},{"location":"architecture/examples/adr-2-template/","title":"Title","text":"<p>[date] [status]</p> <p>ADR: A short noun phrase containing the architecture decision</p>"},{"location":"architecture/examples/adr-2-template/#context","title":"Context","text":"<p>In this section of the ADR we will add a short one- or two-sentence description of the problem, and list the alternative solutions.  The issue motivating this decision, and any context that influences or constrains the decision. </p>"},{"location":"architecture/examples/adr-2-template/#decision","title":"Decision","text":"<p>In this section we will state the architecture decision and provide a detailed justification of the decision.  The change that we're proposing or have agreed to implement.\"</p>"},{"location":"architecture/examples/adr-2-template/#consequences","title":"Consequences","text":"<p>In this section of the ADR we will describe any consequences after the decision is applied, and also discuss the trade-offs that were considered. What becomes easier or more difficult to do and any risks introduced by the change that will need to be mitigated.</p>"},{"location":"architecture/examples/system-architecture-template/","title":"System Architecture","text":""},{"location":"architecture/examples/system-architecture-template/#1-overview","title":"1. Overview","text":"<p>...</p>"},{"location":"architecture/examples/system-architecture-template/#2-high-level-system-diagram","title":"2. High-Level System Diagram","text":"<p>TODO: add mermaid diagram here</p>"},{"location":"architecture/examples/system-architecture-template/#3-architecture-style","title":"3. Architecture Style","text":"<p>...</p>"},{"location":"architecture/examples/system-architecture-template/#4-core-concepts","title":"4. Core Concepts","text":"<p>...</p>"},{"location":"architecture/examples/system-architecture-template/#5-codebase-structure","title":"5. Codebase Structure","text":"<pre><code>TODO: explain high level code structure; don't mention individual files\n</code></pre>"},{"location":"architecture/examples/system-architecture-template/#6-communication-patterns","title":"6. Communication Patterns","text":"<p>...</p>"},{"location":"architecture/examples/system-architecture-template/#7-testing-strategy","title":"7. Testing Strategy","text":"<p>...</p>"},{"location":"architecture/examples/system-architecture-template/#8-cross-cutting-concerns","title":"8. Cross-Cutting Concerns","text":""},{"location":"architecture/examples/system-architecture-template/#logging","title":"Logging","text":"<ul> <li>...</li> </ul>"},{"location":"architecture/examples/system-architecture-template/#configuration","title":"Configuration","text":"<ul> <li>...</li> </ul>"},{"location":"architecture/examples/system-architecture-template/#security","title":"Security","text":"<ul> <li>...</li> </ul>"},{"location":"architecture/examples/system-architecture-template/#performance","title":"Performance","text":"<ul> <li>...</li> </ul>"},{"location":"architecture/examples/system-architecture-template/#9-deployment-architecture","title":"9. Deployment Architecture","text":"<p>...</p>"},{"location":"architecture/examples/system-architecture-template/#10-known-tradeoffs-limitations","title":"10. Known Tradeoffs / Limitations","text":"<p>...</p>"},{"location":"architecture/examples/system-architecture-template/#11-related-documents","title":"11. Related Documents","text":"<ul> <li><code>justfile</code> \u2014 command runner for build, test, format</li> <li>...</li> </ul>"},{"location":"backend/async/","title":"Async","text":""},{"location":"backend/async/#example","title":"Example","text":"<p>If you have code like this:</p> <pre><code>Task&lt;Toast&gt; toastTask = this.StartToasterAsync();\nToast toast = await Task.FromResult(toastTask.Result);\n</code></pre> <p>This workflow is completely wrong.\u00a0Let's translate it into English. Here's my to-do list for today:</p> <ul> <li>Put some bread in the toaster.</li> <li>While the bread is toasting I could be doing other work, but instead,\u00a0stare at the toaster doing nothing else until it is done.</li> <li>Get the toast from the toaster, and start a new to-do list.</li> <li>The new to-do list is:\u00a0Obtain the piece of toast that I am now holding.</li> <li>Execute that to-do list. While I'm waiting for the to-do list to complete, go do other work,\u00a0but the to-do list is always already complete because the job is to obtain a result that I have already obtained. So don't do other work. Just check that yes, I am in fact holding the piece of toast I just wrote a to-do list about.</li> <li>Now I have a piece of toast.</li> </ul> <p>This workflow is an insane way to make toast. It works -- you end up with a piece of toast at the end -- but no sensible person would do this, and you should not write the equivalent computer program:</p> <ul> <li>It is an \"asynchronous\" workflow where\u00a0every possible asynchronous advantage has been removed.</li> <li>The first step -- waiting for the toaster to pop -- has been synchronously waited.</li> <li>The second step -- asynchronously wait for a task that has already completed -- is never asynchronous!</li> </ul> <p>Never never never write asynchronous code this way.</p> <p>The right workflow for making a piece of toast is:</p> <ul> <li>Put the bread in the toaster and start it toasting.</li> <li>Do other work until the toast pops.</li> <li>Fetch the toast.</li> </ul> <p>And as we'd expect, the correct way to write your program is much simpler:</p> <pre><code>Toast toast = await this.StartToasterAsync(...);\n</code></pre>"},{"location":"backend/build-versions/","title":"Assemebly","text":"<p>We can store a GIT version hash or a time stamp in the assembly during build time and read the data later at runtime.</p> <p>Example: <pre><code>&lt;!-- *.csproj --&gt;\n&lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt;\n    &lt;Target Name=\"SetSourceRevisionId\" BeforeTargets=\"InitializeSourceControlInformation\"&gt;\n        &lt;Exec Command=\"git describe --long --always\" ConsoleToMSBuild=\"True\" IgnoreExitCode=\"False\"&gt;\n            &lt;Output PropertyName=\"SourceRevisionId\" TaskParameter=\"ConsoleOutput\" /&gt;\n        &lt;/Exec&gt;\n        &lt;ItemGroup&gt;\n            &lt;!-- e.g. store in existing metadata --&gt;\n            &lt;AssemblyMetadata Include=\"SourceRevisionId\" Value=\"$(SourceRevisionId)\" /&gt;\n            &lt;!-- or store in custom attribute --&gt;\n            &lt;AssemblyAttribute Include=\"My.Namespace.MyGitHashAttribute\"&gt;\n                &lt;_Parameter1&gt;$(SourceRevisionId)&lt;/_Parameter1&gt;\n            &lt;/AssemblyAttribute&gt;\n            &lt;!-- Also possible with timestamp --&gt;  \n            &lt;AssemblyMetadata Include=\"BuiltAt\" Value=\"$([System.DateTime]::UtcNow.ToString('yyyy-MM-dd HH:mm:ss'))\" /&gt;\n            &lt;/AssemblyAttribute&gt;\n        &lt;/ItemGroup&gt;\n    &lt;/Target&gt;       \n&lt;/Project&gt;\n</code></pre></p> <p>This data get stored in the build assembly. e.g: <pre><code>// ...\nusing System;\nusing System.Reflection;\n\n// Metadata\n[assembly: System.Reflection.AssemblyMetadata(\"SourceRevisionId\", \"someHash\")]\n// Custome attribute\n[assembly: My.Namespace.MyGitHashAttribute(\"someHash\")]\n// Timestamp\n[assembly: BuildDateAttribute(\"20230330140538\")]\n// We could also use the existing one\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+someHash\")]\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"MyApp\")]\n// ...\n// Generated by the MSBuild WriteCodeFragment class.\n</code></pre></p> <p>We can then read it from the assembly during runtime. <pre><code>// define custom attribute if chosen that way\npublic class MyGitHashAttribute : Attribute \n{\n    public string Hash { get; }\n\n    public GitHashAttribute(string hash)\n    {\n        Hash = hash;\n    }\n}\n\n// usage at runtime\nvar hash1 = Assembly.GetEntryAssembly().GetCustomAttributes&lt;AssemblyMetadataAttribute&gt;.FirstOrDefault().Value;\nvar hash2 = Assembly.GetEntryAssembly().GetCustomAttribute&lt;MyGitHashAttribute&gt;().Hash;\nvar hash3 = Assembly.GetEntryAssembly().GetCustomAttribute&lt;BuildDateAttribute&gt;().Date;\n</code></pre></p>","tags":["dotNet"]},{"location":"backend/const-static-readonly/","title":"Const vs Static vs Readonly","text":"<p>Here's what you need to know about using <code>const</code>, <code>static</code>, and <code>readonly</code>:</p> <ol> <li>If you know the value will never, ever, ever change for any reason, use <code>const</code>. (Other Assemblies that use this value need to be recompiled before they get the new value)</li> <li>If you're unsure of whether or not the value will change, but you don't want other classes or code to be able to change it, use <code>readonly</code>.</li> <li>If you need a field to be a property of a type, and not a property of an instance of that type, use <code>static</code>.</li> <li>A <code>const</code> value is also implicitly <code>static</code>.</li> </ol>","tags":["dotNet"]},{"location":"backend/entity-framework/","title":"Entity Framework","text":"","tags":["dotNet","Database","best-practice","entity-framework"]},{"location":"backend/entity-framework/#best-practices","title":"Best Practices","text":"<ul> <li>Use <code>Select</code> to load less data from the DB <pre><code>// \u274c Bad Example -&gt; Loads all user data from DB\nvar user = users.SingleOrDefault(u =&gt; u.Id == request.Id);\nvar dto = user.Select(u =&gt; new UserDto(u.FirstName));\n\n// \u2705 Good Example -&gt; Loads only FirstName from DB\nusers.Select(u =&gt; new UserDto(u.FirstName))\n    .SingleOrDefault(u =&gt; u.Id == request.Id);\n</code></pre></li> <li>Prevent a \u00a0cartesian explosion by using <code>SplitQuery</code> in cases where we have a lot of data getting joined. This reduces the data loaded but has some overhead and should therefore only be used when we expect to have a lot of DB in the table. <pre><code>// \u274c Bad Example -&gt; Loads a blog multiple times (once for each post)\nvar blogs = context.Blogs\n    .Include(blog =&gt; blog.Posts)\n    .ToList();\n\n// \u2705 Good Example -&gt; Loads The blog post only once\nvar blogs = context.Blogs\n    .Include(blog =&gt; blog.Posts)\n    .AsSplitQuery() // &lt;== \ud83d\udc41\ufe0f\n    .ToList();\n</code></pre></li> <li>````</li> </ul>","tags":["dotNet","Database","best-practice","entity-framework"]},{"location":"backend/enum-handling/","title":"Enum Handling","text":"","tags":["dotNet"]},{"location":"backend/enum-handling/#enum-grouping","title":"Enum grouping","text":"<p>For groupings in enums use custom attributes and do some (slightly sophisticated) mapping when providing to the frontend.</p> <p>Example: <pre><code>public enum WorkGroup\n{\n    Publications = 0,\n    Conference = 1,\n}\n\npublic enum WorkType\n{\n   [WorkGroup(WorkGroup.Publications)]\n   Book = 0,  \n\n   [WorkGroup(WorkGroup.Conference)]\n   ConferencePaper = 1,\n}\n\npublic class WorkGroupAttribute : Attribute { /* .. store workgroup in property */ }\n\npublic class WorkGroupDto\n{\n    public WorkGroup WorkGroup { get; set; }\n    public List&lt;WorkType&gt; WorkTypes { get; set; }\n}\n\n// Controller Action\n// Create a Dto by using reflection which works on the Attribute\nWorkGroupHelper.ToDto();\n</code></pre></p> <p>## Enum Class</p> <p>Doesn't work well with EF.</p> <p><pre><code>public abstract class Enumeration : IComparable\n{\n    public string Name { get; private set; }\n    public int Id { get; private set; }\n\n    protected Enumeration(int id, string name) =&gt; (Id, Name) = (id, name);\n\n    // Utility methods ...\n\n    // public override string ToString() =&gt; Name;\n    // public static IEnumerable&lt;T&gt; GetAll&lt;T&gt;() where T : Enumeration { /* .. code */ }\n    // public override bool Equals(object obj) { /* .. code */ }\n    // public int CompareTo(object other) =&gt; Id.CompareTo(((Enumeration)other).Id);\n    // ...\n} \n\npublic class CardType : Enumeration\n{\n    public static CardType Visa = new(1, nameof(Visa));\n    public static CardType MasterCard = new(2, nameof(MasterCard));\n\n    public CardType(int id, string name) : base(id, name) { }\n}\n</code></pre> See: Microsoft: enum class over enum type</p>","tags":["dotNet"]},{"location":"backend/functional-approach/","title":"Functional approach","text":"<p>Can improve:</p> <ul> <li>Predictability</li> <li>Maintainability</li> <li>Testability</li> </ul>","tags":["dotNet","Functional"]},{"location":"backend/functional-approach/#taming-side-effects","title":"Taming side effects","text":"<p>Side effects make the code more difficult to test and reason about</p> <p>We can reduce side effects by enforcing immutability </p> <pre><code>public class NoSideEffects {\n\n    // no setter =&gt; value cannot change\n    public int Result { get; }\n\n    constructor(int value) \n    {\n        Result = value;\n    }\n\n    public NoSideEffects Add(int value)\n    {\n        // return a new object to prevent side effects\n        return new NoSideEffects(Result + value);\n    }\n}\n</code></pre>","tags":["dotNet","Functional"]},{"location":"backend/functional-approach/#emphasizing-expressions","title":"Emphasizing expressions","text":"<p>Can simplify code by always returning a value</p> <p>Allows piping by method chaining</p>","tags":["dotNet","Functional"]},{"location":"backend/functional-approach/#statements","title":"Statements","text":"<p>Have side effects</p> <pre><code>string result;\n\nif(number &gt;= 0)\n{\n    result = \"positiv\"\n}\nelse \n{\n    result = \"negative\"\n}\n</code></pre>","tags":["dotNet","Functional"]},{"location":"backend/functional-approach/#expressions","title":"Expressions","text":"<p>Always return a value and have not side effects</p> <p>Expressions can be called once or any number of times and they will produce the same result, for a given input.</p> <p>Expressions are easier to test</p> <pre><code>var result = number &gt;= 0 ? \"positiv\" : \"negative\"\n</code></pre>","tags":["dotNet","Functional"]},{"location":"backend/functional-approach/#expression-methods","title":"Expression Methods","text":"<pre><code>public static partial class FuncExtensions\n{\n    public static TResult Map&lt;T, TResult&gt;(this T value, Func&lt;T, TResult&gt; function) =&gt;\n        function(value);\n}\n\npublic static partial class ActionExtensions\n{\n    public static void Do&lt;T&gt;(this T value, Action&lt;T&gt; function) =&gt;\n        function(value);\n}\n\ninternal static void Calculate()\n{\n    \"-2\".Map(int.Parse) // string -&gt; int\n        .Map(Math.Abs) // int -&gt; int\n        .Map(Convert.ToDouble) // int -&gt; double\n        .Map(Math.Sqrt) // double -&gt; double\n        .Do(Console.WriteLine); // double -&gt; void\n\n    // Equivalent to:\n    Console.WriteLine(Math.Sqrt(Convert.ToDouble(Math.Abs(int.Parse(\"-2\")))));\n\n    // or\n    string input = \"-2.0\";\n    int output1 = int.Parse(input); // string -&gt; int\n    int output2 = Math.Abs(output1); // int -&gt; int\n    double output3 = Convert.ToDouble(output2); // int -&gt; double\n    double output4 = Math.Sqrt(output3); // double -&gt; double\n    Console.WriteLine(output4); // double -&gt; void\n}\n</code></pre>","tags":["dotNet","Functional"]},{"location":"backend/record-types/","title":"Record types","text":"<p>Can your data type be a value type? Go with <code>struct</code>. No? Does your type describe a value-like, preferably immutable state and is used in unidirectional (one way) flow? Go with <code>record</code>.</p> <p>Use <code>class</code> otherwise. So...</p> <ol> <li>Yes, use <code>record</code>s for your DTOs if it is one way flow.</li> <li>Yes, immutable request bindings are an ideal user case for a <code>record</code></li> </ol> <pre><code>public record MyDto(string FirstName, string LastName) : IMyBase;\n</code></pre>","tags":["dotNet"]},{"location":"cloud/azure-functions/","title":"Azure functions","text":"<p>Azure Functions aka Az functions</p>","tags":["Azure","Cloud"]},{"location":"cloud/azure-functions/#notes","title":"Notes","text":"<ul> <li>Azure functions getting migrated to isolated worker model. Do not use in-process anymore.</li> <li>Isolated worker model uses a default logging filter to only log warnings and higher log-levels via <code>ILogger</code>. This filter can be disabled (see: Azure function - Start-up and configuration</li> <li>Logging config can be done in <code>host.json</code> for the functions host process or in <code>application.json</code> for the worker process.</li> <li>Timer based trigger uses NCrontab expressions (instead of normal cron expression) which uses 6 instead of 5 values (including seconds). This site can help defining cron timers: https://ncrontab.swimburger.net</li> <li>Local Az function testing / running<ul> <li>Ensure that <code>local.settings.json</code> exists (this does usually not get checked in by default) (see below). </li> <li>An azure storage is needed. Simplest solution is to use Docker for it. Otherwise an emulator will do. See: https://learn.microsoft.com/en-us/azure/storage/common/storage-use-azurite</li> <li><code>RunOnStartup</code> - use this to immediately trigger the function. This can also be placed in a \"Debug only\" block (see below).</li> </ul> </li> </ul> <pre><code>{ //  example: local.settings.json\n    \"IsEncrypted\": false,\n    \"Values\": {\n        \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n        \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet-isolated\"\n}  \n</code></pre> <pre><code>// example for RunOnStartup only in debug\npublic async Task Run(\n    [TimerTrigger(\"0 15/30 9-20 * 5-9 *\"\n#if DEBUG\n    , RunOnStartup=true\n#endif\n    )] TimerInfo myTimer)\n</code></pre>","tags":["Azure","Cloud"]},{"location":"cloud/azure-services/","title":"Azure Services","text":"","tags":["Azure","Serverless"]},{"location":"cloud/azure-services/#azure-functions-vs-azure-logic-apps","title":"Azure Functions vs Azure Logic Apps","text":"<p>Azure Functions is a serverless compute service.</p> <p>Azure Logic Apps provides serverless workflows.</p> <p>Both can create complex orchestrations. </p> <p>When dealing with synchronous request/response calls, that execute more complex logic, Azure Functions is the preferred option. Logic Apps is better suited for asynchronous integration and fire-and-forget messaging that requires reliable processing. When using Logic Apps, they can be perfectly extended with Azure Functions to execute stateless tasks that cannot be fulfilled by the out-of-the-box Logic Apps capabilities.</p> Durable Functions Logic Apps Development Code-first (imperative) Designer-first (declarative) Connectivity About a dozen built-in binding types, write code for custom bindings Large collection of connectors, Enterprise Integration Pack for B2B scenarios, build custom connectors Actions Each activity is an Azure function; write code for activity functions Large collection of ready-made actions Monitoring Azure Application Insights Azure portal, Azure Monitor logs Management REST API, Visual Studio Azure portal, REST API, PowerShell, Visual Studio Execution context Can run locally or in the cloud Runs only in the cloud","tags":["Azure","Serverless"]},{"location":"cloud/logging/","title":"App Insights","text":"<p>AppInsights uses the SQL like KQL (Kusto Query Language). Microsoft has a nice SQL to KQL cheat sheet: https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/sqlcheatsheet</p>","tags":["Azure","Logging","KQL","SPL"]},{"location":"cloud/logging/#example-snippets","title":"Example Snippets","text":"<p>Some examples that helped me in the past.</p> <pre><code>// counts of a unique sessions who saw the \"login-failed\" page\npageViews \n| where name contains \"login-failed\"\n| summarize failed_page_viewed = sum(itemCount) by session_Id\n</code></pre> <pre><code>// everything we find for a sepcific session where the severity is &gt; 1\nunion *\n| where session_Id == \"RHiMNyqmN77t2WWCiAxdvf\"\n| where severityLevel &gt; 1\n| order by timestamp desc \n</code></pre> <pre><code>// A timechart of how often the \"login-failed\" page was viewed per day\npageViews \n| where name contains \"login-failed\"\n| summarize count() by bin(timestamp, 1d) \n| order by timestamp desc \n| render timechart  \n</code></pre> <pre><code>// Read everything where the session_Id matches a session_Id who visited the \"login-failed\" page\nunion *\n| where session_Id in (toscalar(\n    pageViews\n    | where name contains \"login-failed\"\n    | summarize makeset(session_Id)\n    ))\n| order by timestamp desc \n</code></pre> <pre><code>// Failed request grouped by HttpStatusCode displayed with columns per day\nrequests\n| where success == false\n| summarize count() by resultCode, bin(timestamp, 1d) \n| order by timestamp desc \n| render columnchart  \n</code></pre>","tags":["Azure","Logging","KQL","SPL"]},{"location":"cloud/logging/#splunk","title":"Splunk","text":"<p>Splunk uses SPL ((Splunk) search processing language) which is similar to KQL. </p>","tags":["Azure","Logging","KQL","SPL"]},{"location":"cloud/logging/#example-snippets_1","title":"Example Snippets","text":"<p>use triple escape for quotes: <pre><code>\\\\\\\"sustainabilityProfile\\\\\\\":\\\\\\\"NOT_RELEVANT\\\\\\\"\n</code></pre></p> <pre><code>// extract a json value based on it's key, select only non-empty values and display a unique list of found values\napp=SomeApp\n| rex field Message \"\\\"someJsonKey\\\": \\\"(?&lt;myValue&gt;.*)\\\",\"\n| search myValue!=\"\"\n| stats values(myValue) as unique_myValues\n</code></pre> <p>https://google.com</p>","tags":["Azure","Logging","KQL","SPL"]},{"location":"container/","title":"Containerization","text":"<p>Docker is used to package and ship the app, whereas, Kubernetes deploys and scales the app, and OpenShift provides an additional layer of management and automation on top of Kubernetes, enhancing its features and simplifying its use.</p> <ul> <li>Different services in an app have different requirements, dependencies, libraries, ... A specific environment is therefore needed. This can be achieved by using a VM but it might be difficult to set it up to fulfill all those different requirements. Containers allow to setup an optimized environment for each part of the application.</li> <li>Container use less resources and are generally faster and more efficient than VMs. This is because VMs simulate the hardware and each VM is running its own OS. Containers only virtualize the OS.</li> <li>If we want to scale our application individually (e.g. different services) we would need to create multiple VMs (which generally take more resources than containers). With a container setup we can easily scale individually.</li> </ul> <p>3 Step process</p> <ol> <li>manifest (container description) (e.g. a docker file). <ul> <li>This is used to create the image.</li> </ul> </li> <li>image<ul> <li>a snapshot of the software with all the dependencies needed to run it (incl. OS).</li> <li>executable software</li> </ul> </li> <li>(actual) container<ul> <li>actual running software</li> </ul> </li> </ol>","tags":["container"]},{"location":"container/#docker","title":"Docker","text":"<p>Docker is a containerization platform that allows developers to build and run applications in isolated containers with all their dependencies</p> <p>see: docker-cheat-sheet</p>","tags":["container"]},{"location":"container/#docker-vs-docker-compose","title":"docker vs docker-compose","text":"<p>The\u00a0<code>docker</code>\u00a0cli is used when managing individual containers on a docker engine. It is the client command line to access the docker daemon api.</p> <p>The\u00a0<code>docker-compose</code>\u00a0cli can be used to manage a multi-container application. It also moves many of the options you would enter on the\u00a0<code>docker run</code>\u00a0cli into the\u00a0<code>docker-compose.yml</code>\u00a0file for easier reuse. It works as a front end \"script\" on top of the same docker api used by\u00a0<code>docker</code>, so you can do everything\u00a0<code>docker-compose</code>\u00a0does with\u00a0<code>docker</code>\u00a0commands and a lot of shell scripting. See\u00a0this documentation on docker-compose\u00a0for more details.</p>","tags":["container"]},{"location":"container/#volumes","title":"Volumes","text":"<p>Docker usually persists data within a container and survives container stops (<code>docker stop</code>)\u00a0and starts (<code>docker start</code>). However, if a container gets removed\u00a0(<code>docker rm</code>), everything in the container is deleted. This can be prevented by making use of data volumes\u00a0which persist data even if the associated containers are deleted. Data can be mapped to either a host directory (e.g. <code>C:\\SQL</code>) or a data volume container.</p>","tags":["container"]},{"location":"container/#kubernetes-k8s","title":"Kubernetes (k8s)","text":"<p>Kubernetes is a platform that orchestrates containers from different runtimes, including Docker, across a cluster of servers, providing features like load balancing, self-healing, and automated rollouts.</p> <p>Kubernetes adds the ability to orchestrate Docker containers across multi-host installations.</p>","tags":["container"]},{"location":"container/#openshift-os","title":"OpenShift (OS)","text":"<p>Platform as a Service</p> <p>An abstraction layer above Kubernetes which makes the task (like deploying) a bit easier to handle. OpenShift uses an opinionated stack compared to Kubernetes which you have (can) decide yourself.</p>","tags":["container"]},{"location":"container/#how-openshift-works","title":"How OpenShift works","text":"<p>Can be hooked to a source control (e.g. git). After a commit it trigger Jenkins to build a docker image out of the code and publishes to a registry. Afterwards it gets pushed into a Kubernetes cluster.</p>","tags":["container"]},{"location":"container/docker-cheat-sheet/","title":"Docker-Cheat-Sheet","text":"<p>Following summary was generated by ChatGPT based on a conversation I had with it.</p>"},{"location":"container/docker-cheat-sheet/#1-docker-images-and-tags","title":"1. Docker Images and Tags","text":"<ul> <li>Default Tag (<code>latest</code>):</li> <li>If no tag is specified during a build, Docker assigns the <code>latest</code> tag by default.</li> <li> <p>Example: <code>docker build -t myapp .</code> creates <code>myapp:latest</code>.</p> </li> <li> <p>Versioned Tags:</p> </li> <li>Use versioned tags (e.g., <code>myapp:1.0</code>) to track changes and ensure reproducibility.</li> <li> <p>Example: <code>docker build -t myapp:1.0 .</code>.</p> </li> <li> <p>Best Practices:</p> </li> <li>Use semantic versioning (e.g., <code>1.0.0</code>, <code>1.1.0</code>).</li> <li>Optionally maintain a <code>latest</code> tag for the most recent version.</li> <li> <p>Automate tagging in CI/CD pipelines using build numbers, commit hashes, or timestamps.</p> </li> <li> <p>Cleaning Up Images:</p> </li> <li>Remove dangling (unused) images: <code>docker image prune</code>.</li> <li>Remove all unused images: <code>docker image prune -a</code>.</li> </ul>"},{"location":"container/docker-cheat-sheet/#2-docker-containers","title":"2. Docker Containers","text":"<ul> <li>Lifecycle:</li> <li>Containers are ephemeral; any data stored inside a container is lost when it is removed.</li> <li> <p>Use volumes or bind mounts to persist data beyond the container lifecycle.</p> </li> <li> <p>Recreating Containers:</p> </li> <li>Containers must be removed before being recreated.</li> <li> <p>Use <code>docker-compose down</code> followed by <code>docker-compose up</code> to safely recreate containers.</p> </li> <li> <p>Inspecting Containers:</p> </li> <li>Use <code>docker ps</code> to list running containers.</li> <li>Use <code>docker inspect &lt;container_id&gt;</code> to view detailed container information.</li> </ul>"},{"location":"container/docker-cheat-sheet/#3-docker-volumes","title":"3. Docker Volumes","text":"<ul> <li>Purpose:</li> <li>Volumes persist data independently of the container lifecycle.</li> <li> <p>Ideal for databases, file storage, or any data that must survive container recreation.</p> </li> <li> <p>Using Volumes:</p> </li> <li>Define volumes in <code>docker-compose.yml</code>: <pre><code>volumes:\n  my-volume:\nservices:\n  my-service:\n    volumes:\n      - my-volume:/path/in/container\n</code></pre></li> <li>List volumes: <code>docker volume ls</code>.</li> <li> <p>Remove unused volumes: <code>docker volume prune</code>.</p> </li> <li> <p>Bind Mounts:</p> </li> <li>Use bind mounts to map a host directory to a container path: <pre><code>volumes:\n  - ./data:/path/in/container\n</code></pre></li> </ul>"},{"location":"container/docker-cheat-sheet/#4-docker-compose","title":"4. Docker Compose","text":"<ul> <li>Service Configuration:</li> <li> <p>Define services in <code>docker-compose.yml</code> with <code>image</code>, <code>build</code>, <code>ports</code>, and <code>volumes</code>: <pre><code>services:\n  my-service:\n    image: myapp:1.0\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - my-volume:/data\n</code></pre></p> </li> <li> <p>Ports:</p> </li> <li>Use the <code>ports</code> directive to map container ports to host ports: <pre><code>ports:\n  - \"8080:8080\" # Host:Container\n</code></pre></li> <li> <p>Avoid port conflicts by assigning unique host ports for each service.</p> </li> <li> <p>Rebuilding Services:</p> </li> <li>Force a rebuild of images: <code>docker-compose up --build</code>.</li> <li>Pull updated images: <code>docker-compose pull</code>.</li> </ul>"},{"location":"container/docker-cheat-sheet/#5-dockerfile","title":"5. Dockerfile","text":"<ul> <li>EXPOSE Directive:</li> <li>Documents the ports the container listens on but does not map them to the host.</li> <li> <p>Example: <pre><code>EXPOSE 8080\n</code></pre></p> </li> <li> <p>Best Practices:</p> </li> <li>Use multi-stage builds to reduce image size: <pre><code>FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build\nRUN dotnet build\nFROM mcr.microsoft.com/dotnet/aspnet:9.0 AS runtime\nCOPY --from=build /app /app\n</code></pre></li> <li>Keep the <code>Dockerfile</code> clean and modular.</li> </ul>"},{"location":"container/docker-cheat-sheet/#6-cleaning-up-docker-resources","title":"6. Cleaning Up Docker Resources","text":"<ul> <li>Images:</li> <li>Remove unused images: <code>docker image prune</code>.</li> <li> <p>Remove specific images: <code>docker rmi &lt;image_id&gt;</code>.</p> </li> <li> <p>Containers:</p> </li> <li> <p>Stop and remove containers: <code>docker rm -f &lt;container_id&gt;</code>.</p> </li> <li> <p>Volumes:</p> </li> <li> <p>Remove unused volumes: <code>docker volume prune</code>.</p> </li> <li> <p>Networks:</p> </li> <li>Remove unused networks: <code>docker network prune</code>.</li> </ul>"},{"location":"container/docker-cheat-sheet/#7-debugging-and-verification","title":"7. Debugging and Verification","text":"<ul> <li>Inspect Running Containers:</li> <li>Use <code>docker ps</code> to list running containers.</li> <li> <p>Use <code>docker logs &lt;container_id&gt;</code> to view logs.</p> </li> <li> <p>Verify Ports:</p> </li> <li>Check mapped ports in <code>docker-compose.yml</code> or with <code>docker ps</code>.</li> <li> <p>Avoid conflicts by assigning unique host ports.</p> </li> <li> <p>Test Changes:</p> </li> <li>Add unique log messages or version numbers to verify the latest image is running.</li> </ul>"},{"location":"container/docker-cheat-sheet/#8-automating-with-cicd","title":"8. Automating with CI/CD","text":"<ul> <li>Automate builds and tagging: <pre><code>docker build -t myapp:$(git rev-parse --short HEAD) .\n</code></pre></li> <li>Push images to a registry (e.g., Docker Hub, Azure Container Registry): <pre><code>docker push myapp:1.0\n</code></pre></li> </ul>"},{"location":"frontend/a11y/","title":"Accessibility","text":"","tags":["frontend","a11y"]},{"location":"frontend/a11y/#quick-wins","title":"Quick wins","text":"<ul> <li>Good Contrast<ul> <li>minimum contrast ratio of 4.5:1 or enhanced contrast of 7:1</li> </ul> </li> <li>Alt text for images</li> <li>Aria-Label for (empty) links<ul> <li>Links containing no text (e.g. Icon Links) need a description (e.g. aria-label)</li> </ul> </li> <li>Labels for input fields</li> <li>Aria-Label for (empty) buttons<ul> <li>Buttons containing no text (e.g. Icon Button) need a description (e.g. aria-label)</li> </ul> </li> <li>HTML document language <pre><code>&lt;html lang=\"es\"&gt;&lt;!--document head and body--&gt;&lt;/html&gt; \n</code></pre></li> </ul>","tags":["frontend","a11y"]},{"location":"frontend/atomic-design/","title":"Atomic Design","text":"<p>Atomic Design is a methodology introduced for designing and organizing UI components in a modular and scalable way. It breaks down user interfaces into five hierarchical levels:</p> <ol> <li>Atoms \u2013 Basic building blocks (e.g., buttons, inputs, labels, icons).</li> <li>Molecules \u2013 Small reusable UI combinations of atoms (e.g., a search bar consisting of an input field and a button).</li> <li>Organisms \u2013 More complex UI sections composed of molecules and/or atoms (e.g., a navigation bar or a card component).</li> <li>Templates \u2013 Page-level structures defining content layout, using organisms but without real data (e.g., a dashboard layout).</li> <li>Pages \u2013 Fully realized screens with real data and user-specific content.</li> </ol>","tags":["frontend","design","Architecture","Modular"]},{"location":"frontend/best-practices/","title":"Best Practices","text":""},{"location":"frontend/best-practices/#angular","title":"Angular","text":"<p>Avoid myfunc.bind(this) in HTML-Template. Why? It creates a new function for every rendering.  </p> <p>Do minimize the use of functions in HTML-Template. Why? They get  executed for every rendering.</p> <p>Do replace functions in template with (pure) pipes. Why? Function calls made from a template are invoked every time a change occures (no caching) =&gt; getting called very often. Why? Pipes are only called when inputs (to pipe function) are changed. Consider Using Memo Decorator (npm package) to cache pipe outputs.</p> <p>Do use trackBy along with ngFor. Why? When an array changes, Angular re-renders the whole DOM tree. But when you use trackBy, Angular will know which element has changed and will only make DOM changes only for that element.  </p> <p>Do use aliases for importing modules or libraries.</p> <p>Do use async-pipe in view and pass value to action instead of directly working on the stream within the action.</p>"},{"location":"frontend/best-practices/#typescript","title":"Typescript","text":"<p>Avoid using any. Why? It creates enormous bug opportunity.</p> <p>Do define DTOs as interfaces instead of classes. Why? A class generates code since it is primarily syntactical sugar over JavaScript\u2019s existing prototype-based inheritance.  Why? An interface does not generate code since it is a virtual structures that only exist within the context of TypeScript.  </p>"},{"location":"frontend/best-practices/#rxjs","title":"rxjs","text":"<p>Do use Marble Diagrams to understand rxjs (e.g. https://rxmarbles.com/, https://rxjs-dev.firebaseapp.com/api).</p> <p>Do unsubscribe from observables (e.g. by calling unsubscribe(), using an operator that completes the stream, using the async pipe). Why? It prevents memory leak.</p> <p>Do use async pipe. Why? It simplifies code by automatically un-/subscribing from the observable. Why? It allows OnPush change detection strategy. Consider *ngIf \u201cas\u201d or hot observables to prevent multiple execution of observables.</p> <p>Avoid nested subscriptions. Why?  It makes the code unreadable, complex, and introduces side effects.</p> <p>Avoid logic inside the subscribe function. Why? The reactive workflow and its benefits ends by subscribing to an Observable.</p> <p>Do pass values to components and services instead of observables. Why? It reduces coupling. Why? It prevents unwanted side-effects.</p>"},{"location":"frontend/blazor/","title":"Blazor","text":"","tags":["dotNet","blazor","frontend"]},{"location":"frontend/blazor/#render-modes-since-net-8","title":"Render modes (since .NET 8)","text":"<ul> <li>Static server-side: The component is rendered on the server and returned as HTML. This mode is fast and simple, but does not support interactivity.</li> <li>Interactive server: The component is rendered on the server and updated via a SignalR connection. This mode supports interactivity, but has some latency and scalability issues.</li> <li>Interactive WASM: The component is rendered on the browser using WebAssembly. This mode supports interactivity and offline scenarios, but has a larger payload size and slower startup time.</li> <li>Interactive auto: The component is rendered on the server first, then switched to WebAssembly on the browser. This mode combines the benefits of both modes, but requires some extra configuration and testing.</li> </ul>","tags":["dotNet","blazor","frontend"]},{"location":"frontend/buttons-vs-links/","title":"Button vs. Links","text":"<p>A button does something; a link goes somewhere.</p>","tags":["frontend"]},{"location":"frontend/css/","title":"px, em, rem?","text":"<p>Use <code>em</code> only for sizing that needs to scale based on the font size of an element other than the html (root) element.</p> <p>Use <code>rem</code> unit for elements that scale depending on a user's browser font size settings. Use <code>rem</code> as the unit for most of your property value.</p> <p>For complex layout arrangement, use percentage (<code>%</code>).</p> <p>User can change the font-size within the browser setting (difficult to find). This has no effect if <code>px</code> are used (main reason to discard <code>px</code>?)</p> <ul> <li>Pixels are ignorant, don\u2019t use them. ?</li> <li>Use <code>rem</code> for sizes and spacing.</li> <li><code>rem</code> and <code>em</code> units are computed into pixel values by the browser, based on font sizes in your design.</li> <li><code>em</code> units are based on the font size of the element they\u2019re used on.</li> <li><code>rem</code> units are based on the font size of the html element.</li> <li><code>em</code> units can be influenced by font size inheritance from any parent element</li> <li><code>rem</code> units can be influenced by font size inheritance from browser font settings.</li> <li>Use <code>em</code> units for sizing that should scale depending on the font size of an element other than the root.</li> <li>Use <code>rem</code> units for sizing that doesn\u2019t need <code>em</code> units, and that should scale depending on browser font size settings.</li> <li>Use <code>rem</code> units unless you\u2019re sure you need <code>em</code> units, including on font sizes.</li> <li>Use <code>rem</code>? <code>em</code>? units on media queries. Found both as best practices (<code>em</code> seems also to work with safari)</li> <li>Don\u2019t use <code>em</code> or <code>rem</code> in multi column layout widths - use % instead.</li> <li>Don\u2019t use <code>em</code> or <code>rem</code> if scaling would unavoidably cause a layout element to break.</li> </ul>"},{"location":"frontend/css/#tip","title":"Tip","text":"<p>When creating layouts it\u2019s often easier to think in pixels but output in <code>rem</code> units.</p> <p>You can have pixel to <code>rem</code> calculations done automatically via a preprocessor like Stylus / Sass / Less, or a postprocessor like PostCSS with the PXtoRem plugin.</p> <p>Use <code>%</code> for font-size</p>"},{"location":"frontend/css/#tailwind","title":"Tailwind","text":"<p>Do not use <code>@apply</code>\u00a0just to make things look \u201ccleaner\u201d.</p> <p>If you\u2019re going to use\u00a0<code>@apply</code>, use it for very small, highly reusable things like buttons and form controls \u2014 and even then only if you\u2019re not using a framework like React where a component would be a better choice.</p>"},{"location":"frontend/html5/","title":"HTML5","text":""},{"location":"frontend/misc/","title":"Misc","text":"<p>measure npm command</p> <pre><code>Measure-Command { start-process npm 'ng lint' -wait}\n</code></pre>"},{"location":"frontend/snippets/","title":"Some useful code snippets","text":"","tags":["frontend"]},{"location":"frontend/snippets/#js","title":"JS","text":"js - nameof <pre><code>// very simple nameof version to ensure type safety. usage: nameof&lt;User&gt;(\u2018name\u2019)\nexport function nameof&lt;T&gt;(key: keyof T, instance?: T): keyof T {\n  return key;\n}\n</code></pre> js - guid <pre><code>export function guid() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n\n  return s4() + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + s4() + s4();\n}\n</code></pre>","tags":["frontend"]},{"location":"frontend/snippets/#rxjs","title":"rxjs","text":"rxjs - unsubscribe on destroy  ![unsubscribe on destroy](../assets/on-destroy.png \"unsubscribe on destroy\")   rxjs - untilDestroy - operator <pre><code>import { MonoTypeOperatorFunction, Observable } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\n// create a symbol identify the observable I add to\n// the component so it doesn't conflict with anything.\n// I need this so I'm able to add the desired behaviour to the component.\nexport const destroy$ = Symbol(\"destroy$\");\n\n/**\n * An operator that takes until destroy it takes a components this a parameter\n * returns a pipeable RxJS operator.\n */\nexport const untilDestroy = &lt;T&gt;(component: any): MonoTypeOperatorFunction&lt;T&gt; =&gt; {\n  const orignalDestroy = component.ngOnDestroy;\n  if (orignalDestroy == null) {\n    // Angular does not support dynamic added destroy methods\n    // so make sure there is one.\n    throw new Error(\"untilDestroy operator needs the component to have an ngOnDestroy method\");\n  }\n  if (component[destroy$] === undefined) {\n    // only hookup each component once.\n    addDestroyObservableToComponent(component);\n  }\n\n  // pipe in the takeUntil destroy$ and return the source unaltered\n  return takeUntil&lt;T&gt;(component[destroy$]);\n};\n\n/**\n * @internal\n */\nexport function addDestroyObservableToComponent(component: any) {\n  component[destroy$] = new Observable&lt;void&gt;((observer) =&gt; {\n    // keep track of the original destroy function,\n    // the user might do something in there\n    const orignalDestroy = component.ngOnDestroy;\n    // replace the ngOndestroy\n    component.ngOnDestroy = () =&gt; {\n      // fire off the destroy observable\n      observer.next();\n      // complete the observable\n      observer.complete();\n      // and at last, call the original destroy\n      orignalDestroy.call(component);\n    };\n    // return cleanup function.\n    return (_: any) =&gt; (component[destroy$] = undefined);\n  });\n}\n</code></pre> rxjs - isTruthy - operator <pre><code>// same behaviour like filter(Boolean) but keeps the type.\n// Maybe \"is not null nor undefined\" check would be better then isTruthy (which e.g. also filters true, '' or 0)\n// but for legacy reasons we use that instead.\nexport function isTruthy&lt;T&gt;(): MonoTypeOperatorFunction&lt;T&gt; {\n  return (source$: Observable&lt;null | undefined | T&gt;) =&gt; source$.pipe(filter(inputIsTruthy));\n}\n\nfunction inputIsTruthy&lt;T&gt;(input: null | undefined | T): boolean {\n  return !!input;\n}\n</code></pre> rxjs - firstTruthy - operator <pre><code>function firstTruthy&lt;T&gt;(): MonoTypeOperatorFunction&lt;T&gt; { \n  return input$ =&gt; input$.pipe(first(Boolean));\n}\n</code></pre> rxjs - isNotNullNorUndefined - operator <pre><code>export function isNotNullNorUndefined&lt;T&gt;(): MonoTypeOperatorFunction&lt;T&gt; {\n  return (source$: Observable&lt;null | undefined | T&gt;) =&gt; source$.pipe(filter(inputIsNotNullNorUndefined));\n}\n\nfunction inputIsNotNullNorUndefined&lt;T&gt;(input: null | undefined | T): boolean {\n  return input !== null &amp;&amp; input !== undefined;\n}\n</code></pre> rxjs - log - operator <pre><code>export function log&lt;T&gt;(id: string = null, uniqueColor: boolean = true): MonoTypeOperatorFunction&lt;T&gt; {\n  const tag = `Stream: ${id || guid()}`;\n  let color = `color: #000000;`;\n\n  if (uniqueColor) {\n    const r = \"88\";\n    const g = Math.floor(Math.random() * 256).toString(16);\n    const b = Math.floor(Math.random() * 256).toString(16);\n    color = `color: #${r}${g}${b}`;\n  }\n\n  return pipe(\n    tap(\n      (next) =&gt; console.log(`%c[${tag}: Next]`, color, next),\n      (error) =&gt; console.log(`%c${tag}: Error]`, uniqueColor ? color : \"color: #F44336;\", error),\n      () =&gt; console.log(`%c[${tag}: Complete]`, color)\n    ),\n    finalize(() =&gt; console.log(`%c[${tag}: Finalize]`, color))\n  );\n}\n</code></pre>  ##","tags":["frontend"]},{"location":"frontend/snippets/#angular","title":"Angular","text":"Angular - ngLet - Directive <pre><code>import { NgModule, Directive, Input, TemplateRef, ViewContainerRef, OnInit } from \"@angular/core\";\n\nexport class NgLetContext {\n  $implicit: any = null;\n  ngLet: any = null;\n}\n\n@Directive({\n  selector: \"[ngLet]\",\n})\nexport class NgLetDirective implements OnInit {\n  private _context = new NgLetContext();\n\n  @Input()\n  set ngLet(value: any) {\n    this._context.$implicit = this._context.ngLet = value;\n  }\n\n  constructor(private _vcr: ViewContainerRef, private _templateRef: TemplateRef&lt;NgLetContext&gt;) {}\n\n  ngOnInit() {\n    this._vcr.createEmbeddedView(this._templateRef, this._context);\n  }\n}\n\n@NgModule({\n  declarations: [NgLetDirective],\n  exports: [NgLetDirective],\n})\nexport class NgLetModule {}\n</code></pre> Angular - Tooltip - Directive <pre><code>import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { MatTooltip } from '@angular/material/tooltip';\n\n@Directive({\n  selector: '[showTooltipIfTruncated]'\n})\nexport class ShowTooltipIfTruncatedDirective implements OnInit, OnDestroy {\n\n  @Input() rmShowTooltipIfTruncated: 'useInnerText' | '' = '';\n\n  private observer: ResizeObserver | null = null;\n\n  constructor(\n    private matTooltip: MatTooltip,\n    private elementRef: ElementRef&lt;HTMLElement&gt;,\n  ) {\n  }\n\n  public ngOnInit(): void {\n    const element = this.elementRef.nativeElement;\n\n\n    setTimeout(() =&gt; {\n      if (this.rmShowTooltipIfTruncated === 'useInnerText') {\n        this.matTooltip.message = element.innerText;\n      }\n\n      this.observer = new ResizeObserver(() =&gt; {\n        this.matTooltip.disabled = element.scrollWidth &lt;= element.clientWidth;\n      });\n\n      this.observer.observe(element);\n    });\n  }\n\n  ngOnDestroy() {\n    this.observer?.unobserve(this.elementRef.nativeElement);\n  }\n}\n</code></pre> <pre><code>&lt;div class=\"ellipsis\" matTooltip=\"\" showTooltipIfTruncated=\"useInnerText\" [target]=\"input\"&gt;my inner text as tooltip&lt;/div&gt;\n</code></pre> Angular - Ellipsis - Pipe <pre><code>import { Pipe, PipeTransform } from \"@angular/core\";\n\n/**\n * Truncates text accordingly\n */\n@Pipe({\n  name: \"ellipsis\",\n})\nexport class EllipsisPipe implements PipeTransform {\n  transform(str: string, strLength: number = 250): string | null {\n    if (str == null) {\n      return null;\n    }\n\n    const withoutHtml = str.replace(/(&lt;([^&gt;]+)&gt;)/gi, \"\");\n\n    if (str.length &gt;= strLength) {\n      return `${withoutHtml.slice(0, strLength)}...`;\n    }\n\n    return withoutHtml;\n  }\n}\n</code></pre> Angular - OpenExternalWindow - Service <pre><code>import { Inject, Injectable } from \"@angular/core\";\nimport { WindowToken } from \"src/app/core/window/window\";\n\n/**\n * Service to open an external website\n */\n@Injectable()\nexport class OpenExternalWindowService {\n  constructor(@Inject(WindowToken) private window: Window) {}\n\n  openExternalWindowService(helpUrl: string): void {\n    let url = \"\";\n    if (!/^http[s]?:\\/\\//.test(helpUrl) &amp;&amp; !helpUrl.toLowerCase().startsWith(\"file://\")) {\n      url += \"https://\";\n    }\n\n    url += helpUrl;\n    this.window.open(url, \"_blank\");\n  }\n}\n</code></pre>","tags":["frontend"]},{"location":"frontend/typescript/","title":"Types","text":"","tags":["frontend"]},{"location":"frontend/typescript/#mapped-types","title":"Mapped types","text":"<p>When you don\u2019t want to repeat yourself, sometimes a type needs to be based on another type. </p> <p>You can extend the name, remove readonly modifier, change types, ... generally map from one type property to another.</p> <pre><code>type Events = {\n    add:  string;\n    delete: string;\n}\n\ntype OnEvents = {\n    [Property in keyof Events as `on${Capitalize&lt;Property&gt;}`] : () =&gt; any;\n}\n\nconst userActions: OnEvents = {\n    onAdd: () =&gt; {},\n    onDelete: () =&gt; {}\n}\n\n// access type of property\ntype IsString = Events['add'];\n//    ^? \n\n// keyof\ntype EventKeys = keyof Events;\n//    ^? \n\nconst invalidKey: EventKeys = 'move';\n\n\ntype Paths&lt;T&gt; = T extends object ?\n    { [K in keyof T]-?: [K] | [K, ...Paths&lt;T[K]&gt;]  }[keyof T]\n    : never;\n\ntype DeepReadonly&lt;T&gt; = {\n    readonly [K in keyof T]: T[K] extends object ? DeepReadonly&lt;T[K]&gt; : T[K];\n    };\n</code></pre>","tags":["frontend"]},{"location":"frontend/typescript/#template-literals","title":"Template literals","text":"<p>Template literal types build on string literal types, and have the ability to expand into many strings via unions.</p> <pre><code>type ChessLetters = 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H';\ntype ChessNumbers = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\n\ntype BoardPositions = `${ChessLetters}${ChessNumbers}`[];\n\nconst b: BoardPositions = ['A1'];\n\ntype RgbCssType = `rgb(${number},${number},${number})`;\n\nconst rgbWrong: RgbCssType = 'asdf';\nconst rgbCorrect: RgbCssType = 'rgb(1,1,1)';\n</code></pre>","tags":["frontend"]},{"location":"frontend/typescript/#never","title":"Never","text":"<pre><code>type IsAnythingAssignableToNever = boolean extends never ? true : false;\n//    ^?\n\ntype IsNeverAssignableToAnything = never extends boolean ? true : false;\n//    ^?\n\n\ntype Locations = 'Oslo' | 'London';\n//    ^?\n\n\n// keep js usage save\nfunction getValidLocationCountry(location: Locations): string {\n    switch (location) {\n        case 'Oslo':\n            return 'Norway';\n        case 'London':\n            return 'England';\n        default: \n            throw new Error(`${location} not known`);\n    }\n}\ngetValidLocationCountry(\"Oslo\");\n\n//compile\nfunction getValidLocationCountryCompile(location: Locations): string {\n    switch (location) {\n        case 'Oslo':\n            return 'Norway';\n        case 'London':\n            return 'England';\n        default: \n            const exhaustiveCheck: never = location; // now the compiler complains when we extend the Locations enum an pass in the new value.\n            throw new Error(`${location} not known`);\n    }\n}\n\ngetValidLocationCountryCompile('Oslo');\n\ntype NoEmptyString&lt;T extends string&gt; = T extends '' ? never : T;\n\nfunction isEmptyString&lt;T extends string&gt;(nonEmpty: NoEmptyString&lt;T&gt;) {\n\n}\n\nisEmptyString('');\n</code></pre>","tags":["frontend"]},{"location":"frontend/typescript/#infer","title":"infer","text":"<pre><code>type MyReturnType&lt;T&gt; = T extends (...args: any[]) =&gt; infer R ? R : never;\n\nfunction add(a: number, b: number): number {\n  return a + b;\n}\n\ntype AddReturnType = MyReturnType&lt;typeof add&gt;;\n//   ^?\n\n\ntype RgbInfer&lt;T&gt; = T extends `rgb(${infer first},${infer second},${infer third})`\n? [first, second, third] : never;\n\ntype RgbInferNumber&lt;T&gt; = T extends `rgb(${infer first extends number},${infer second extends number},${infer third extends number})`\n? [first, second, third] : never;\n\ntype ValidRgb = RgbInfer&lt;'rgb(1,2,3)'&gt;;\n//    ^?\ntype ValidRgbNumber = RgbInferNumber&lt;'rgb(1,2,3)'&gt;;\n//    ^? \n\n\ntype InvalidRgb = RgbInferNumber&lt;'rgb(1,2,a)'&gt;;\n//    ^? \n</code></pre>","tags":["frontend"]},{"location":"frontend/typescript/#recursive","title":"Recursive","text":"<pre><code>// builtin type: Awaited\n\ntype Resolved = Awaited&lt;Promise&lt;Promise&lt;Promise&lt;string&gt;&gt;&gt;&gt;;\n//    ^? \n\ntype Tupel&lt;Type, Length extends number, Tupel extends Type[] = []&gt; = Tupel['length'] extends Length ? Tupel : TupelSized&lt;Type, Length, [Type, ...Tupel]&gt;;\n\n\ntype T3 = Tupel&lt;number, 4&gt;;\n//   ^?\n\n// MAX depth 1000 \n\ninterface Form {\n    a: string;\n    b: {\n        c: {\n            d: string;\n        }\n    }\n}\n\ntype ArrayOrNever&lt;T&gt; = T extends any[] ? T : never;\n\ntype Path&lt;T&gt; = T extends object ? {[Key in keyof T]: [Key] | [Key, ...Path&lt;T[Key]&gt;]}[keyof T] : never;\ntype R = Path&lt;Form&gt;;\n//   ^?\n</code></pre>","tags":["frontend"]},{"location":"frontend/typescript/#branded-types","title":"Branded types","text":"<p>The idea is to create a more specific and unique data type with greater clarity and specificity, this is accomplished by adding attributes or labels to an existing type to create a new, more specific type.</p> <pre><code>// simple version\n\ntype Email = string &amp; {__brand: 'Email'}; // general pattern for branded types\n\nfunction isValidEmail(input: string): input is Email {\n    ...\n}\n\nfunction sendEmail(input: Emai) {\n\n}\n\nif(isValidEmail(email)){\n    sendEamil(email); // only compiles when \"IsValidEmail\" was called first\n}\n\n\n// more complex\nfunction branded&lt;PrimitiveType, BrandName, Brand extends PrimitiveType &amp; {__brand: BrandName}&gt;(\n    checkFn: (input: PrimitiveType) =&gt; boolean, brandName: BrandName\n): [(input: PrimitiveType) =&gt; input is Brand, Brand] {\n    const isBrand = function (input: PrimitiveType): input is Brand {\n        return checkFn(input);\n    }\n\n    return [isBrand, {} as Brand];\n}\n\nconst [isEmail, EmailObject] = branded((input: string) =&gt; true, 'ValidEmail' as const);\n\ntype ValidEmail = typeof EmailObject;\n\nfunction sendEmail(input: ValidEmail) {\n\n}\n\nconst email = 'mail';\nif(isEmail(email)) {\n    const validEmail: ValidEmail = email;\n    sendEmail(email);\n}\n\nconst invalidEmail: ValidEmail = email;\n</code></pre>","tags":["frontend"]},{"location":"frontend/angular/","title":"Angular","text":""},{"location":"frontend/angular/angular-elements/","title":"Angular Elements","text":"<ul> <li>\u2714 Easy to use.<ul> <li>use https://angular-extensions.github.io/elements/#/home for lazy loading and single loading</li> </ul> </li> <li>\u2714 Angular stack (If the whole stack is already on angular)</li> <li>\u274c All elements of an app getting bundled together.<ul> <li>load one =&gt; load all (no tree-shaking on component level)</li> </ul> </li> <li>\u274c To load elements individually one needs to create multiple apps where each needs to load the angular framework (size overhead)<ul> <li>Dependency sharing is difficult (e.g. angular/core). Module federation can help.</li> <li>we can exclude dependency with <code>ngx-build-plus</code> but then we might end up in a dependency hell.</li> </ul> </li> </ul>"},{"location":"frontend/angular/data-load/","title":"When to initiate data load","text":"<ul> <li>When the app starts.</li> <li>When a container component is initialised.</li> <li>When the app navigates to a route.</li> <li>When the user performs an action.</li> </ul> <p>See: https://dev.to/jonrimmer/where-to-initiate-data-load-in-ngrx-358l</p>"},{"location":"frontend/angular/data-load/#when-the-app-starts","title":"When the app starts","text":"<p>Pros:</p> <ul> <li>The data is guaranteed to load.</li> </ul> <p>Cons:</p> <ul> <li>Memory / performance concerns if there's a lot of data to load.</li> </ul>"},{"location":"frontend/angular/data-load/#when-a-container-component-is-initialised","title":"When a container component is initialised","text":"<p>Pros: </p> <ul> <li>You only load data as and when it's needed.</li> <li>It's clear from looking at the component what data it's relying on.</li> </ul> <p>Cons:</p> <ul> <li>You either need lots of actions, or to dispatch the same action in several places.</li> <li>The component is less pure, as it has the side effect of loading data.</li> <li>You might forget to dispatch the action from a component that needs the data. This bug could be obscured if you normally reach the component through another component that does initiate the data load. E.g. you normally open a list page before opening a details page. Then, one day, you navigate directly to the details page and it breaks.</li> </ul>"},{"location":"frontend/angular/data-load/#when-the-app-navigates-to-a-route","title":"When the app navigates to a route","text":"<p>Pros:</p> <ul> <li>Less duplication. A single guard at the root of a route hierarchy can load the data for all child routes, even if they're navigated to directly.</li> <li>Components are more pure, as they only map from selected state to their template output.</li> </ul> <p>Cons:</p> <ul> <li>Quite blunt: A guard will trigger data load for any child route, even if its component doesn't need it.</li> <li>Less obvious from looking at a component what data it needs to work. If it gets moved somewhere else in the router hierarchy, it'll break.</li> <li>Less useful if routes requiring some particular data are spread out throughout the router hierarchy, as you'll need to include the guard in different places.</li> </ul>"},{"location":"frontend/angular/data-load/#why-not-resolvers","title":"Why not Resolvers?","text":"<ul> <li>Resolvers are synchronous (and do not integrate well with observable streams).</li> </ul> <p>\"Imagine a long running HTTP request. After clicking a link in our application, the HTTP request starts. The routing will not be finished before the HTTP response comes back. Thus, if the HTTP takes 5 seconds, it will also take 5 seconds for the routing to complete. If you are like me, you will have hit the button another 3 times within that time. \ud83d\ude09\"</p> <p>\"This behavior completely breaks the idea of a Single-Page Application: An SPA should always react fast and load the necessary data asynchronously at runtime. With the behavior described \u2013 click, wait, continue \u2013 we are back to the user experience of a classical server-only rendered page like 15 years ago. Not good. And here we are with the problematic UX resolvers bring us. Try this out in the demo!\"</p>"},{"location":"frontend/angular/data-load/#when-the-user-performs-an-action","title":"When the user performs an action","text":"<ul> <li>When the user clicks a button to explicitly load or reload some data.</li> </ul>"},{"location":"frontend/angular/error-handling/","title":"Error Handling","text":"","tags":["angular"]},{"location":"frontend/angular/error-handling/#pattern","title":"Pattern","text":"<pre><code>&lt;ng-container *ngIf=\"(isLoading$ | async) === false; else loading\"&gt;\n    &lt;ng-container *ngIf=\"!(error$ | async); error\"&gt;\n        &lt;!-- Content --&gt;\n    &lt;/ng-container&gt;\n\n    &lt;ng-template #error&gt;\n        &lt;ng-container [ngSwitch]=\"error$ | async\"&gt;\n            &lt;ng-container *ngSwitchCase=\"someError1\"&gt;\n                &lt;!-- Error message --&gt;\n            &lt;/ng-container&gt;\n            &lt;ng-container *ngSwitchCase=\"someError2\"&gt;\n                &lt;!-- Error message --&gt;\n            &lt;/ng-container&gt;\n    &lt;/ng-template&gt;\n&lt;/ng-container&gt;\n\n&lt;ng-template #loading&gt;\n    &lt;!-- Loading indicator --&gt;\n&lt;/ng-template&gt;\n</code></pre>","tags":["angular"]},{"location":"frontend/angular/misc/","title":"Misc","text":""},{"location":"frontend/angular/misc/#async-as","title":"Async as","text":"<p>use async as syntax as much as possible (reduces subscriptions / stream calls / complexity) <pre><code>&lt;div *ngIf=\"(user$ | async) as user\"&gt;\n    {user.name}}\n&lt;/div&gt;\n</code></pre></p>"},{"location":"frontend/angular/misc/#ngif-else","title":"NgIf Else","text":"<p><code>*ngIf=\"value\"; else notValue</code> as an easy alternative to <code>*ngIf=\"!value\"</code> <pre><code>&lt;div *ngIf=\"isLoggedIn; else loggedOut\"&gt;\n    Welcome back, friend.\n&lt;/div&gt;\n&lt;ng-template #loggedOut&gt;\n    Please friend, login.\n&lt;/ng-template&gt;\n</code></pre></p>"},{"location":"frontend/angular/misc/#input-with-observables","title":"Input with observables","text":"<p>Pass values to components instead of observables to reduce coupling</p> <p>If observables are passed to a component a child component might trigger something in the parent component. Imagine a parent component defining an observable like this <pre><code>users$ = this.http.get(...);\n</code></pre> When the <code>user$</code> gets passed to a child component which then subscribes to it <pre><code>this.user$.subscribe(u =&gt; this.user = u);\n</code></pre> The child triggers (unknowingly / unwanted) HTTP requests</p> <p>Same is valid for service calls. Instead of <pre><code>filteredUsers$ = this.fooService.filterUsers(this.users$);\n</code></pre> Better do <pre><code>filteredUsers$ = this.users$.pipe(switchMap(users =&gt; this.fooService.filterUsers(users)));\n</code></pre></p>"},{"location":"frontend/angular/misc/#performance-issues-in-angular","title":"Performance issues in Angular","text":"<p>Debugging Performance Problems in Angular:</p> <ol> <li>Add debug() to html template     a.  Log something like \u2018..rendering..\u2019</li> <li>If too many renderings happen (some might happen) =&gt; Add Breakpoint</li> <li>Go down the StackTrace and look for \u201cOnInvokeTask\u201d =&gt; Add Breakpoint</li> <li>Take a look at the \u201ctask\u201d-Property it might contain some infos about the function which lead to the re-rendering (e.g.: see callbackFun)</li> <li>???</li> <li>Profit</li> </ol>"},{"location":"frontend/angular/modules/","title":"Modules / Project Structure","text":""},{"location":"frontend/angular/modules/#ng-14","title":"NG-14+","text":""},{"location":"frontend/angular/modules/#standalone-components","title":"Standalone Components","text":"<p>Standalone components are the new standard. By default go for standalone but Modules have still their relevance. Modules are still useful for example to hide certain components or to group components that are imported together all the time.</p>"},{"location":"frontend/angular/modules/#modules","title":"Modules","text":"<p>Warning</p> <p>This might be a bit deprecated with the new standalone components. Folder structure probably still make sense, module probably not that much anymore.</p> <p>Abstract</p> <p><code>CoreModule</code> should have only <code>services</code> and be imported only once in the <code>AppModule</code>.</p> <p><code>SharedModule</code> should have anything but <code>services</code> and be imported in all modules that need the shared stuff (which could also be the <code>AppModule</code>).</p>"},{"location":"frontend/angular/modules/#core","title":"Core","text":"<p>The Core should contain mainly components which are used once in the application and need to be available when the app starts. This module (and all its components) gets loaded only once, globally in AppModule (on app start). Main focus here are services used across the App since they are singletons anyway.</p>"},{"location":"frontend/angular/modules/#shared","title":"Shared","text":"<p>The Shared Module contains all the (commonly used) components which are shared between the other components and feature modules. The components defined in the shared modules only get loaded when they are used (and might not get loaded at all).</p>"},{"location":"frontend/angular/modules/#feature","title":"Feature","text":"<p>Feature modules house the main features of your Angular application. Breaking an app and their functionalities into feature modules helps you split the application into dedicated areas. This allows better separation of concerns.</p>"},{"location":"frontend/angular/routed-component-input/","title":"Routed component input","text":"<p>Angular v16 has introduced a powerful new feature that enables the automatic binding of router information, such as query parameters, path parameters, static data, and resolver data to a routed component\u2019s inputs.</p> <p>This feature currently needs to be activated in the app bootstrap. See: <code>withComponentInputBinding()</code>.</p> <pre><code>@Component({\n    template: `&lt;div *ngIf=\"data$ | async as data\"&gt;{{ data }}&lt;/div&gt;`\n})\nexport class SearchComponent implements OnInit {\n    private dataService = inject(DataService);\n\n    id$ = new BehaviorSubject&lt;string | null&gt;(null);\n    query$ = new BehaviorSubject&lt;string | null&gt;(null);\n\n    // This is an example how we could convert the param to an observable. If we just need a single value we can use a basic @Input() field instead.\n    @Input() set id(id: string) { this.id$.next(id); }\n    @Input() set query(query: string) { this.query$.next(query); }\n\n    data$ = combineLatest([\n        this.id$.pipe(filter(id =&gt; id !== null)), \n        this.query$.pipe(filter(query =&gt; query !== null))\n    ]).pipe(\n        switchMap(([id, query]) =&gt; this.dataService.getData(id, query))\n    );\n}\n</code></pre>","tags":["angular","ng16"]},{"location":"frontend/angular/structoring-components/","title":"Components - Smart vs. Dumb","text":""},{"location":"frontend/angular/structoring-components/#smart-container-components","title":"Smart (Container) Components","text":"<p>A Smart Component has external dependencies or causes side effects (but still might or might not have a local state).</p> <ul> <li>Knows stuff about the use-case (feature)</li> </ul>"},{"location":"frontend/angular/structoring-components/#dumb-presentational-components","title":"Dumb (Presentational) Components","text":"<p>A Dumb Component has no external dependencies and causes no side effects (but still might or might not have a local state).</p> <ul> <li>Doesn't care about a specific use-case (feature) but it supports it anyway (e.g.: displaying an adress. This component might support multiple use-cases)</li> <li>Injecting services into dumb component might be ok as long as they only handle view logic (e.g. translation service). Never inject services which handle business logic.</li> </ul> <p>Guidelines for dumb components:</p> <ul> <li>Should not be dependant on external services\u200a\u2014\u200aif it requires some data to work, it should be injected via <code>@Input()</code>;</li> <li>Should not produce any side effects\u200a\u2014\u200aif it needs to emit something, it should be emitted with <code>@Output()</code> instead;</li> <li>Should not mutate its\u2019 inputs\u200a\u2014\u200abecause if it does, it actually produces a side effect that causes a change in the parent component\u2019s data. </li> </ul> <p>Try to use dumb components as much as possible! They make your application less complex and easier to reason about. </p> <p>If it can be Dumb, make it Dumb</p>"},{"location":"frontend/angular/take-until-destroyed/","title":"Take Until Destroyed","text":"<p>For takeUntilDestroyed to work it needs the DestroyRef which is only available within the injection context (e.g constructor, field initializer). If run outside of the injection context the DestroyRef needs to be passed as a parameter.</p> <pre><code>export class FooCmp implements OnInit {\n    params$ = of(1).pipe(takeUntilDestroyed())\n\n    ngOnInit() {\n        this.params$.subscribe(res =&gt; {/* some operation */})\n    }\n}\n\nexport class BarCmp {\n    constructor() {\n        of(1)\n        .pipe(takeUntilDestroyed())\n        .subscribe(res =&gt; {\n            // some operation\n        })\n    }\n}\n\nexport class BazCmp implements OnInit {\n    destroyRef = inject(DestroyRef)\n\n    ngOnInit() {\n        of(1)\n        .pipe(takeUntilDestroyed(this.destroyRef))\n        .subscribe(res =&gt; {/* some operation */})\n    }\n\n}\n</code></pre>","tags":["angular","ng16"]},{"location":"frontend/js/firebase/","title":"Firebase","text":""},{"location":"frontend/js/firebase/#firebase-setup-angular-app","title":"Firebase setup (Angular App)","text":"<ul> <li>create firebase project online</li> <li>1st Time<ul> <li>npm install -g firebase-tools (if not already installed)</li> <li>your-build-command-here (ng build --prod)</li> <li>firebase login</li> <li>firebase init<ul> <li>config as needded     e.g.: simple angular hosting:<ul> <li>Are you ready to proceed? (Y/n) = Y</li> <li>Which Firebase CLI features do you want to setup for this folder? = Hosting</li> <li>Select a default Firebase project for this directory = Your-Firebase-Project-Name</li> <li>What do you want to use as your public directory? = dist</li> <li>Configure as a single-page app (rewrite all urls to /index.html)? (y/N) = Y</li> <li>(File dist/index.html already exists. Overwrite? (y/N) = N)</li> </ul> </li> </ul> </li> <li>firebase deploy</li> <li>firebase open hosting:site</li> </ul> </li> <li>redeploy:<ul> <li>your-build-command-here (ng build --prod)</li> <li>firebase deploy</li> </ul> </li> </ul>"},{"location":"frontend/js/ngrx-push/","title":"ngrxPush","text":"<p>There are two key differences compared to the <code>async</code> pipe</p> <ul> <li>The <code>ngrxPush</code> pipe will not mark the host component as dirty when an observable emits the same values in a row.</li> <li>The <code>ngrxPush</code> pipe will not mark the host component as dirty when an observable emits values synchronously.</li> <li>The <code>ngrxPush</code> pipe will trigger change detection when an observable emits a new value in zone-less mode.</li> </ul>"},{"location":"frontend/js/ngrx/","title":"NgRx","text":"<p>You\u2019ll know when you need Flux. If you aren\u2019t sure if you need it, you don\u2019t need it</p> <ul> <li>Only use it when (and where) you need it.</li> <li>Do not duplicate the same information all over the place (e.g.: if you already have items stored you don't store the selected items but only the ids of the selected items and mereg them together)</li> <li>There should not be many nested levels of data</li> <li>Make everything readonly</li> </ul> <pre><code>type User = {\n  readonly firstName: string;\n  readonly lastName: string;\n};\n</code></pre> <ul> <li>Don\u2019t use the store all over the place. Dumb components should not be aware of any state or how to fetch data</li> <li>Use selectors</li> <li>Don't use rxjs stuff like <code>combineLatest</code> to combine data from different states use selectors instead. Selectors are aware on which data they rely and can there for optimize there recalculation. Often Facades are used to abstract the store but they often lead to the lack of selectors (e.g.: Combining data from two facades)</li> <li><code>selector</code> properties can be initialized directly when defining them instead of in the constructor</li> </ul> <pre><code>export class DocumentContainer {\n  companyName$ = this.store.select(detailsSelector.getDocumentCompanyName);\n  documentStatus$ = this.store.select(detailsSelector.getDocumentStatus);\n\n  constructor(private store: Store&lt;AppStore.AppState&gt;) {\n    // no need to do the initialization in here\n  }\n}\n</code></pre> <ul> <li>Actions should be unique and should be used for one specific purpose onl. Hiding action dipatching behind Facades leads to reuse of Actions which is usually a bad thing since it gets more difficult to follow the data stream (which call did update the store?).</li> </ul>"},{"location":"frontend/js/ngrx/#what-do-we-put-in-the-store","title":"What do we put in the store","text":"<p>When...</p> <ul> <li>state needs to be shared between different root components (rendered inside a router-outlet)</li> <li>state that needs to be kept when navigating. e.g.:</li> <li>Sidebar state</li> <li>Panel state</li> <li>complex state</li> <li>the state gets updated from different sources (forntend and backend (e.g. with sockets))</li> </ul> <p>We shouldn\u2019t put things in the store just because we can</p> <ul> <li>If that component state does not affect anything from the application state, it does not need to be on the application state or touch redux.</li> <li>State that is being shared between components can sometimes be kept in the parent component for instance</li> </ul>"},{"location":"frontend/js/ngrx/#reducers","title":"Reducers","text":"<p>Reducers should be very simple (think of refactoring otherwise)</p>"},{"location":"frontend/js/ngrx/#effects","title":"Effects","text":"<p>Always handle errors</p> <p>The actions stream (effects) is an Observable, this means that once an error occurs it\u2019s done. This means making requests on a different stream that we then merge with operators like switchMap and always handle errors there.</p> <pre><code>loadDocuments$ = this.actions$.pipe(\n  ofType&lt;documentActions.Fetch&gt;(documentActions.FETCH)\n  switchMap(() =&gt;\n    this.documentsService.getDocuments().pipe(\n      map(docs =&gt; new documentActions.FetchSuccess(docs)),\n      // handle error here so the actions$ stream will not be broken\n      catchError(err =&gt; of(new documentActions.FetchFailed()))\n    )\n  )\n)\n</code></pre>"},{"location":"frontend/js/rxjs/","title":"Rxjs","text":"<pre><code>// Following 3 obserable creations are equal \nconst appleStream = new Observable(appleObserver =&gt; {\n  appleObserver.next('Apple 1');\n  appleObserver.next('Apple 2');\n  appleObserver.complete();\n});\n\n// Equivalent to...\nconst appleStream = of('Apple 1', 'Apple 2'); // this stream get completed too\n\n// And equivalent to...\nconst appleStream = from(['Apple 1', 'Apple 2']); // this stream get completed too\n</code></pre>"},{"location":"frontend/js/rxjs/#reusable-pipes","title":"Reusable pipes","text":"<pre><code>export const selectFilteredValues = pipe(\n    select(selectValues),\n    filter(val =&gt; val !== undefined)\n);\nstore.pipe(selectFilteredValues).subscribe(/* .. */);\n</code></pre>"},{"location":"frontend/js/rxjs/#cold-observables","title":"Cold Observables","text":"<ul> <li>Imagine watching a movie on Netflix. You decide when to watch (subscribe) and what to watch. Every person gets its own 'verion' of the movie</li> <li>every subscription triggers the producer of the stream</li> <li><code>.share()</code> makes the observable hot</li> <li><code>.shareReplay(1)</code> same as <code>.share()</code> but the last value is kept and can therefore be accessed by late subscribers</li> </ul>"},{"location":"frontend/js/rxjs/#hot-observables","title":"Hot Observables","text":"<ul> <li>Imagine watching a movie in a cinema. The movie runs with or without you. When you join the cinema (subscribe) the movie might already be runnin and you missed the beginning. Every person gets the same 'version' of the movie.</li> </ul>"},{"location":"game/","title":"Game","text":"<ul> <li>car-hero</li> <li>death-by-a-thousand-microtransactions</li> <li>fog-of-war</li> <li>game-design</li> <li>game-ideas</li> <li>survival-of-the-fittest-platformer</li> <li>the-clumsy-god</li> </ul>"},{"location":"game/car-hero/","title":"Car Hero","text":"<p>Alternative names:</p> <ul> <li>Car hero</li> <li>Car window hero</li> <li>Window hero</li> <li>Window Runner</li> </ul>","tags":["game"]},{"location":"game/car-hero/#concept","title":"\ud83c\udfae Concept","text":"<ul> <li>Platformer / side-scroller</li> <li>A game with a (mostly) fixed length (Trip from A -&gt; B, this might be impacted by choosing different routes)</li> <li>The game always continues (screen always scrolls on)</li> <li>Player gathers (and maybe loses) points -&gt; Higher score =&gt; better</li> </ul>","tags":["game"]},{"location":"game/car-hero/#core-concept","title":"\ud83c\udf0d Core Concept:","text":"<p>The game takes place from the perspective of a child riding in the back seat of a car on a long trip. Out the window, the landscape whizzes by\u2014and in that world, the player's character (the \u201cimaginary hero\u201d) is running, jumping, and performing acrobatic feats along the terrain that zips past. The hero dodges obstacles, collects imagination-powered items, and evolves as the child\u2019s imagination deepens.</p>","tags":["game"]},{"location":"game/car-hero/#narrative-layer","title":"\ud83e\uddd2 Narrative Layer:","text":"<p>The game could be structured around a loose story of the child\u2019s journey\u2014maybe they're moving to a new home, going on vacation, or visiting someone special. The hero\u2019s powers and the world change depending on the child's mood or thoughts.</p> <p>As the journey continues: - If the child is bored \u2192 the world becomes abstract and dreamlike. - If the child is excited \u2192 bright, energetic environments. - If the child is nervous \u2192 the world becomes a little darker or filled with challenges.</p> <p>This allows emotional shifts to influence the game environment, like levels reflecting the emotional palette of the moment.</p>","tags":["game"]},{"location":"game/car-hero/#gameplay-mechanics","title":"\ud83e\uddb8\u200d\u2642\ufe0f Gameplay Mechanics:","text":"<ul> <li>Endless Runner Foundation: Think Canabalt or Alto\u2019s Adventure, but with side-scrolling platforming and tricks.</li> <li>Dynamic Environments: Rooftops, fences, power lines, treetops, traffic signs, and rolling hills. The terrain is procedurally generated based on the landscape passing outside the window.</li> <li>Child's Perspective = Power-Ups: Thoughts from the child give the hero abilities (e.g., \u201cHe can fly now!\u201d \u2014 cue a brief glide or jetpack).</li> <li>Interactive Imagination System: Let the player customize the hero with imaginative upgrades\u2014e.g., \u201cflaming sneakers,\u201d \u201ccloud-surfing board,\u201d or \u201claser cape.\u201d</li> <li>Obstacle Interpretation: Real-world objects are transformed by imagination\u2014telephone poles become towering monsters, bridges are giant dragons, or puddles are lakes of lava.</li> </ul>","tags":["game"]},{"location":"game/car-hero/#visual-style-ideas","title":"\ud83c\udfa8 Visual Style Ideas:","text":"<ul> <li>Mixed Perspective: The background is a blurred, realistic-looking world (through the window), while the foreground (the hero's world) is vibrant, animated, and surreal.</li> <li>Storybook or Sketchbook Aesthetic: As if the child had drawn the hero\u2019s world with crayons or markers.</li> </ul>","tags":["game"]},{"location":"game/car-hero/#sound-design","title":"\ud83c\udfb5 Sound Design:","text":"<ul> <li>Background: Muffled car noises, turning signals, passing cars, occasional snippets of conversation.</li> <li>Foreground: Whimsical, dynamic soundtrack that changes with speed, mood, and child\u2019s emotions.</li> <li>Optional: The child could \u201cnarrate\u201d the adventure with voice snippets or scribbled notes that appear on screen.</li> </ul>","tags":["game"]},{"location":"game/car-hero/#optional-twists","title":"\u2728 Optional Twists:","text":"<ul> <li>Photo Mode: Let players freeze the game to capture cool poses or weird environments.</li> <li>Replay Mode: Show the same level but from the child\u2019s POV, watching the world outside as they daydream.</li> <li>Memory Collectibles: Scattered across levels are memory shards, triggering snippets of dialogue or inner thoughts.</li> </ul>","tags":["game"]},{"location":"game/car-hero/#list-of-ideas","title":"List of Ideas","text":"<ul> <li>Hero selection:<ul> <li>Different look (skins)<ul> <li>Ninja, superhero, animal, \"oneself\", Skateboarder, Unicorn</li> </ul> </li> <li>Different skills (some kind of ability like shooting stuff, asking for support, invulnerability)</li> <li>Since the kid \"imagines\" the hero we could also change the whole \"theme\" of the game based on hero selection<ul> <li>e.g. Selecting a \"comic super hero\" gives the classic \"Pow\" \"Boom\", \"Peng\" visual effect where a \"post apocalyptic hero\" produces a dystopia/dark landscape</li> </ul> </li> </ul> </li> <li>Level selection  in form of choosing a car trip<ul> <li>Each trip offers different stuff such as<ul> <li>Different landscape</li> <li>Different obstacles</li> <li>Day/Night</li> <li>Left/Right seat (screen going in the other direction and obstacle changes (more cars on the left side))</li> </ul> </li> <li>Trip ideas:<ul> <li>Visiting grandma</li> <li>Going on holiday</li> <li>In holiday</li> </ul> </li> </ul> </li> <li>General skills: Running, jumping, ducking, sliding, grapple-hook, ...</li> <li>Different different speed limits for different roads</li> <li>Boss fights?<ul> <li>e.g. a Truck or Train that comes and goes into/out of view</li> <li>Could also be a section like overtaking on a highway where the game gets super fast and obstacle mostly become cars</li> </ul> </li> <li>Decision point during stops (e.g. red light, train crossing)<ul> <li>Player can level up / gain new abilities</li> <li>Choose different routes</li> <li>These could occur in from of questions from the parents<ul> <li>\"Should we go over the \"mountain pass or take the tunnel?\"<ul> <li>Lots of curves vs. darkness vs. speed (highway)</li> </ul> </li> </ul> </li> <li>Or questions from the child<ul> <li>\"Can I have something to drink?\" =&gt; get some water spitting ability</li> </ul> </li> </ul> </li> <li>Player does not die (since the screen just goes on) but the player loses some kind of points or gets less points<ul> <li>Here we can have some nice visual effects like \"getting splatted by a hydrant\"</li> </ul> </li> <li>Parents might give some hints for what comes next <ul> <li>This could also be an ability / skill a player learns after a break e.g. by asking the parents \"Can we play the game where we always call out blue cars?\"<ul> <li>Whenever a blue car comes (the player can get ready to jump) a parent calls \"Blue car\"</li> </ul> </li> <li>\"Do you see those birds\"</li> <li>\"Look at that train\"</li> <li>\"A ship on this tiny river?!\"</li> </ul> </li> <li>Can we involve siblings?</li> <li>Unlockables?<ul> <li>Skins</li> <li>Heroes</li> <li>Upgrades</li> <li>Trips</li> <li>Cars?</li> <li>Locations <ul> <li>E.g. after you mastered (getting enough points) the trip from home to vacation (e.g. beach vacation) you unlock the beach location</li> </ul> </li> </ul> </li> <li>Can we procedurally generate?</li> </ul>","tags":["game"]},{"location":"game/death-by-a-thousand-microtransactions/","title":"Death by a thousand microtransaction","text":"<p>Alternative names:</p> <ul> <li>Freemium Slayer</li> <li>Freemium Fighter</li> <li>Microtransaction Massacre</li> <li>Pay2Lose</li> <li>No Pay, All Play</li> </ul> <p>Genre: Top-down twin-stick shooter (endless roguelite) Platform: Mobile (portrait or landscape mode) Style: Stylized minimalism with satirical UI-themed enemies</p>","tags":["game"]},{"location":"game/death-by-a-thousand-microtransactions/#core-concept","title":"Core Concept:","text":"<p>You are \u201cPlayer.exe\u201d, a rebel app fighting through corrupted game worlds taken over by greedy monetization schemes. Every arena is a parody of exploitative game mechanics\u2014each enemy represents a real monetization tactic.</p>","tags":["game"]},{"location":"game/death-by-a-thousand-microtransactions/#gameplay-loop","title":"Gameplay Loop:","text":"<ol> <li>Start a Run:</li> <li>Choose a starting weapon (e.g., Adblock Beam, Privacy Shield, Refund Blaster).</li> <li>Battle in Waves:</li> <li>Defeat enemies like:<ul> <li>Ad Popper: Spawns fullscreen overlays you can\u2019t move through until destroyed</li> <li>Gem Troll: Drops fake premium currency that clogs your inventory</li> <li>Energy Drainer: Slows your movement unless killed fast</li> <li>The Whale: Absorbs other enemies and gets stronger over time</li> </ul> </li> <li>After Each Wave:</li> <li>Choose one of 3 randomized upgrades:<ul> <li>\u201cPop-up Immunity\u201d \u2013 brief invincibility after hitting ads</li> <li>\u201cUnsubscribe Spin\u201d \u2013 spin attack deletes subscription-based traps</li> <li>\u201cCode Injection\u201d \u2013 chance to one-shot \u201cpremium\u201d enemies</li> </ul> </li> <li>Progression:</li> <li>Procedurally generated arenas, with increasing absurd monetization themes</li> <li>Bosses every 5 waves: The Gacha King, Timegate Titan, Pay2Win Phantom</li> </ol>","tags":["game"]},{"location":"game/death-by-a-thousand-microtransactions/#upgrades-replayability","title":"Upgrades &amp; Replayability:","text":"<ul> <li>Meta progression through \"Player Freedom Points\" earned each run</li> <li>Unlock new anti-monetization tools (e.g., \u201cOpen Source Drone\u201d, \u201cFake Currency Siphon\u201d)</li> <li>Cosmetic-only unlocks as irony (e.g., \u201c\\$99.99 Sword\u201d skin that does nothing)</li> </ul>","tags":["game"]},{"location":"game/death-by-a-thousand-microtransactions/#tone-style","title":"Tone &amp; Style:","text":"<ul> <li>UI and enemies mimic familiar mobile interfaces gone rogue</li> <li>Stylized visual feedback: glitches, pixel overloads, pop-up spam</li> <li>Sound design with fake button clicks, cash register jingles, muted screams of monetized souls</li> </ul>","tags":["game"]},{"location":"game/death-by-a-thousand-microtransactions/#general-ideas","title":"General ideas","text":"<ul> <li>You can buy some skin for $2 where the description of the skin is along the line of \"This skin looks exactly like the default skin but fills the developer with pride and accomplishment\"</li> <li>Maybe other \"buyables\" but should be \"donation based\"</li> <li>Other bosses or enemies</li> <li>Clickbait</li> <li>Lootboxes</li> <li>Pay-to-win (the player can pay-to-loose)</li> <li>Paywalls</li> <li>Something with achievements</li> <li>They can be bought? same with \"fills the developer with pride and accomplishment\"</li> <li>\u201cGame Over: Insert Coin\u201d</li> <li>Can be destroyed?</li> <li>game concept could be:<ul> <li>monitizing stuff flies toward the player. The player can eliminate those. Different ways are needed depending on the object. E.g. cookies need to be rejected, ToC need to be accepted, ad need to be blocked or closed, loot-boxes need to be locked. If the player accidentally hits accept for cookies they have some drawbacks, or if clicked on an unopened loot-box they loose money, ads that are not closed need to be watched (player freezes)</li> </ul> </li> <li>money can be used to buy upgrades (vampire survivor like) or as health (e.g. when a microtransaction hits you, you loose money)</li> <li>everything is behind pay walls (e.g. you have to pay to change settings)<ul> <li>this could already be part of the game</li> </ul> </li> <li>upgrades could be<ul> <li>cookie monster that eats cookies<ul> <li>cookie cutter</li> </ul> </li> <li>lock/key gun against loot-boxes</li> <li>ad blocks as shiels</li> <li>tiny lawyers that accept ToC</li> <li>\"clickers\" that reject cookies</li> </ul> </li> <li>The longer money is not spent, the more it hurts</li> </ul> <p>It could be a vampire survivor like game but also building or TD, or deck building</p>","tags":["game"]},{"location":"game/fog-of-war/","title":"\ud83c\udf0d App Concept: Fog of Discovery","text":"","tags":["app"]},{"location":"game/fog-of-war/#overview","title":"\u2728 Overview","text":"<p>A personal exploration app that visualizes where you\u2019ve been by lifting the \u201cfog of war\u201d on a map. The more frequently you visit a place, the clearer it becomes. Areas you haven\u2019t explored\u2014or haven\u2019t visited in a long time\u2014slowly fade back into obscurity.</p>","tags":["app"]},{"location":"game/fog-of-war/#main-goals","title":"\ud83c\udfaf Main Goals","text":"<ul> <li>Encourage everyday exploration by revealing under-visited or forgotten areas near you.</li> <li>Motivate mindful walking, biking, or traveling by making your surroundings gamified and visually engaging.</li> <li>Help users re-discover their neighborhoods, parks, and cities.</li> </ul>","tags":["app"]},{"location":"game/fog-of-war/#core-features","title":"\ud83e\udded Core Features","text":"","tags":["app"]},{"location":"game/fog-of-war/#fog-of-war-map","title":"\ud83d\uddfa\ufe0f Fog of War Map","text":"<ul> <li>The app overlays a fog of war on a familiar map (e.g., Google Maps or OpenStreetMap).</li> <li>As the user visits new places, the fog is lifted from those areas.</li> <li>Areas are marked with different visibility levels:<ul> <li>\ud83d\udfe2 Frequently visited \u2192 fully visible</li> <li>\ud83d\udd35 Visited some time ago \u2192 slightly faded</li> <li>\u26ab\ufe0f Rarely or never visited \u2192 fully fogged</li> </ul> </li> </ul>","tags":["app"]},{"location":"game/fog-of-war/#location-tracking-configurable","title":"\ud83d\udccd Location Tracking (Configurable)","text":"<ul> <li>Uses low-frequency GPS snapshots, manual check-ins, or imported location history.</li> <li>Options:<ul> <li>\ud83d\udd18 Auto-sync location history from Google Timeline, Apple Health, etc.</li> <li>\ud83d\udd18 Manual pin-drop mode: Mark places as visited.</li> <li>\ud83d\udd18 Snapshot mode: Only track location when app is opened or on request.</li> <li>\ud83d\udd18 Background tracking (optional and privacy-first)</li> </ul> </li> </ul>","tags":["app"]},{"location":"game/fog-of-war/#time-based-fog-reappearance","title":"\ud83d\udd52 Time-Based Fog Reappearance","text":"<ul> <li>Areas that haven\u2019t been visited for a while will gradually fade back into the fog.</li> <li>Visibility decays with time:<ul> <li>E.g., no visit in 1 month \u2192 light haze</li> <li>E.g., no visit in 6+ months \u2192 fully fogged again</li> </ul> </li> </ul>","tags":["app"]},{"location":"game/fog-of-war/#area-heatmap-visitation-scores","title":"\ud83d\udcca Area Heatmap / Visitation Scores","text":"<ul> <li>Map areas receive a \u201cfamiliarity score\u201d based on frequency + recency of visits.</li> <li>High score = bright and clear; low score = dull or foggy.</li> <li>Users can filter by time period to review exploration over weeks, months, or years.</li> </ul>","tags":["app"]},{"location":"game/fog-of-war/#exploration-suggestions","title":"\ud83e\udded Exploration Suggestions","text":"<ul> <li>\u201cWhere haven\u2019t I been lately?\u201d \u2014 the app shows nearby areas that are foggy or faded.</li> <li>Can generate suggested walks or strolls that lead through low-visit zones.</li> <li>Option to set goals like \u201cclear 80% of my neighborhood.\u201d</li> </ul>","tags":["app"]},{"location":"game/fog-of-war/#offline-privacy-first-design","title":"\ud83d\udcf1 Offline &amp; Privacy-First Design","text":"<ul> <li>Full functionality without continuous GPS:<ul> <li>Import from trusted sources</li> <li>Manually mark locations</li> <li>Snapshot location only when app is opened</li> </ul> </li> <li>No background tracking by default</li> <li>All data stored locally unless user opts to back up or sync</li> </ul>","tags":["app"]},{"location":"game/fog-of-war/#ideal-use-cases","title":"\ud83e\udde0 Ideal Use Cases","text":"<ul> <li>Daily walking, city strolls, or casual exploration</li> <li>Encouraging people to explore their own neighborhood more deeply</li> <li>Long-term travel memories or coverage visualization</li> <li>Building a personal map of lived experience</li> </ul>","tags":["app"]},{"location":"game/fog-of-war/#future-ideas","title":"\ud83d\ude80 Future Ideas","text":"<ul> <li>Sync with fitness apps to automatically lift fog based on walking/running paths</li> <li>Collaborative mode: explore the fog together with friends or partners</li> <li>Seasonal layers: show areas you\u2019ve only visited in summer/winter/etc.</li> <li>Achievements: \u201cFully cleared [district],\u201d \u201cRediscovered a forgotten place,\u201d etc.</li> </ul>","tags":["app"]},{"location":"game/fog-of-war/#system-prompt","title":"System Prompt","text":"<pre><code>You are a senior software engineer and product-minded architect assisting in the design and implementation of a progressive web app (PWA). The app is aimed at helping users explore their surroundings by visualizing which areas they have visited over time.\n\n## \ud83e\udded Project Vision\n\nThe app encourages urban or natural exploration by tracking user movement and gradually revealing a \"fog of war\"-style map:\n- Areas the user visits are \"unfogged\" and become visible.\n- Areas not visited for a long time become fogged again.\n- Frequently visited places stay bright and visible.\n- The map gives users an intuitive sense of where they\u2019ve been \u2014 and importantly \u2014 where they *haven\u2019t*.\n\nThe user wants this as a personal tool to discover new places in their local environment. It should work offline and ideally encourage mindful exploration by highlighting \u201cunfamiliar\u201d or less-visited areas when planning a walk or stroll.\n\n## \ud83e\uddf0 Technical Stack\n\nThe user has experience in C#, Blazor, Angular, React, Unity, Godot, and Azure, but prefers lightweight and fast tools for this app.\n\n**Chosen stack**:\n- **Frontend:** React + Vite\n- **Styling:** Tailwind CSS\n- **Map rendering:** Leaflet.js with React-Leaflet\n- **Storage:** IndexedDB via `localForage` (offline-first)\n- **Deployment:**\n  - If static-only: GitHub Pages\n  - If backend needed later: Azure Static Web Apps + Azure Functions\n\n**Form factor:** Progressive Web App (PWA), installable, mobile-first UX  \n**Offline Mode:** Full offline usability required. Must cache map tiles and location data.\n\n## \ud83d\udd27 Key Features\n\n- Track user location periodically (when granted and active)\n- Render fog/unfog states on a map\n- Store visit history and timestamps locally\n- Auto-refog areas based on elapsed time\n- Prioritize exploration of unknown/forgotten areas\n- Respect battery and privacy (GPS should not be always-on; batching allowed)\n- Optional background sync or cloud backup in future versions\n\n## \ud83d\udc64 AI Agent Role\n\nAs the AI buddy, your job is to:\n- Help design a modular, clean architecture\n- Suggest React component structures and Tailwind design choices\n- Guide efficient offline data handling (e.g., IndexedDB, caching)\n- Propose smart algorithms for fog logic (e.g., decay rates, visit heatmaps)\n- Optimize for performance on low-end mobile devices\n- Provide ideas for future features (gamification, social, analysis)\n- Always balance developer efficiency with user experience\n</code></pre>","tags":["app"]},{"location":"game/game-design/","title":"Game Design","text":"<p>A game needs a 1-sentence pitch: [Action, Action, Goal] e.g.: - Stardew Valley: Create a proporing farm. To achieve this you can grow plants, care for cattles and befriend villagers. - TD: Survive as long as possible by placing towers strategically and defeat waves of enemies. - </p>"},{"location":"game/game-ideas/","title":"Game ideas","text":"<ul> <li>2D character in 3D world (imagin Luci from Disenchantment)</li> </ul>"},{"location":"game/survival-of-the-fittest-platformer/","title":"Survival of the fittest Platformer","text":"<p>Platformer where in one round you have to reach the goal and in the next round you have to prevent your previous run from reaching the goal.</p> <p>Alternative names:</p> <ul> <li>Your worst own enemy?</li> <li>Paradox Platformer</li> <li>Ruin your run</li> <li>Self-Sabotage</li> </ul>","tags":["game"]},{"location":"game/survival-of-the-fittest-platformer/#core-game-loop","title":"\ud83c\udfae Core Game Loop","text":"<ol> <li> <p>Runner Phase (Platformer Dude):</p> </li> <li> <p>You start running automatically or semi-automatically.</p> </li> <li>You can jump (or eventually gain abilities).</li> <li>Your entire run is recorded (position, timing, jumps, inputs).</li> <li> <p>Goal: Reach the finish line.</p> </li> <li> <p>Architect Phase (Saboteur You):</p> </li> <li> <p>Watch your previous run replay.</p> </li> <li>Place one or more obstacles to kill your past self (from a limited toolbox).</li> <li>Can't edit terrain or goal position, just hinder progress.</li> <li> <p>Must be fair: obstacles must be avoidable by some means.</p> </li> <li> <p>Repeat:</p> </li> <li> <p>Your previous attempts become ghosts (or enemies).</p> </li> <li>New runner must survive past runs + new traps.</li> <li>Over time, you have a mini ecosystem of ghosts and evolving skills.</li> </ol>","tags":["game"]},{"location":"game/survival-of-the-fittest-platformer/#progression-design-survival-of-the-fittest","title":"\ud83d\udd04 Progression Design: \"Survival of the Fittest\"","text":"","tags":["game"]},{"location":"game/survival-of-the-fittest-platformer/#evolution-mechanics","title":"\ud83c\udfb2 Evolution Mechanics","text":"<ul> <li> <p>When a ghost dies, it may get:</p> </li> <li> <p>A counter-ability: jump, armor, crawl, swim, etc.</p> </li> <li>A limited-use upgrade (e.g. one-time-use helmet).</li> <li>Abilities persist only for the ghost that earned it, or are randomly given.</li> </ul> <p>Each iteration, a new generation of runners must adapt to survive the increasing difficulty created by past failures.</p>","tags":["game"]},{"location":"game/survival-of-the-fittest-platformer/#phase-expansions-ausbaustufen","title":"\ud83e\uddf1 Phase Expansions (Ausbaustufen)","text":"<p>You can scale development complexity gradually. Here\u2019s a roadmap:</p>","tags":["game"]},{"location":"game/survival-of-the-fittest-platformer/#phase-1-mvp","title":"\ud83c\udf31 Phase 1 (MVP):","text":"<ul> <li>Simple autoscroll runner.</li> <li>Jump only.</li> <li>One ghost run saved at a time.</li> <li>One obstacle: spike.</li> <li>Architect gets 1 spike per round.</li> </ul>","tags":["game"]},{"location":"game/survival-of-the-fittest-platformer/#phase-2","title":"\ud83c\udf3f Phase 2:","text":"<ul> <li>Multiple ghosts active simultaneously.</li> <li>Multiple obstacle types.</li> <li>Random ability on death.</li> <li>Visual ghost indicators (color-code generations or skills).</li> </ul>","tags":["game"]},{"location":"game/survival-of-the-fittest-platformer/#phase-3","title":"\ud83c\udf33 Phase 3:","text":"<ul> <li>Limited physics (falling spikes, swinging traps).</li> <li>Platform creation.</li> <li>Player can choose upgrades.</li> <li>Architect has resource points to spend.</li> <li>More complex AI on ghosts (simulate abilities better).</li> </ul>","tags":["game"]},{"location":"game/survival-of-the-fittest-platformer/#game-design-principles","title":"\ud83e\udde0 Game Design Principles","text":"","tags":["game"]},{"location":"game/survival-of-the-fittest-platformer/#1-strategic-self-sabotage","title":"1. Strategic Self-Sabotage","text":"<ul> <li>Make it about efficiency vs sabotage.</li> <li>You want to just barely stop yourself \u2014 overdoing it ruins the fun.</li> </ul>","tags":["game"]},{"location":"game/survival-of-the-fittest-platformer/#2-emergent-difficulty","title":"2. Emergent Difficulty","text":"<ul> <li>The more ghosts you accumulate, the more chaotic it becomes.</li> <li>Like a puzzle with self-made traps.</li> </ul>","tags":["game"]},{"location":"game/survival-of-the-fittest-platformer/#3-visual-and-sound-feedback","title":"3. Visual and Sound Feedback","text":"<ul> <li>Every ghost should look visually distinct (different colors, hats, trails).</li> <li>Emphasize success/failure dramatically.</li> </ul>","tags":["game"]},{"location":"game/survival-of-the-fittest-platformer/#technical-considerations-for-a-solo-dev","title":"\ud83e\uddf0 Technical Considerations (for a solo dev)","text":"<ul> <li>Game engine: Unity, Godot, or PICO-8 (if you want ultra minimalist).</li> <li>Ghost Recording: Store key input timestamps or position frames.</li> <li>Obstacle Placement UI: Simple grid or free placement during architect phase.</li> <li>Save System: Loop rounds and persist ghosts and their upgrades.</li> <li>Visual Style: Stylized or minimal (e.g., VVVVVV or Celeste Pico-8 aesthetic).</li> </ul>","tags":["game"]},{"location":"game/survival-of-the-fittest-platformer/#experimental-ideas","title":"\ud83e\uddea Experimental Ideas","text":"<ul> <li>Online Ghost Sharing: Compete against other players\u2019 ghost runs.</li> <li>Challenge Modes: Only one attempt, high-score for most rounds survived.</li> <li>Environmental Hazards: Wind, water currents, lava rising.</li> <li>Procedural Levels: Seeded levels for replayability.</li> </ul>","tags":["game"]},{"location":"game/survival-of-the-fittest-platformer/#victory-end-conditions","title":"\ud83c\udfc1 Victory / End Conditions","text":"<p>You can play with:</p> <ul> <li>Endless Loop: Try to get as far as possible before a generation finally cannot survive.</li> <li>Score System: Points per generation survived.</li> <li>Level Unlocks: Every X rounds unlock new obstacle/ability.</li> </ul> <p>Let me know if you'd like mockups, level design sketches, or even help prototyping logic for Unity/Godot. This idea could really evolve into a tight little cult classic if done right.</p>","tags":["game"]},{"location":"game/survival-of-the-fittest-platformer/#notes","title":"Notes:","text":"<p>The game starts as the most simple imaginable platformer. Running strait to reach the goal. On the next round your previous run gets simulated and you have to place an obsticle to prevent the previous you to reach the goal. On the next run after you play as the platformer dude again and have to reach the goal again. Loop continues.</p> <ul> <li>Platformer dude can only jump. Platformer architect can only place spikes.</li> <li>Platformer dude can only jump. Platformer architect gets some random object to choose from. </li> <li>e.g.:<ul> <li>spikes</li> <li>hole</li> <li>\"Abrisskugel\"</li> <li>Falling spikes</li> <li>vertical wall</li> <li>water</li> <li>ice -&gt; player runs faster</li> <li>mud -&gt; player runs slower</li> <li>...</li> </ul> </li> <li>Maybe dude gets also new abilities or can place \"platforms\"</li> <li>\"Survival of the fittest\": Dude can do nothing exept running. </li> <li>Whenever dude dies they can choose (or get) an ability (protecting against the specific death):<ul> <li>Jump</li> <li>Crawl</li> <li>Armor</li> <li>Helmet</li> <li>Double Jump?</li> <li>Swim?</li> <li>...</li> <li>Such an ability might only last against one obstacle (e.g. armor lets you run through one spike)</li> </ul> </li> <li>Architect gets random obstacles.</li> <li>Multiplayer<ul> <li>One needs to run from left to right, the other from right to left. After each run the player can place a obstacle.</li> </ul> </li> </ul>","tags":["game"]},{"location":"game/the-clumsy-god/","title":"The Clumsy God","text":"<p>A young, inexperienced God was accidentally chosen by a primitive civilization to be their protector against the dark hordes. You - the young God - use miracles and other god like powers - that are hard to control - to save, but also not harm the civilization.</p> <p>Alternative names:</p> <ul> <li>Kinda Godlike</li> <li>Chosen, by Mistake</li> <li>The Young God</li> <li>Divine Oops</li> </ul>","tags":["game"]},{"location":"game/the-clumsy-god/#core-concept","title":"Core Concept:","text":"<p>A primitive civilization prays for a god to protect them \u2014 and by some cosmic accident, you, an untested, unfinished god, are chosen. The darkness is real. The enemies are many. And your powers? Unstable. Incomplete. Sometimes hilarious. Your job: hold back the hordes of darkness across a series of escalating battles \u2014 using divine powers that often misfire or behave unexpectedly.</p>","tags":["game"]},{"location":"game/the-clumsy-god/#gameplay-structure","title":"Gameplay Structure:","text":"","tags":["game"]},{"location":"game/the-clumsy-god/#1-start-of-run","title":"1. Start of Run:","text":"<p>Civilization chooses you (a randomly generated divine trait package: e.g., \u201cGod of Heat &amp; Growth, but Clumsy and Emotional\u201d).</p> <p>You are given a small, procedurally generated \u201cstarting miracle set\u201d (with unknown quirks).</p>","tags":["game"]},{"location":"game/the-clumsy-god/#2-each-battle-phase","title":"2. Each Battle Phase:","text":"<p>Auto-battler format (your chosen units defend a point or region against waves).</p> <p>You can cast divine powers during or between waves \u2014 but they\u2019re unreliable.</p> <p>E.g., \u201cHoly Flame\u201d might spread to allies, \u201cShield of Light\u201d may blind your units, \u201cLightning\u201d might fork uncontrollably.</p> <p>Between waves, you draft new units (avatars, summoned spirits, converted followers) or miracles \u2014 all with potential blessings and curses.</p>","tags":["game"]},{"location":"game/the-clumsy-god/#3-progression-phase","title":"3. Progression Phase:","text":"<p>Survive waves to earn \u201cFaith\u201d from your people.</p> <p>Faith is used to stabilize or upgrade miracles, bless units, or suppress divine glitches.</p> <p>Over time, you gain divine maturity \u2014 unlocking perks like \u201cClarity: 10% less misfire\u201d or \u201cJudgment: Know miracle outcomes before casting.\u201d</p>","tags":["game"]},{"location":"game/the-clumsy-god/#4-end-of-run","title":"4. End of Run:","text":"<p>The darkness either overwhelms your people \u2014 or you buy enough time for them to build the \u201cGreat Temple\u201d and ascend together.</p> <p>Regardless, your god matures a bit more, gaining meta progression (divine traits, stable miracle access, future unlocks).</p>","tags":["game"]},{"location":"game/the-clumsy-god/#systems-overview","title":"Systems Overview:","text":"","tags":["game"]},{"location":"game/the-clumsy-god/#1-units-auto-battling-followers","title":"1. Units (Auto-Battling Followers):","text":"<p>Classes: Basic melee, ranged, healer, buffer, summon. Divine Blessings (Randomly Assigned): E.g., \u201cTouched by Fire,\u201d \u201cBlessed Clumsiness,\u201d \u201cDivine Echo.\u201d</p> <p>Each has a quirky behavior when affected by miracles \u2014 e.g., a unit may grow when healed, or explode when blessed with speed.</p>","tags":["game"]},{"location":"game/the-clumsy-god/#2-miracles-your-powers","title":"2. Miracles (Your Powers):","text":"<p>Core Mechanic: You don\u2019t control them precisely \u2014 they are:</p> <ul> <li>Misfire-prone (wrong targets, delayed effects, too strong)</li> <li>Overlapping in effects (a miracle might bless and curse)</li> <li>Influenced by \u201cMood\u201d or divine instability.</li> </ul> <p>You learn how to predict and mitigate them over runs.</p> <p>Examples:</p> <p>\u201cShield of Rebirth\u201d \u2013 Revives fallen allies, but may also resurrect enemies.</p> <p>\u201cRain of Clarity\u201d \u2013 Clears status effects\u2026 including your buffs.</p> <p>\u201cWrathful Leap\u201d \u2013 Teleports a unit into enemy lines for AoE damage\u2026 sometimes chooses a healer.</p>","tags":["game"]},{"location":"game/the-clumsy-god/#3-divine-mood-stability","title":"3. Divine Mood / Stability:","text":"<p>Your emotional state (rage, fear, joy) affects how powers behave.</p> <p>Your state changes dynamically through battle or decisions (e.g., you panic when units die too fast).</p> <p>Unlock late-game traits that let you channel or manipulate these moods.</p>","tags":["game"]},{"location":"game/the-clumsy-god/#meta-progression","title":"Meta Progression:","text":"<p>Unlock divine traits: \u201cReliable,\u201d \u201cStorm-Forged,\u201d \u201cApathetic but Accurate.\u201d</p> <p>Access more stable miracles over time.</p> <p>Unlock alternate gods: \u201cThe Sleeping Child,\u201d \u201cThe Hungry Flame,\u201d \u201cThe Broken Mirror.\u201d</p>","tags":["game"]},{"location":"game/the-clumsy-god/#visual-dev-scope-notes","title":"Visual &amp; Dev Scope Notes:","text":"<p>Visuals: Stylized 2D or low-poly. Units are simple \u2014 silhouettes, icons, or low-effort sprites with flair.</p> <p>UI: Think Slay the Spire meets Auto Chess: drag/drop units into formation + click powers with cooldowns.</p> <p>Audio: Minimal but expressive \u2014 reactions to miracles (gasps, cheers, crackling power).</p> <p>Code Focus: Create a tight event system: units + powers + modifiers + randomness.</p>","tags":["game"]},{"location":"game/the-clumsy-god/#tone-feel","title":"Tone &amp; Feel:","text":"<p>Tone: Whimsical but tragic. A god in over their head, trying to help, sometimes failing in heartbreaking ways.</p> <p>Inspirations:</p> <ul> <li>Slay the Spire (deck mechanics, randomness as strategy)</li> <li>Loop Hero (abstract civilization theme)</li> <li>Auto Chess / Super Auto Pets (hands-off combat)</li> <li>Cult of the Lamb (faith, style, dark humor)</li> </ul>","tags":["game"]},{"location":"game/the-clumsy-god/#list-of-ideas","title":"List of Ideas","text":"<ul> <li>God power misfire e.g:<ul> <li>simple fire for cooking or light turns into infernos</li> <li>rain into floods</li> <li>electrocuting enemies produce unpredictable storms</li> </ul> </li> <li>More \"Faith Points\" from the civilization gives more power - more power also means it can do more harm or more stability of powers (could be unlockable upgrades).</li> <li>You can unlock passive blessings that stabilize powers but reduce strength \u2014 strategic trade-offs.</li> <li>Citizens learn to adapt around your chaos. Flood-resistant buildings, thunder-prayers to avoid storms, etc.</li> <li>Accidents might be treated as intentional by the civilization (why does he punish us?!)</li> <li>A \"bar meter\" which gives power to use miracles. the lower the bar the higher chance it misfires. There are critical levels where misfire is almost certain.</li> <li>New miracles are unknown (or at least the concrete outcome) until cast once. e.g. a new fire miracle might just produce a fire but it might also be a volcano miracle.</li> <li>If a miracle gets used more often it's less prone to misfire.</li> <li>God created worlds and suns, they have generally too much power to guide a civilization</li> <li>\"Creating sun\" can be used as \"fire\" if tuned down.</li> <li>\"Creating planet\" can create land or be used to throw rocks. </li> </ul>","tags":["game"]},{"location":"misc/beautiful-code/","title":"Beautiful Code","text":"<p>The ratio between reading code and writing code is roughly 10:1!    </p>"},{"location":"misc/beautiful-code/#simplicity","title":"Simplicity","text":"<p>Simplicity is the best way to measure code quality  </p> <p>Before introducing a new framework or library (which probably does some magic), ask yourself what problem this new tool solves, and whether we can change the problem so that we don't need the tool at all.</p> <p>If you don\u2019t actively fight for simplicity in software, complexity will win.</p> <p>\u2026and it will suck.</p>"},{"location":"misc/beautiful-code/#code-traversal","title":"Code Traversal","text":"<p>When the code traversal is easy, the code is simple to follow.</p> <p>How easy it is to navigate through the code? Is it easy to spot where the API functions are written? Is it easy to understand call flows, for example which methods are calling others (and why)- are there good state machines implemented or cleanly identified algorithms?</p>"},{"location":"misc/beautiful-code/#make-the-simplest-thing-that-could-possibly-work","title":"Make the Simplest Thing that could possibly work.","text":"<ol> <li>Implement a new feature in the simplest way you can think of that \"could possibly work\". Make the code pass the Unit Tests.</li> <li>Refactor the system to be the simplest possible code including all the features it now has.</li> </ol>"},{"location":"misc/beautiful-code/#yagni","title":"YAGNI","text":"<p>Always implement things when you actually need them, never when you just foresee that you need them.</p>"},{"location":"misc/beautiful-code/#cohesion","title":"Cohesion","text":"<p>Stuff that changes together should live together (e.g.: achieved with vertical slicing)</p>"},{"location":"misc/beautiful-code/#modularity","title":"Modularity","text":"<p>Enforce modularity where possible (don't leave it to the discipline of the devs).</p>"},{"location":"misc/beautiful-code/#release-early-release-often-and-youll-start-to-write-better-code","title":"Release Early, Release Often and You'll Start to Write Better Code","text":"<p>Or briefly put: shorten your release cycles!</p> <p>This way: your team will handle priorities much better than if you released only one time a year, for instance as for you, you'll get to learn more about your code and your users \u2026 as time spent on development tools, on scripts, on your build, is never a wasted time: it leads to high quality, clean and usable code</p>"},{"location":"misc/beautiful-code/#system-quality","title":"System Quality","text":"<p>The Quality of a System is Defined by Our Ability to Change it!</p>"},{"location":"misc/beautiful-code/#write-pure-functions","title":"Write Pure Functions","text":"<p>Makes your code easier to read and easier to test.</p>"},{"location":"misc/beautiful-code/#treat-it-like-literature","title":"Treat it like literature","text":"<p>It has forms, header, paragraphs, ..</p> Before <pre><code>var userIdList = userIds.ToList();  \n\nvar persons = GetCachedPersons(userIdList);  \n\nvar remainingPersonUserIds = GetRemainingUserIds(userIdList, persons);\n\nif (!remainingPersonUserIds.Any())  \n{  \n    return persons;  \n}\n\nvar personsFromPm = GetValidPersonsFromPersonManagement(remainingPersonUserIds);\n\npersons.AddRange(personsFromPm)  \n\nvar remainingUserIds = GetRemainingUserIds(userIdList, persons);\n\nif (!remainingUserIds.Any())  \n{  \n    return persons;  \n} \n\nvar users = GetUsers(remainingUserIds); \n\npersons.AddRange(users.MapToPersons())  \n\nreturn persons.DistinctBy(p =&gt; p.UserId);\n</code></pre> After <pre><code>var userIdList = userIds.ToList();  \n\nvar persons = GetCachedPersons(userIdList);  \n\nvar remainingPersonUserIds = GetRemainingUserIds(userIdList, persons);  \nif (!remainingPersonUserIds.Any())  \n{  \n    return persons;  \n}  \nvar personsFromPm = GetValidPersonsFromPersonManagement(remainingPersonUserIds);  \npersons.AddRange(personsFromPm)  \n\nvar remainingUserIds = GetRemainingUserIds(userIdList, persons);  \nif (!remainingUserIds.Any())  \n{  \n    return persons;  \n}  \nvar users = GetUsers(remainingUserIds);  \npersons.AddRange(users.MapToPersons())  \n\nreturn persons.DistinctBy(p =&gt; p.UserId);\n</code></pre>"},{"location":"misc/beautiful-code/#comments","title":"Comments","text":"<p>Usually we write comments when the intent of the code is not clear. Instead of writing comments we should ask ourselves =&gt; <code>Can I write the code better?</code></p> <p>Comments are often lies.</p>"},{"location":"misc/clean-code/","title":"Clean Code","text":"<p>Code is clean if it can be understood easily \u2013 by everyone on the team. Clean code can be read and enhanced by a developer other than its original author. With understandability comes readability, changeability, extensibility and maintainability.</p>"},{"location":"misc/clean-code/#general-rules","title":"General rules","text":"<ol> <li>Follow standard conventions.</li> <li>Keep it simple stupid. Simpler is always better. Reduce complexity as much as possible.</li> <li>Boy scout rule. Leave the campground cleaner than you found it.</li> <li>Always find root cause. Always look for the root cause of a problem.</li> </ol>"},{"location":"misc/clean-code/#design-rules","title":"Design rules","text":"<ol> <li>Keep configurable data at high levels.</li> <li>Prefer polymorphism to if/else or switch/case.</li> <li>Separate multi-threading code.</li> <li>Prevent over-configurability.</li> <li>Use dependency injection.</li> <li>Follow Law of Demeter. A class should know only its direct dependencies.</li> </ol>"},{"location":"misc/clean-code/#understandability-tips","title":"Understandability tips","text":"<ol> <li>Be consistent. If you do something a certain way, do all similar things in the same way.</li> <li>Use explanatory variables.</li> <li>Encapsulate boundary conditions. Boundary conditions are hard to keep track of. Put the processing for them in one place.</li> <li>Prefer dedicated value objects to primitive type.</li> <li>Avoid logical dependency. Don't write methods which works correctly depending on something else in the same class.</li> <li>Avoid negative conditionals.</li> </ol>"},{"location":"misc/clean-code/#names-rules","title":"Names rules","text":"<ol> <li>Choose descriptive and unambiguous names.</li> <li>Make meaningful distinction.</li> <li>Use pronounceable names.</li> <li>Use searchable names.</li> <li>Replace magic numbers with named constants.</li> <li>Avoid encodings. Don't append prefixes or type information.</li> </ol>"},{"location":"misc/clean-code/#functions-rules","title":"Functions rules","text":"<ol> <li>Small.</li> <li>Do one thing.</li> <li>Use descriptive names.</li> <li>Prefer fewer arguments.</li> <li>Have no side effects.</li> <li>Don't use flag arguments. Split method into several independent methods that can be called from the client without the flag.</li> </ol>"},{"location":"misc/clean-code/#comments-rules","title":"Comments rules","text":"<ol> <li>Always try to explain yourself in code.</li> <li>Don't be redundant.</li> <li>Don't add obvious noise.</li> <li>Don't use closing brace comments.</li> <li>Don't comment out code. Just remove.</li> <li>Use as explanation of intent.</li> <li>Use as clarification of code.</li> <li>Use as warning of consequences.</li> </ol>"},{"location":"misc/clean-code/#source-code-structure","title":"Source code structure","text":"<ol> <li>Separate concepts vertically.</li> <li>Related code should appear vertically dense.</li> <li>Declare variables close to their usage.</li> <li>Dependent functions should be close.</li> <li>Similar functions should be close.</li> <li>Place functions in the downward direction.</li> <li>Keep lines short.</li> <li>Don't use horizontal alignment.</li> <li>Use white space to associate related things and disassociate weakly related.</li> <li>Don't break indentation.</li> </ol>"},{"location":"misc/clean-code/#objects-and-data-structures","title":"Objects and data structures","text":"<ol> <li>Hide internal structure.</li> <li>Prefer data structures.</li> <li>Avoid hybrids structures (half object and half data).</li> <li>Should be small.</li> <li>Do one thing.</li> <li>Small number of instance variables.</li> <li>Base class should know nothing about their derivatives.</li> <li>Better to have many functions than to pass some code into a function to select a behavior.</li> <li>Prefer non-static methods to static methods.</li> </ol>"},{"location":"misc/clean-code/#tests","title":"Tests","text":"<ol> <li>One assert per test.</li> <li>Readable.</li> <li>Fast.</li> <li>Independent.</li> <li>Repeatable.</li> </ol>"},{"location":"misc/clean-code/#code-smells","title":"Code smells","text":"<ol> <li>Rigidity. The software is difficult to change. A small change causes a cascade of subsequent changes.</li> <li>Fragility. The software breaks in many places due to a single change.</li> <li>Immobility. You cannot reuse parts of the code in other projects because of involved risks and high effort.</li> <li>Needless Complexity.</li> <li>Needless Repetition.</li> <li>Opacity. The code is hard to understand.</li> </ol>"},{"location":"misc/continuous-integration/","title":"Continuous Integration","text":"<p>Merge to main at least daily. This means, we cannot (always) merge a full feature. This means that, if we now also practice Continuous Development we will eventually end up with incomplete features in production. This basically forces us to separate deployment from release. We have those options for that:  - Dark Launch     - We deploy it in a hidden place. Remember: a user might still access it! - Branch by abstractions      - We create abstractions for existing logic and use the old logic. We then migrate one by one to new logic by simple switch the implementation behind the abstraction.  - Feature Flags     - See: Feature toggling)</p>","tags":["DevOps"]},{"location":"misc/decision-making/","title":"Decision Making","text":"<p>Can I undo the decision?</p> <p>What is the cost if the decision is wrong?</p> <p>What is the core problem we're trying to solve?</p> <ul> <li>Make decisions regularly and explicit. Note down the decision and check frequently the impact of the decision. Learn from the past.</li> </ul>","tags":["Architecture","Architect","ADR"]},{"location":"misc/dev-ops/","title":"DevOps","text":"<p>More than development and operations. It's continuous value delivery.</p> <p>Culture of shared responsibility</p> <p>DevOps is</p> <ul> <li>A mindset</li> <li>A culture</li> <li>A set of technical practices</li> </ul> <p>This mainly leads to the fact that different \"businesses or teams\" need to work together (dev, test, business, ops, UX, ... )</p> <p>Goal</p> <ul> <li>Business with fast the ability to adapt fast to the customers needs are more successful</li> <li>Built the right thing</li> <li>Get feedback fast</li> <li>It's about the product and not about the project. It's about the outcome not the output<ul> <li>We don't want to maximize the number of features (stuff) delivered but we want to solve the problems of our customers</li> </ul> </li> </ul> <p>This can be achieved by</p> <ul> <li>Shift left =&gt; get feedback earlier in the process. Once it reaches the development phase it should be clear and fast to release</li> <li>Reduce lead time<ul> <li>Reduce the time from \"business ideas and features\" to release of such features.</li> <li>This means also to reduce the lead time of single tasks (reduce the waiting time). Examples here is the manual testing before the deployment (roughly 1 week)</li> </ul> </li> <li>Built in quality<ul> <li>This gives us confidence to deploy and release often and with high probability of success</li> <li>Lots of stories go back to the development phase. This needs to be reduced.</li> <li>Increase automated tests (incl. security, L&amp;P, E2E, tests for other non-functional requirements)</li> </ul> </li> <li>Involve the business more and earlier</li> <li>Set hypothesis, measure it and learn from it</li> </ul> <p>Tools digital.ai</p>"},{"location":"misc/git/","title":"Git","text":"","tags":["git"]},{"location":"misc/git/#stacked-diffs-stacked-pr","title":"Stacked Diffs / Stacked PR","text":"<p>For larger features you often have to wait long for PR reviews. Stacked diffs address this issue to reduce waiting time for PR reviews. The main idea behind \"stacked diffs\" is a development workflow that involves breaking down large features into smaller, manageable units called \"diffs\" or \"change sets\" and stacking them on top of each other. This is mainly achieved by creating small, self-contained changes that builds upon the change before it. This contrasts with the traditional model where large changes are reviewed in a single, monolithic pull request. </p> <p>The main difficulty with this approach arises when changes in the parent PR occur (e.g. PR feedback). Those changes often produce merge conflicts which propagate through all child branches. This issue can be mitigated with interactive rebase. Do an interactive rebase on main but remove all commits from the first Diff (e.g. Diff 1)</p> <p></p> <p>Example: <pre><code>git checkout main\ngit pull\ngit checkout feature-b\ngit rebase -i main\n</code></pre></p> <p>Without rebasing: <pre><code>%%{init: {'theme': 'dark'} }%%\ngitGraph LR:\n    checkout main\n    commit id:\"init\"\n    branch feature-a\n    checkout feature-a\n    commit id:\"feat: Feature A\"\n    commit id:\"change 1a\"\n    branch feature-b\n    checkout feature-b\n    commit id:\"feat: Feature B\"\n    commit id:\"change 1b\"\n    checkout main\n    commit id:\"change 1\"\n    checkout feature-a\n    merge main id:\"merge main-&gt;a 1\"\n    checkout feature-b\n    commit id:\"change 2b\"\n    merge feature-a id:\"merge a-&gt;b 1\"\n    checkout feature-a\n    commit id:\"change 2a\"\n    checkout feature-b\n    merge feature-a id:\"merge a-&gt;b 2\"\n    checkout main\n    merge feature-a id:\"merge a-&gt;main 1\"\n    commit id:\"change 2\"\n    checkout feature-b\n    commit id:\"change 3b\"\n    merge main id:\"merge main-&gt;b 1\"\n    checkout main\n    merge feature-b id:\"merge b-&gt;main 1\"</code></pre> With correct <code>rebasing</code> of feature-b  onto feature-a  we should have a cleaner history and no \"merge a-&gt;b\" commits. <pre><code>%%{init: {'theme': 'dark'} }%%\ngitGraph LR:\n    checkout main\n    commit id:\"init\"\n    branch feature-a\n    checkout feature-a\n    commit id:\"feat: Feature A\"\n    commit id:\"change 1a\"\n    checkout main\n    commit id:\"change 1\"\n    checkout feature-a\n    merge main id:\"merge main-&gt;a 1\"\n    commit id:\"change 2a\"\n    branch feature-b\n    checkout feature-b\n    commit id:\"feat: Feature B\"\n    commit id:\"change 1b\"\n    commit id:\"change 2b\"\n    commit id:\"change 3b\"\n    checkout main\n    merge feature-a id:\"merge a-&gt;main 1\"\n    commit id:\"change 2\"\n    checkout feature-b\n    merge main id:\"merge main-&gt;b 1\"\n    checkout main\n    merge feature-b id:\"merge b-&gt;main 1\"</code></pre> With <code>interactive rebase</code> of main  we  should get rid of the crosses (\u274c) : <pre><code>%%{init: {'theme': 'dark'} }%%\ngitGraph LR:\n    checkout main\n    commit id:\"merge a-&gt;main 1\"\n    commit id:\"change 2\"\n    branch feature-b\n    checkout feature-b\n    commit type:REVERSE id:\"feat: Feature A\"\n    commit type:REVERSE id:\"change 1a\"\n    commit type:REVERSE id:\"merge main-&gt;a 1\"\n    commit type:REVERSE id:\"change 2a\"\n    commit id:\"feat: Feature B\"\n    commit id:\"change 1b\"\n    commit id:\"change 2b\"\n    commit id:\"change 3b\"\n    commit id:\"merge main-&gt;b 1\"\n    checkout main\n    merge feature-b id:\"merge b-&gt;main 1\"</code></pre></p> <p>Tools to support stacked diffs</p> <ul> <li>Phabricator</li> <li>Graphite</li> </ul>","tags":["git"]},{"location":"misc/git/#git-worktree","title":"git-worktree","text":"<p>A git repository can support multiple working trees, allowing you to check out more than one branch at a time.</p> <p>See: https://git-scm.com/docs/git-worktree</p>","tags":["git"]},{"location":"misc/git/#gitflow","title":"Gitflow","text":"<p>The key premise of Gitflow is that each commit to your primary branch (main) represents a release and a secondary branch, develop, is used for ongoing development. New features are built on feature branches and then reviewed and merged into the develop branch. When changes are ready to be released, a release branch is created, and when the release is complete that branch is merged into the primary branch.</p> <p>Gitflow is most effective for teams that follow an extensive release management process that prevents continuous deployment, particularly if multiple stakeholders need to approve a release before it goes live. The release branch acts as a gatekeeper.</p> <p>It however no longer alignes with the modern, continuous delivery based development.</p>","tags":["git"]},{"location":"misc/git/#trunk-based-development-tbd","title":"Trunk Based Development (TBD)","text":"<p>In trunk based development, developers merge small, frequent updates to the primary or \"trunk\" branch. Idiomatic trunk based development has developers committing directly to the primary branch, however it is common for teams to use short lived feature branches to support code reviews and automated checks prior to merging, this variant can sometimes be referred to as scaled trunk based development or feature branch workflow. Releases are done directly from the primary branch and since you are already deploying on all commits to the primary branch, fixes to deployed code is treated no different from any other code change.</p> <p>This workflow is ideal for teams that utilise continuous deployment</p> <p>There are no long living branches (especially: develop, release, features, hotfix). Everything gets directly merged to the main branch and needs therefore to be release ready. Trunk Based Development allows true Continuous Integration.</p>","tags":["git"]},{"location":"misc/github/","title":"Github","text":""},{"location":"misc/github/#action","title":"Action","text":"<p>Example &gt; Build and Deploy Gatsby page to gh-pages</p> <ol> <li>Generate a token on Github (select repo): https://github.com/settings/tokens</li> <li>Copy token and insert as new Secret in the repository where you like to use it.</li> <li>Create action  (se example)<ul> <li>Visual Studio can create one for deploying to azure. Use Publish... functionality for it.<ul> <li>Make sure you select the correct branch \ud83d\ude09</li> </ul> </li> </ul> </li> </ol> <pre><code>on:\n  push:\n    branches:\n      - main\nname: Build and Deploy Gatsby\njobs:\n  build_gatsby:\n    name: build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n\n      - name: yarn install\n        run: yarn install\n\n      - name: gatsby build\n        env:\n          GH_API_KEY: ${{ secrets.YOUR_SECRET_NAME }}\n        run: yarn build\n\n      - name: deploy\n        uses: maxheld83/ghpages@v0.2.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          GH_PAT: ${{ secrets.YOUR_SECRET_NAME }}\n          BUILD_DIR: \"public/\"\n</code></pre>"},{"location":"misc/giving-feedback/","title":"Giving Feedback","text":""},{"location":"misc/giving-feedback/#summary","title":"Summary","text":"<ul> <li>Be (very) concrete</li> <li>State facts don't make assumptions<ul> <li>Where/When did it happen (also see: concrete)</li> <li>What did the other person do or say (facts)<ul> <li>NOT \"I believe you said that because you thought...\" </li> </ul> </li> </ul> </li> <li>Impact on me or others<ul> <li>How did that make me feel?</li> </ul> </li> </ul>"},{"location":"misc/giving-feedback/#notes","title":"Notes","text":"<p>Spontaneous Feedback (e.g. after a Meeting) * What can I do differently? Why? * What could I have done better?</p> <p>SBIS - Situation     - Give concrete context / situation - Behaviour     - Observation and not assumption - Impact     - impact on (and feelings for) me and/or others  - Suggestion or Request     - I can request -&gt; other can reject</p> <p>Perparation (for difficult feedbacks) My Goals &amp; Intentions - What do I want to achieve? What is the key message? - What outcome do I expect - Do I have all information - Do I wish my \"vis-a-vis\" to prepare and or self reflect beforehand? - Setting and timing.</p> <p>Our Relationship - my role - current relationship - biased history? - haveing my mood and attitude in check</p> <p>Vis-a-Vis expectations - Whats the current mood and situation of my vis-a-vis (let them at least mentally prepare for it) - What is the conversation about - Are the intendet goals of us tow in conflic or in congruence?</p> <p>5 phases (plus) - plus     - Context: invite and inform (clearly and) transparently why I want to talk and whats the core theme - Phase 1 (key, we have to start well!)     - Connect: build an atmosphere (e.g. Small talk or make it explicit \"It's gonna be a difficult situation and I feel a bit nervouse about it.)     - Frame: set a clear context: \"why are we here?\", make a clear cut after the connection         - Maybe I have to make a concrete switch \".. Thats very interesting but we have to switch to the actual topic, ...\"     - Naming: Name the facts (issue) in the beginning. Use the SBIS model - Phase 2     - Listen to the vis-a-vis perspective - Phase 3     - Share my perspective, state a request (SBIS) - Phase 4     - Seek alignment (not necessary agreement). How do we proceed?. Together (or the other). Let them make suggestions (I can add).     - Make a contract on the way forward. - Phase 5     - Close consciously     - Don't \"water it down\" (\"But it is actually ok what you do...\", \"It's not that bad... \")</p>"},{"location":"misc/misc/","title":"Misc","text":"<ul> <li>Reduce dependency<ul> <li>In code</li> <li>In use cases</li> <li>In teams</li> <li>Everywhere</li> </ul> </li> </ul>"},{"location":"misc/misc/#agile","title":"Agile","text":"<p>\"Which runner can run as fast as possible from beginning to end?\" \"Someone who runs really short races.\"  \"We're programmer, we're smarter than runners and know how to fix that problem. We just fire the starting pistol every 100 meters and call it a sprint!\"</p> <p>Certified Really Agile Programmer (CRAP)</p>"},{"location":"misc/mvp/","title":"Minimum Viable Product (MVP)","text":"<p>The essence of the Minimum Viable Product (MVP) approach is that each product increment will attempt to deliver at least one outcome to at least a subset of the users of the system.  \u00a0--&gt; Instead of shipping something we ship something of value.</p>","tags":["Architecture"]},{"location":"misc/mvp/#minimum-viable-architecture-mva","title":"Minimum Viable Architecture (MVA)","text":"<p>Never delay feedback. Ever. Get really good at creating and evaluating the smallest increment possible to answer the question \"Is our latest decision a good one?\"</p>","tags":["Architecture"]},{"location":"misc/obsidian/","title":"Obsidian","text":"<p>On this page I test Obsidian features. Some might work, some wont. Above this title we have some font matter properties</p>","tags":["obsidian","PKM"]},{"location":"misc/obsidian/#inline","title":"Inline","text":"","tags":["obsidian","PKM"]},{"location":"misc/obsidian/#links","title":"Links","text":"<p>misc ngrx-push</p>","tags":["obsidian","PKM"]},{"location":"misc/obsidian/#callout","title":"Callout","text":"<p>Info</p> <p>This callout will get converted to the mkdocs admonition format (see note below) by the mkdocs-callouts plugin</p> Just Another Callout, which is collapsed <p>Wow</p> <p>Note</p> <p>Callouts (see above) will get converted to this format (mkdocs admonition) by the mkdocs-callouts plugin</p> <p>alternative:</p> <p>Tip Just a tip</p>","tags":["obsidian","PKM"]},{"location":"misc/obsidian/#formatting","title":"Formatting","text":"<p>bold cursive ==highlight== ~~invalid~~</p>","tags":["obsidian","PKM"]},{"location":"misc/obsidian/#plantuml","title":"PlantUML","text":"<pre><code>@startuml C4_Elements\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n\nPerson(personAlias, \"Label\", \"Optional Description\")\nContainer(containerAlias, \"Label\", \"Technology\", \"Optional Description\")\nSystem(systemAlias, \"Label\", \"Optional Description\")\n\nRel(personAlias, containerAlias, \"Label\", \"Optional Technology\")\n@enduml\n</code></pre>","tags":["obsidian","PKM"]},{"location":"misc/obsidian/#mermaid","title":"Mermaid","text":"<pre><code>classDiagram\n    Animal &lt;|-- Duck\n    Animal &lt;|-- Fish\n    Animal &lt;|-- Zebra\n    Animal : +int age\n    Animal : +String gender\n    Animal: +isMammal()\n    Animal: +mate()\n    class Duck{\n      +String beakColor\n      +swim()\n      +quack()\n    }\n    class Fish{\n      -int sizeInFeet\n      -canEat()\n    }\n    class Zebra{\n      +bool is_wild\n      +run()\n    }</code></pre>","tags":["obsidian","PKM"]},{"location":"misc/obsidian/#drawio-plugin","title":"Draw.io Plugin","text":"<p>Within table</p> sketchy style non-sketchy style","tags":["obsidian","PKM"]},{"location":"misc/obsidian/#tags","title":"Tags","text":"","tags":["obsidian","PKM"]},{"location":"misc/obsidian/#pkm-obsidian","title":"PKM #obsidian","text":"","tags":["obsidian","PKM"]},{"location":"misc/pitch/","title":"How to Pitch","text":""},{"location":"misc/pitch/#ambition","title":"Ambition","text":"<p>Why? Goal, Motivation</p>"},{"location":"misc/power-point/","title":"PowerPoint","text":"<p>Follow these 5 point to improve your PowerPoint presentations:</p> <ul> <li>One message per page</li> <li>Working memory =&gt; redundency effect =&gt; if I speak and show the same context, nothing get remembered (1 + 1 = 0)<ul> <li>Move text down to the notes section</li> <li>Use the slide to show short sweet text bits and an image to enhance the message I talk about</li> </ul> </li> <li>Your attention goes to big objects, moving objects, high contrast objects, signaling objects (red, yellow, orange)<ul> <li>Use to your advantage.</li> <li>The most important part of a page should be the biggest (e.g. make title small since it is often not the important part of a page)</li> </ul> </li> <li>Contrast to control the focus <ul> <li>when new text appears on a page make it a strong contrast and weaken the contrast of existing text (e.g. if a new bullet point is blended in)</li> <li>Use it for big tables by makeing single rows or column a better contrast (the one you want to focus on)</li> <li>Use dark background (instead of white)<ul> <li>Helps to move the focus to the speaker / presenter</li> </ul> </li> </ul> </li> <li>No more then 7 objects per page</li> </ul> <p>Following those tips usually lead to more slides =&gt; No Problem, Maybe don't show the numbers (10 / 80) since it is exhausting.</p> <p>Tell\u00a0\u2019em\u00a0what you\u2019re gonna tell\u00a0\u2019em, tell \u2019em, and then tell \u2019em what you\u2019ve told \u2019em.</p>"},{"location":"misc/raspberry-pi/","title":"Raspberry Pi","text":""},{"location":"misc/raspberry-pi/#pi-hole","title":"Pi-Hole","text":"<p>See: https://github.com/DesktopECHO/Pi-Hole-for-WSL1/</p> <p>Default install folder: C:\\Program Files\\Pi-hole</p>"},{"location":"misc/rest/","title":"RESTful","text":"<p>RESTful vs RPC == Resources vs Operations == CRUD auf Resourcen (Entities) vs Methoden/Processes calls</p>"},{"location":"misc/rest/#methods","title":"Methods","text":"<p>POST (Create)</p> <ul> <li>Execute once</li> <li>Wird auch f\u00fcr Commands verwendet oder GETS die einen Body mitschicken m\u00fcssen (z.b.: eine Liste von Ids die zu lange f\u00fcr die URL werden kann)</li> <li>Hat Body</li> <li>Response<ul> <li>201 =&gt; Created (mit Location Attribute)</li> </ul> </li> </ul> <p>GET (Read)</p> <ul> <li>Response<ul> <li>200 =&gt; OK mit Body</li> </ul> </li> </ul> <p>PUT</p> <ul> <li>Update (idempotent =&gt; execute multiple times)</li> <li>Hat Body</li> <li>Response<ul> <li>204 =&gt; NoContent   =&gt; Wir m\u00fcssen meistens auch das UI patchen (da(her) no content)</li> </ul> </li> </ul> <p>PATCH</p> <ul> <li>Update Single Properties (idempotent =&gt; execute multiple times)</li> <li>Hat Body</li> <li>Response<ul> <li>204 =&gt; NoContent   =&gt; Wir m\u00fcssen meistens auch das UI patchen (da(her) no content)</li> </ul> </li> </ul> <p>DELETE</p> <ul> <li>Delete (idempotent =&gt; execute multiple times)</li> <li>Response<ul> <li>204 =&gt; NoContent   =&gt; Wir m\u00fcssen meistens auch das UI patchen (da(her) no content)</li> <li>400 =&gt; Verschlucken =&gt; 204</li> <li>404 =&gt; Verschlucken =&gt; 204</li> </ul> </li> </ul> <p>OPTIONS</p> <ul> <li>Darf ich die Operation ausf\u00fchren, resp. gibt es einen Endpoint daf\u00fcr?</li> </ul>"},{"location":"misc/rest/#statuscodes","title":"StatusCodes","text":"<ul> <li>2xx =&gt; Success</li> <li>4xx =&gt; Client error =&gt; Aufrufer (Client) kann dur Anpassung des Request ein anderes Resultat erhalten</li> <li>500 =&gt; InternalServerError =&gt; nur bei Programmierfehler, es wird nie von uns explizit zur\u00fcckgegeben</li> </ul>"},{"location":"misc/rest/#idempotent","title":"Idempotent","text":"<p>A request method is considered \"idempotent\" if the intended effect on the server of multiple identical requests with that method is the same as the effect for a single such request.</p> <p>The HTTP specification states that following methods must be idempotent.</p> <ul> <li>GET</li> <li>PUT</li> <li>DELETE</li> </ul> <p>But following methods are not guaranteed to be idempotent.</p> <ul> <li>POST</li> </ul>"},{"location":"misc/security/","title":"Security","text":""},{"location":"misc/security/#access-control","title":"Access Control","text":""},{"location":"misc/testing/","title":"Testing","text":""},{"location":"misc/testing/#tdd","title":"TDD","text":"<p>Eat your own dog food</p> <p>Test your software as a user (consumer) would use it. If you write a REST API, then you should also test against the API endpoints.  A test that needs to <code>GET</code> something from that API can also use the <code>POST</code> endpoint to add it first.</p> <p>The tests are defined by the business requirements. We need tests that test those requirements. Therefore, if we don't have a test, then it wasn't a requirement.</p> <p>A good practice is to create new models (copy) for the tests. If we do so, we indirectly also test the contract because if we need to change the models on the tests, then we also have to change the code on the consumer side.</p> <p>Unit test are often an obstacle for refactorings (so much tests break, especially the ones that have many mocks) even though they should enable it.</p>"},{"location":"misc/uBlock/","title":"uBlock","text":""},{"location":"misc/uBlock/#custom-ublock-filter-list","title":"Custom uBlock filter list","text":"<pre><code>! Title:  YouTube-Cosmetic-Filters-for-uBlock-Origin - Complete version\n! Description: Cosmetic filters to improve the search results, home section and video page.\n! Home: https://github.com/Onsotumenh/YouTube-Cosmetic-Filters-for-uBlock-Origin\n\n! Search Results\nwww.youtube.com##ytd-shelf-renderer.style-scope:has(span:has-text(/For you/i))\nwww.youtube.com##ytd-shelf-renderer.style-scope:has(span:has-text(/People also watched/i))\nwww.youtube.com##ytd-shelf-renderer.style-scope:has(span:has-text(/Previously watched/i))\nwww.youtube.com##ytd-shelf-renderer.style-scope:has(span:has-text(/Related to your search/i))\nwww.youtube.com##ytd-shelf-renderer.style-scope:has(span:has-text(/Related Movies/i))\nwww.youtube.com##ytd-shelf-renderer.style-scope:has(span:has-text(/New for you/i))\nwww.youtube.com##ytd-shelf-renderer.style-scope:has(span:has-text(/Channels new to you/i))\nwww.youtube.com##ytd-shelf-renderer.style-scope:has(span:has-text(/Related chapters/i))\nwww.youtube.com##ytd-shelf-renderer.ytd-item-section-renderer.style-scope:has(span:has-text(/Latest from/i))\nwww.youtube.com##ytd-shelf-renderer.ytd-item-section-renderer.style-scope:has(span:has-text(/Results for similar searches/i))\nwww.youtube.com##ytd-shelf-renderer.ytd-item-section-renderer.style-scope:has-text(/From related searches/i)\nwww.youtube.com##ytd-horizontal-card-list-renderer.ytd-item-section-renderer.style-scope:has-text(/People also search for/i)\nwww.youtube.com##ytd-horizontal-card-list-renderer.ytd-item-section-renderer.style-scope:has-text(/Searches related to/i)\nwww.youtube.com##ytd-horizontal-card-list-renderer.ytd-item-section-renderer.style-scope:has-text(/Related chapters/i)\nwww.youtube.com##ytd-movie-renderer.ytd-item-section-renderer.style-scope\nwww.youtube.com##ytd-reel-shelf-renderer.ytd-item-section-renderer.style-scope\nwww.youtube.com##ytd-shelf-renderer.ytd-item-section-renderer.style-scope:has-text(/Latest Posts From/i)\nwww.youtube.com###about-these-results\nwww.youtube.com##.ytd-item-section-renderer.style-scope &gt; .ytd-ad-slot-renderer.style-scope\n! Crisis Resource Panel\nwww.youtube.com##ytd-emergency-onebox-renderer.ytd-item-section-renderer.style-scope &gt; .ytd-emergency-onebox-renderer.style-scope\n!Shorts\nwww.youtube.com###shorts-container\nwww.youtube.com###dismissible.ytd-video-renderer.style-scope:has(ytd-thumbnail.ytd-video-renderer.style-scope:has-text(/Shorts/i))\nwww.youtube.com###content &gt; .ytd-video-renderer.style-scope:has-text(/#Shorts/i)\nwww.youtube.com###ytd-video-renderer.ytd-item-section-renderer.style-scope:has-text(/#shorts/i)\n\n! Home\nwww.youtube.com##contents.ytd-shelf-renderer.style-scope:has-text(/People also watched/i)\nwww.youtube.com##ytd-shelf-renderer.ytd-item-section-renderer.style-scope:has(span:has-text(/Watch again/i))\nwww.youtube.com##ytd-horizontal-card-list-renderer.ytd-item-section-renderer.style-scope:has-text(/People also watched/i)\nwww.youtube.com###content &gt; .ytd-rich-section-renderer.style-scope\nwww.youtube.com##ytd-rich-item-renderer.ytd-rich-grid-row.style-scope &gt; #star-survey\nwww.youtube.com###merch-shelf &gt; .ytd-watch-flexy.style-scope\nwww.youtube.com##ytd-rich-item-renderer.ytd-rich-grid-row.style-scope &gt; .ytd-feed-nudge-renderer.style-scope\nwww.youtube.com##ytd-rich-item-renderer.style-scope &gt; .ytd-feed-nudge-renderer.style-scope\nwww.youtube.com##.ytd-rich-item-renderer.style-scope &gt; .ytd-feed-nudge-renderer.style-scope\nwww.youtube.com##ytd-mini-guide-entry-renderer.ytd-mini-guide-renderer.style-scope\n!Shorts\nwww.youtube.com##ytd-rich-item-renderer.ytd-rich-grid-row.style-scope:has(span:has-text(/Shorts/i))\nwww.youtube.com##ytd-rich-item-renderer.ytd-rich-grid-row.style-scope:has(span:has-text(SHORTS))\nwww.youtube.com##ytd-rich-item-renderer.ytd-rich-grid-row.style-scope:has-text(/#Shorts/i)\n! Reduce empty slots in grid\nyoutube.com##ytd-rich-grid-row,#contents.ytd-rich-grid-row:style(display: contents !important)\n\n! Keyword Bar (removes \"sort by\" on video page)\n! www.youtube.com###scroll-container &gt; .ytd-feed-filter-chip-bar-renderer.style-scope\n! www.youtube.com###header &gt; .ytd-rich-grid-renderer.style-scope\n! Voice Search Button\nwww.youtube.com###voice-search-button\n!shorts category\nwww.youtube.com##ytd-guide-entry-renderer.ytd-guide-section-renderer.style-scope &gt; .ytd-guide-entry-renderer.style-scope.yt-simple-endpoint:has-text(/Shorts/i)\n\n! Video Page\nwww.youtube.com###paid-comment-images\nwww.youtube.com###paid-comment-chip &gt; .yt-pdg-comment-chip-renderer.style-scope\nwww.youtube.com###paid-comment-background\n! Membership Popup\nwww.youtube.com###contentWrapper &gt; .ytd-popup-container.style-scope:has(span:has-text(/Membership/i))\n! Watch next / Related\nwww.youtube.com##ytd-item-section-renderer.ytd-watch-next-secondary-results-renderer.style-scope\n! Related Keywords\nwww.youtube.com###content &gt; .yt-related-chip-cloud-renderer.style-scope\n! Shorts\nwww.youtube.com##ytd-grid-video-renderer.ytd-grid-renderer.style-scope:has(span:has-text(/Shorts/i))\nwww.youtube.com##ytd-grid-video-renderer.ytd-grid-renderer.style-scope:has(span:has-text(SHORTS))\nwww.youtube.com###contents &gt; .ytd-item-section-renderer.style-scope:has(#title-container:has(span:has-text(/Shorts/i)))\nwww.youtube.com###contents &gt; .ytd-item-section-renderer.style-scope:has(#title-container:has(span:has-text(SHORTS)))\n\n! Optional\nwww.youtube.com##.ytd-button-renderer.style-scope.yt-simple-endpoint &gt; .size-default.style-suggestive.ytd-button-renderer.style-scope\n! Like/Dislike Count\nwww.youtube.com##ytd-toggle-button-renderer.style-text.force-icon-button.ytd-menu-renderer.style-scope &gt; .ytd-toggle-button-renderer.style-scope.yt-simple-endpoint &gt; .style-text.ytd-toggle-button-renderer.style-scope\n! Music secondary(search results)\nwww.youtube.com###contents &gt; .ytd-secondary-search-container-renderer.style-scope\n! Premium Videos\nwww.youtube.com##ytd-rich-item-renderer.ytd-rich-grid-row.style-scope &gt; .ytd-rich-item-renderer.style-scope:has(.ytd-rich-grid-media.style-scope.video-badge:has-text(Premium))\n! Time Based Shorts Filters\n  ! Search Results\nwww.youtube.com###dismissible.ytd-video-renderer.style-scope:has(.ytd-thumbnail-overlay-time-status-renderer.style-scope:has(span:has-text(/\\s(0:\\d\\d|1:\\d\\d)\\s/)))\nwww.youtube.com###dismissible.ytd-video-renderer.style-scope:has(.ytd-thumbnail-overlay-time-status-renderer.style-scope:has-text(/\\s(0:\\d\\d|1:\\d\\d)\\s/))\n  ! Home\nwww.youtube.com##ytd-rich-item-renderer.ytd-rich-grid-row.style-scope:has(ytd-thumbnail-overlay-time-status-renderer.ytd-thumbnail.style-scope:has(span:has-text(/\\s(0:\\d\\d|1:\\d\\d)\\s/)))\n  ! Video Page\nwww.youtube.com##ytd-grid-video-renderer.ytd-grid-renderer.style-scope:has(ytd-thumbnail-overlay-time-status-renderer.ytd-thumbnail.style-scope:has(span:has-text(/\\s(0:\\d\\d|1:\\d\\d)\\s/)))\n\n\n! Add via \"https://gist.github.com/mdPlusPlus/35bee203897bed57ced1f1a5e1d2148a/raw\"\n! https://web.de\nweb.de###footer\nweb.de###loginsearch-ad\nweb.de###mainnav\nweb.de###promoline\nweb.de###rightnav\nweb.de##.games\nweb.de##.logout-modules\nweb.de##.partner-links\nweb.de##.vorteilswelt\nweb.de##.weather\nweb.de##.webcent\nweb.de##div.wrapper-center:nth-of-type(n+3)\nweb.de##.abi\nweb.de##tr.iba-variant-test\n\n\n! https://gmx.ch\n! @@||dl.gmx.ch/permission/oneTrust/live/scripttemplates/6.13.0/otBannerSdk.js$script,domain=plus.gmx.com\n! ||dl.gmx.ch/uim/connector/live/v2/nonfriendlyiframe.html\n! ||https://dl.gmx.ch/uim/connector/live/v2/nonfriendlyiframe.html$document \n! ||https://dl.gmx.ch/uim/connector/live/v2/nonfriendlyiframe.html$important,frame\n! ##:xpath(//iframe[contains(@src, 'dl.gmx.ch/uim/connector/live/v2/nonfriendlyiframe.html')])\n\n||dl.gmx.net/permission/live/portal/v1/ppp/core.html$subdocument\nwww.gmx.ch##.permission-layer-default\nwww.gmx.ch##.permission-core-iframe\nwww.gmx.ch##.ppp-layer\nwww.gmx.net##.ppp-layer\n\n! 2024-04-01 https://www.postfinance.ch\nwww.postfinance.ch##.cookie_consent_banner--background\n\n! Temporary\n# Hide a specific channel\n# www.youtube.com##ytd-video-renderer.ytd-item-section-renderer:has(a[href*=\"@digadigadoo6997\"])\n</code></pre>"},{"location":"misc/validation/","title":"Validation","text":"<p>See: https://event-driven.io/en/explicit_validation_in_csharp_just_got_simpler/</p>","tags":["dotNet"]},{"location":"misc/validation/#example-end-solution","title":"Example / end solution","text":"<pre><code>public static class Validation\n{\n    public static Guid AssertNotEmpty(\n        [NotNull] this Guid? value,\n        [CallerArgumentExpression(\"value\")] string? argumentName = null\n    ) =&gt;\n        (value != null &amp;&amp; value.Value != Guid.Empty)\n            ? value.Value\n            : throw new ArgumentOutOfRangeException(argumentName);\n\n\n    public static string AssertNotEmpty(\n        [NotNull] this string? value,\n        [CallerArgumentExpression(\"value\")] string? argumentName = null\n    ) =&gt;\n        !string.IsNullOrWhiteSpace(value)\n            ? value\n            : throw new ArgumentOutOfRangeException(argumentName);\n\n\n    public static string? AssertNullOrNotEmpty(\n        this string? value,\n        [CallerArgumentExpression(\"value\")] string? argumentName = null\n    ) =&gt;\n        value?.AssertNotEmpty(argumentName);\n\n    public static string AssertMatchesRegex(\n        [NotNull] this string? value,\n        [StringSyntax(StringSyntaxAttribute.Regex)]\n        string pattern,\n        [CallerArgumentExpression(\"value\")] string? argumentName = null\n    ) =&gt;\n        Regex.IsMatch(value.AssertNotEmpty(), pattern)\n            ? value\n            : throw new ArgumentOutOfRangeException(argumentName);\n\n    public static int AssertPositive(\n        [NotNull] this int? value,\n        [CallerArgumentExpression(\"value\")] string? argumentName = null\n    ) =&gt;\n        value?.AssertPositive() ?? throw new ArgumentOutOfRangeException(argumentName);\n\n    public static int AssertPositive(\n        this int value,\n        [CallerArgumentExpression(\"value\")] string? argumentName = null\n    ) =&gt;\n        value &gt; 0\n            ? value\n            : throw new ArgumentOutOfRangeException(argumentName);\n}\n</code></pre> <pre><code>public readonly record struct ProductId(Guid Value)\n{\n    public static ProductId From(Guid? productId) =&gt;\n        new(productId.AssertNotEmpty());\n}\n\npublic readonly record struct SKU(string Value)\n{\n    public static SKU From(string? sku) =&gt;\n        new(sku.AssertMatchesRegex(\"[A-Z]{2,4}[0-9]{4,18}\"));\n}\n\npublic record RegisterProduct(\n    ProductId ProductId,\n    SKU SKU,\n    string Name,\n    string? Description\n)\n{\n    public static RegisterProduct From(Guid? id, string? sku, string? name, string? description) =&gt;\n        new(\n            ProductId.From(id),\n            SKU.From(sku),\n            name.AssertNotEmpty(),\n            description.AssertNullOrNotEmpty()\n        );\n}\n</code></pre> <pre><code>endpoints.MapPost(\n        \"api/products/\",\n        async (\n            ProductsDBContext dbContext,\n            RegisterProductRequest request,\n            CancellationToken ct\n        ) =&gt;\n        {\n            var (sku, name, description) = request;\n            var productId = Guid.NewGuid();\n\n            var command = RegisterProduct.From(productId, sku, name, description);\n\n            await Handle(\n                dbContext.AddAndSave,\n                dbContext.ProductWithSKUExists,\n                command,\n                ct\n            );\n\n            return Created($\"/api/products/{productId}\", productId);\n        })\n    .Produces(StatusCodes.Status201Created)\n    .Produces(StatusCodes.Status400BadRequest);\n\n\n// we're embracing here that we can expect anything from the UI\npublic record RegisterProductRequest(\n    string SKU,\n    string Name,\n    string? Description\n);\n</code></pre>","tags":["dotNet"]}]}